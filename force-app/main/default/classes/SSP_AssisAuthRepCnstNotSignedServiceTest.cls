/***************************************************************************************************
*   Type        :   Controller Class
*   Name        :   SSP_AssisAuthRepConsentNotSignedServiceTest
*   Create By   :   Suresh
*   Create Date :   August-6-2020
*   Description :   Test class for SSP_AssisAuthRepConsentNotSignedService.
*   Modification Log:
*   --------------------------------------------------------------------------------------
*    Developer                  Date                Description
*   --------------------------------------------------------------------------------------
*    Ajay Saini               JAN-2-2020             Initial Version
*
*****************************************************************************************************/
@isTest(seeAllData=false)
public class SSP_AssisAuthRepCnstNotSignedServiceTest{
      @testSetup
    public static void initialDataSetup() {
        insert new LOG_LogMessageSettings__c(
            Name = RE_GlobalConstants.LOGS_DEFAULT_AUTOGENERATED,
            LOG_Debug__c = true,
            LOG_Error__c= true,
            LOG_Info__c = true,
            LOG_Warning__c = true,
            LOG_Log_Purge__c = 365
        );
        Id sCitizenAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Citizen');
        Id sNonCitizenAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Non_Citizen');
        contact con1 = SSP_TestDataFactory.createContactRecord('Test', 'Test', 'test@tester.com', sCitizenAccRecTypeId, true);
        contact con2 = SSP_TestDataFactory.createContactRecord('Test1', 'Test1', 'test1@tester.com', sNonCitizenAccRecTypeId, true);
         String accRtypeId1 = Schema.SObjectType.Account.getRecordTypeInfosByName().get(SSP_GlobalConstants.ORGANIZATION).getRecordTypeId();
        List<Account> lstAcc = SSP_TestDataFactory.createAccounts(1, false);
        lstAcc[0].Name = 'SSP_AuthRepAccessRequestCtrl';
        lstAcc[0].recordtypeId = accRtypeId1;
        lstAcc[0].DCDataId__c = 7777777;
        lstAcc = ESAPI.accessController().insertAsUser(lstAcc, SSP_Utility.getFieldsNamesList (lstAcc)).getInsertedObjects();
        //List<Contact> lstCon = (List<Contact>)SSP_Utility.fetchRecords(new Map<String, String>{'objectName'=>'Contact','operator'=>'AND'}, new Set<String>{'Id', 'FirstName', 'LastName'}, new Map<String, String>{'FirstName'=>'Citizen','LastName'=>'User'});
        AccountContactRelation acr = new AccountContactRelation(); 
        acr.Accountid = lstAcc[0].Id;
        acr.Contactid = con1.Id;
        acr.IsActive = true;
        acr.Roles = 'Organization_Auth_Rep';
        acr.DCContactId__c = 7777777;
        acr.RequestAccessPermission__c = '{"PermissionLevel_CCAP__c": "PY",   "PermissionLevel_KTAP__c": "ET",   "PermissionLevel_SNAP__c": "SE",   "PermissionLevel_KIHIPP__c": "ST",   "PermissionLevel_Medicaid__c": "NT" }';
        acr.ProgramsApplied__c = 'MA; KT; SN; SS; DS; CC; KP';
        acr = (AccountContactRelation)ESAPI.accessController().insertAsUser(new List<AccountContactRelation>{acr}, SSP_Utility.getFieldsNamesList (new List<AccountContactRelation>{acr})).getInsertedObjects()[0];       
        
        String toDoRecTypeId = Schema.SObjectType.SSP_Notifications__c.getRecordTypeInfosByName().get('To Do').getRecordTypeId();
        SSP_Notifications__c notifRec4 = new SSP_Notifications__c();
            notifRec4.recordtypeid = toDoRecTypeId;
            notifRec4.recipientType__c = SSP_GlobalConstants.NOTIFICATION_CITIZEN;
            notifRec4.recipientId__c = '786756753';
            notifRec4.Status__c = SSP_GlobalConstants.NOTIFICATION_ACTIVE;
            notifRec4.notificationCode__c = 'SF-TOD-001';
            notifRec4.Reminder_Date__c = Date.today();
            notifRec4.Linked_Record_Id__c = String.valueOf(acr.Id);
            insert notifRec4; 
         List<SSP_Application__c> lstAppln = SSP_TestDataFactory.createSSPApplications(1, false);
        lstAppln[0].Account__c=lstAcc[0].Id;        
        lstAppln[0].Contact__c = con2.Id;
        lstAppln[0].DCCaseNumber__c = 100375363;
        lstAppln[0].ProgramsApplied__c = 'MA; KT; SN; SS; DS; CC; KP';
        lstAppln= ESAPI.accessController().insertAsUser(lstAppln, SSP_Utility.getFieldsNamesList (lstAppln)).getInsertedObjects();
        
        String accRtypeId = Schema.SObjectType.Account.getRecordTypeInfosByName().get(SSP_GlobalConstants.ORGANIZATION).getRecordTypeId();
       List<Account> lstAcc1 = SSP_TestDataFactory.createAccounts(1, false);
        lstAcc1[0].Name = 'Test123';
        lstAcc1[0].RecordTypeId =accRtypeId;
        lstAcc1[0].DCDataId__c = 7777776;
        lstAcc1 = ESAPI.accessController().insertAsUser(lstAcc1, SSP_Utility.getFieldsNamesList (lstAcc1)).getInsertedObjects();
        AccountContactRelation acr1 = new AccountContactRelation(); 
        acr1.Accountid = lstAcc1[0].Id;
        acr1.Contactid = con2.Id;
        acr1.IsActive = true;
        acr1.Roles = SSP_GlobalConstants.INDIVIDUAL_AUTH_REP;
        acr1.DCContactId__c = 100375361;
        acr1.RequestAccessPermission__c = '{"PermissionLevel_CCAP__c": "PY",   "PermissionLevel_KTAP__c": "ET",   "PermissionLevel_SNAP__c": "SE",   "PermissionLevel_KIHIPP__c": "ST",   "PermissionLevel_Medicaid__c": "NT" }';
        acr1.ProgramsApplied__c = 'MA; KT; SN; SS; DS; CC; KP';
        acr1 = (AccountContactRelation)ESAPI.accessController().insertAsUser(new List<AccountContactRelation>{acr1}, SSP_Utility.getFieldsNamesList (new List<AccountContactRelation>{acr1})).getInsertedObjects()[0];       
        
        SSP_Notifications__c notifRec = new SSP_Notifications__c();
            notifRec.recordtypeid = toDoRecTypeId;
            notifRec.recipientType__c = SSP_GlobalConstants.NOTIFICATION_CITIZEN;
            notifRec.recipientId__c = '786756751';
            notifRec.Status__c = SSP_GlobalConstants.NOTIFICATION_ACTIVE;
            notifRec.notificationCode__c = 'SF-TOD-001';
            notifRec.Reminder_Date__c = Date.today();
            notifRec.Linked_Record_Id__c = String.valueOf(acr1.Id);
            insert notifRec; 
        List<SSP_Application__c> lstAppln1 = SSP_TestDataFactory.createSSPApplications(1, false);
        lstAppln1[0].Account__c=lstAcc1[0].Id;        
        lstAppln1[0].Contact__c = con2.Id;
        lstAppln1[0].DCCaseNumber__c = 100375361;
        lstAppln1[0].ProgramsApplied__c = 'MA; KT; SN; SS; DS; CC; KP';
        lstAppln1= ESAPI.accessController().insertAsUser(lstAppln1, SSP_Utility.getFieldsNamesList (lstAppln)).getInsertedObjects();
        
        
        List<Account> lstAcc2 = SSP_TestDataFactory.createAccounts(1, false);
        lstAcc2[0].Name = 'Test123';
        lstAcc2[0].RecordTypeId =accRtypeId;
        lstAcc2[0].DCDataId__c = 7777776;
        lstAcc2 = ESAPI.accessController().insertAsUser(lstAcc2, SSP_Utility.getFieldsNamesList (lstAcc2)).getInsertedObjects();
        contact con3 = SSP_TestDataFactory.createContactRecord('Test1', 'Test1', 'test1@tester.com', sNonCitizenAccRecTypeId, true);
        AccountContactRelation acr2 = new AccountContactRelation(); 
        acr2.Accountid = lstAcc1[0].Id;
        acr2.Contactid = con3.Id;
        acr2.IsActive = true;
        acr2.Roles = 'Assister';
        acr2.DCContactId__c = 100375361;
        acr2.RequestAccessPermission__c = '{"PermissionLevel_CCAP__c": "PY",   "PermissionLevel_KTAP__c": "ET",   "PermissionLevel_SNAP__c": "SE",   "PermissionLevel_KIHIPP__c": "ST",   "PermissionLevel_Medicaid__c": "NT" }';
        acr2.ProgramsApplied__c = 'MA; KT; SN; SS; DS; KP';
        acr2 = (AccountContactRelation)ESAPI.accessController().insertAsUser(new List<AccountContactRelation>{acr2}, SSP_Utility.getFieldsNamesList (new List<AccountContactRelation>{acr2})).getInsertedObjects()[0];    
        
        SSP_Notifications__c notifRec1 = new SSP_Notifications__c();
            notifRec1.recordtypeid = toDoRecTypeId;
            notifRec1.recipientType__c = SSP_GlobalConstants.NOTIFICATION_CITIZEN;
            notifRec1.recipientId__c = '786756752';
            notifRec1.Status__c = SSP_GlobalConstants.NOTIFICATION_ACTIVE;
            notifRec1.notificationCode__c = 'SF-TOD-001';
            notifRec1.Reminder_Date__c = Date.today();
            notifRec1.Linked_Record_Id__c = String.valueOf(acr2.Id);
            insert notifRec1; 
        List<SSP_Application__c> lstAppln12 = SSP_TestDataFactory.createSSPApplications(1, false);
        lstAppln12[0].Account__c=lstAcc2[0].Id;        
        lstAppln12[0].Contact__c = con3.Id;
        lstAppln12[0].DCCaseNumber__c = 866755434;
        lstAppln12[0].ProgramsApplied__c = 'MA; KT; SN; SS; DS; KP';
        lstAppln12= ESAPI.accessController().insertAsUser(lstAppln12, SSP_Utility.getFieldsNamesList (lstAppln12)).getInsertedObjects();
        
        
        List<Account> lstAcc4 = SSP_TestDataFactory.createAccounts(1, false);
        lstAcc4[0].Name = 'Test123';
        lstAcc4[0].RecordTypeId =accRtypeId;
        lstAcc4[0].DCDataId__c = 7777776;
        lstAcc4 = ESAPI.accessController().insertAsUser(lstAcc4, SSP_Utility.getFieldsNamesList (lstAcc4)).getInsertedObjects();
        contact con5 = SSP_TestDataFactory.createContactRecord('Test1', 'Test1', 'test1@tester.com', sNonCitizenAccRecTypeId, true);
        AccountContactRelation acr4 = new AccountContactRelation(); 
        acr4.Accountid = lstAcc1[0].Id;
        acr4.Contactid = con5.Id;
        acr4.IsActive = true;
        acr4.Roles = SSP_GlobalConstants.INDIVIDUAL_AUTH_REP;
        acr4.DCContactId__c = 1003753;
        acr4.RequestAccessPermission__c = '{"PermissionLevel_CCAP__c": "PY",   "PermissionLevel_KTAP__c": "ET",   "PermissionLevel_SNAP__c": "SE",   "PermissionLevel_KIHIPP__c": "ST",   "PermissionLevel_Medicaid__c": "NT" }';
        acr4.ProgramsApplied__c = 'MA;SN;SS;DS;CC;KP';
        acr4 = (AccountContactRelation)ESAPI.accessController().insertAsUser(new List<AccountContactRelation>{acr4}, SSP_Utility.getFieldsNamesList (new List<AccountContactRelation>{acr4})).getInsertedObjects()[0];    
        
        SSP_Notifications__c notifRec6 = new SSP_Notifications__c();
            notifRec6.recordtypeid = toDoRecTypeId;
            notifRec6.recipientType__c = SSP_GlobalConstants.NOTIFICATION_CITIZEN;
            notifRec6.recipientId__c = '7867567';
            notifRec6.Status__c = SSP_GlobalConstants.NOTIFICATION_ACTIVE;
            notifRec6.notificationCode__c = 'SF-TOD-001';
            notifRec6.Reminder_Date__c = Date.today();
            notifRec6.Linked_Record_Id__c = String.valueOf(acr4.Id);
            insert notifRec6; 
        List<SSP_Application__c> lstAppln15 = SSP_TestDataFactory.createSSPApplications(1, false);
        lstAppln15[0].Account__c=lstAcc4[0].Id;        
        lstAppln15[0].Contact__c = con5.Id;
        lstAppln15[0].DCCaseNumber__c = 866755434;
        lstAppln15[0].ProgramsApplied__c = 'MA; SN; SS; DS; CC; KP';
        lstAppln15= ESAPI.accessController().insertAsUser(lstAppln15, SSP_Utility.getFieldsNamesList (lstAppln15)).getInsertedObjects();
        
        
        List<Account> lstAcc3 = SSP_TestDataFactory.createAccounts(1, false);
        lstAcc3[0].Name = 'Test123';
        lstAcc3[0].RecordTypeId =accRtypeId;
        lstAcc3[0].DCDataId__c = 7777776;
        lstAcc3 = ESAPI.accessController().insertAsUser(lstAcc3, SSP_Utility.getFieldsNamesList (lstAcc3)).getInsertedObjects();
        contact con4 = SSP_TestDataFactory.createContactRecord('Test1', 'Test1', 'test1@tester.com', sNonCitizenAccRecTypeId, true);
        AccountContactRelation acr3 = new AccountContactRelation(); 
        acr3.Accountid = lstAcc3[0].Id;
        acr3.Contactid = con4.Id;
        acr3.IsActive = true;
        acr3.Roles = 'Assister';
        acr3.DCContactId__c = 100375361;
        acr3.RequestAccessPermission__c = '{"PermissionLevel_CCAP__c": "PY",   "PermissionLevel_KTAP__c": "ET",   "PermissionLevel_SNAP__c": "SE",   "PermissionLevel_KIHIPP__c": "ST",   "PermissionLevel_Medicaid__c": "NT" }';
        acr3.ProgramsApplied__c = 'MA; KT; SN; SS; DS; CC';
        acr3 = (AccountContactRelation)ESAPI.accessController().insertAsUser(new List<AccountContactRelation>{acr3}, SSP_Utility.getFieldsNamesList (new List<AccountContactRelation>{acr3})).getInsertedObjects()[0];    
        
        SSP_Notifications__c notifRec5 = new SSP_Notifications__c();
            notifRec5.recordtypeid = toDoRecTypeId;
            notifRec5.recipientType__c = SSP_GlobalConstants.NOTIFICATION_CITIZEN;
            notifRec5.recipientId__c = '786756712';
            notifRec5.Status__c = SSP_GlobalConstants.NOTIFICATION_ACTIVE;
            notifRec5.notificationCode__c = 'SF-TOD-001';
            notifRec5.Reminder_Date__c = Date.today();
            notifRec5.Linked_Record_Id__c = String.valueOf(acr3.Id);
            insert notifRec5; 
        List<SSP_Application__c> lstAppln13 = SSP_TestDataFactory.createSSPApplications(1, false);
        lstAppln13[0].Account__c=lstAcc3[0].Id;        
        lstAppln13[0].Contact__c = con4.Id;
        lstAppln13[0].DCCaseNumber__c = null;
        lstAppln13[0].ProgramsApplied__c = 'MA; KT; SN; SS; DS; CC';
        lstAppln13= ESAPI.accessController().insertAsUser(lstAppln13, SSP_Utility.getFieldsNamesList (lstAppln13)).getInsertedObjects();
        
        system.debug('::::App:::'+lstAppln);
    }
    public static User getPortalUser() {
        return SSP_TestDataFactory.createPortalUser();
    }
    
     @isTest
    public static void unitTest1() {
        Test.setMock(HttpCalloutMock.class, new AssisterAuthrepClientDetailsResponseMock());
         test.startTest();
        SSP_AssisAuthRepConsentNotSignedService.isToAvoid = true;
         Id ntfctnId = [SELECT Id FROM SSP_Notifications__c  WHERE recipientId__c = '786756753' LIMIT 1].Id;
         String str = SSP_AssisAuthRepConsentNotSignedService.updateAccountContactRelation(String.valueOf(ntfctnId), true);
         SSP_AssisAuthRepConsentNotSignedService.expireNotification(ntfctnId);
         test.stopTest();
        
    }
    @isTest
    public static void unitTest4() {
        Test.setMock(HttpCalloutMock.class, new SSP_AHIMockClass());
         test.startTest();
         Id ntfctnId = [SELECT Id FROM SSP_Notifications__c  WHERE recipientId__c = '786756752' LIMIT 1].Id;
         String str = SSP_AssisAuthRepConsentNotSignedService.updateAccountContactRelation(String.valueOf(ntfctnId), true);
         SSP_AssisAuthRepConsentNotSignedService.expireNotification(ntfctnId);
         test.stopTest();
        
    }
    
     @isTest
    public static void unitTest5() {
        Test.setMock(HttpCalloutMock.class, new SSP_AHIMockClass());
         test.startTest();
         SSP_AssisAuthRepConsentNotSignedService.isToAvoid = true;
         Id ntfctnId = [SELECT Id FROM SSP_Notifications__c  WHERE recipientId__c = '7867567' LIMIT 1].Id;
         String str = SSP_AssisAuthRepConsentNotSignedService.updateAccountContactRelation(String.valueOf(ntfctnId), false);
         SSP_AssisAuthRepConsentNotSignedService.expireNotification(ntfctnId);
         test.stopTest();
        
    }
    @isTest
    public static void unitTest2() {
        Test.setMock(HttpCalloutMock.class, new SSP_AHIMockClass());
         test.startTest();
         SSP_AssisAuthRepConsentNotSignedService.isToAvoid = true;
         Id sNonCitizenAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Non_Citizen');
          contact con1 = SSP_TestDataFactory.createContactRecord('Test1', 'Test1', 'test1@tester.com', sNonCitizenAccRecTypeId, true);
         String accRtypeId1 = Schema.SObjectType.Account.getRecordTypeInfosByName().get(SSP_GlobalConstants.ORGANIZATION).getRecordTypeId();
        List<Account> lstAcc = SSP_TestDataFactory.createAccounts(1, false);
        lstAcc[0].Name = 'SSP_AuthRepAccessRequestCtrl';
        lstAcc[0].recordtypeId = accRtypeId1;
        lstAcc = ESAPI.accessController().insertAsUser(lstAcc, SSP_Utility.getFieldsNamesList (lstAcc)).getInsertedObjects();
        AccountContactRelation acr = new AccountContactRelation(); 
        acr.Accountid = lstAcc[0].Id;
        acr.Contactid = con1.Id;
        acr.IsActive = true;
        acr.Roles = 'Organization_Auth_Rep';//SSP_GlobalConstants.AGENCY_ADMIN_ROLE;
        acr.RequestAccessPermission__c = '{"PermissionLevel_CCAP__c": "PY",   "PermissionLevel_KTAP__c": "ET",   "PermissionLevel_SNAP__c": "SE",   "PermissionLevel_KIHIPP__c": "ST",   "PermissionLevel_Medicaid__c": "NT" }';
        acr = (AccountContactRelation)ESAPI.accessController().insertAsUser(new List<AccountContactRelation>{acr}, SSP_Utility.getFieldsNamesList (new List<AccountContactRelation>{acr})).getInsertedObjects()[0];       
        
        String toDoRecTypeId = Schema.SObjectType.SSP_Notifications__c.getRecordTypeInfosByName().get('To Do').getRecordTypeId();
        SSP_Notifications__c notifRec4 = new SSP_Notifications__c();
            notifRec4.recordtypeid = toDoRecTypeId;
            notifRec4.recipientType__c = SSP_GlobalConstants.NOTIFICATION_CITIZEN;
            notifRec4.recipientId__c = '786756783';
            notifRec4.Status__c = SSP_GlobalConstants.NOTIFICATION_ACTIVE;
            notifRec4.notificationCode__c = 'SF-TOD-001';
            notifRec4.Reminder_Date__c = Date.today();
            notifRec4.Linked_Record_Id__c = String.valueOf(acr.Id);
            insert notifRec4; 
          String nonCitizenRole = SSP_GlobalConstants.Organization_Auth_Rep;
         Id ntfctnId = [SELECT Id FROM SSP_Notifications__c WHERE recipientId__c = '786756783' LIMIT 1].Id;
        String str = SSP_AssisAuthRepConsentNotSignedService.updateAccountContactRelation(String.valueOf(ntfctnId), false);
         SSP_AssisAuthRepConsentNotSignedService.expireNotification(ntfctnId);
         test.stopTest();
        
    }
    
     @isTest
    public static void unitTest3() {
        Test.setMock(HttpCalloutMock.class, new SSP_AHIMockClass());
         test.startTest();
         Id ntfctnId = [SELECT Id FROM SSP_Notifications__c WHERE recipientId__c = '786756712' LIMIT 1].Id;
         String str = SSP_AssisAuthRepConsentNotSignedService.updateAccountContactRelation(String.valueOf(ntfctnId), true);
         SSP_AssisAuthRepConsentNotSignedService.expireNotification(ntfctnId);
         test.stopTest();
        
    }
    public class AssisterAuthrepClientDetailsResponseMock implements HttpCalloutMock {
    
    public HTTPResponse respond(HTTPRequest req) {    
         HttpResponse res = new HttpResponse();
         String sAssisterAuthRepClientDetails ='   {  '  + 
                                                '     "viewName": "AssisterAuthRepClientDetails",  '  + 
                                                '     "caseNumber": 0,  '  + 
                                                '     "primaryApplicantIndividualId": "890010089",  '  + 
                                                '     "programCode": "MA",  '  + 
                                                '     "mode": "RAC",  '  + 
                                                '     "role": "assister",  '  + 
                                                '     "Payload": {  '  + 
                                                '       "AuthrepandAssiterClientInfo": {  '  + 
                                                '         "RoleType": "ASSISTER",  '  + 
                                                '         "UserId": "7777777",  '  + 
                                                '         "OrganizationId": "4",  '  + 
                                                '         "FirstName": "SASFAS",  '  + 
                                                '         "LastName": "SFASF",  '  + 
                                                '         "MiddleName": "ASDF",  '  + 
                                                '         "Suffix": "Mr.",  '  + 
                                                '         "SSN": "1234",  '  + 
                                                '         "Gender": "M",  '  + 
                                                '         "Birthdate": "2020-02-05",  '  + 
                                                '         "OrganizationName": "XDF DFDS",  '  + 
                                                '         "OrgranizationIdentificationNumber": "123424",  '  + 
                                                '         "Phone": "34521242434",  '  + 
                                                '         "Email": "test@test.com",  '  + 
                                                '         "Street": "Norway street",  '  + 
                                                '         "AddressLine2": "SAF ASF ASDF",  '  + 
                                                '         "SSP_State": "Mizoram",  '  + 
                                                '         "CountyCode": "IN",  '  + 
                                                '         "Zipcode5": "12342",  '  + 
                                                '         "PreferredLanguageCode": "EN",  '  + 
                                                '         "PrimaryPhoneExtension": "1234",  '  + 
                                                '         "DCRepresentativeId": "1234",  '  + 
                                                '         "RepresentativeRelationshipCode": "123",  '  + 
                                                '         "ProgramsApplied": "MA",  '  + 
                                                '         "isAuthRepVerified": "Y",  '  + 
                                                '         "CaseNumber": "100044211",  '  + 
                                                '         "PermissionLevelMedicaid": "Y",  '  + 
                                                '         "PermissionLevelSNAP": "Y",  '  + 
                                                '         "PermissionLevelStateSupp": "Y",  '  + 
                                                '         "PermissionLevelKIHIPP": "Y",  '  + 
                                                '         "PermissionLevelCCAP": "Y",  '  + 
                                                '         "PermissionLevelKTAP": "Y"  '  + 
                                                '       },  '  + 
                                                '       "CaseInfo": {  '  + 
                                                '         "CaseNumber": "100044211",  '  + 
                                                '         "ProgramCode": "KT",  '  + 
                                                '         "LastUpdatedDate": "2018-11-02",  '  + 
                                                '         "FirstName": "HARRY",  '  + 
                                                '         "LastName": "POTTER",  '  + 
                                                '         "Email": "harry@gmail.coo",  '  + 
                                                '         "PrimaryPhoneNumber": "4538564850",  '  + 
                                                '         "PrimaryPhoneExetnsion": "12",  '  + 
                                                '         "PrimaryPhoneTypeCode": "CE",  '  + 
                                                '         "SecondaryPhoneNumber": "040",  '  + 
                                                '         "SecondaryPhoneExtension": "123",  '  + 
                                                '         "SecondaryPhoneTypeCode": "CE",  '  + 
                                                '         "PreferredNotificationMethodCode": "P",  '  + 
                                                '         "PreferredWrittenLanguageCode": "1",  '  + 
                                                '         "PreferredSpokenLanguageCode": "1"  '  + 
                                                '       }  '  + 
                                                '     }  '  + 
                                                '   }  '  + 
                                                '    ' ; 
        res.setBody(sAssisterAuthRepClientDetails);          
        res.setHeader('Content-Type', 'Text');
        res.setStatusCode(200);
        return res;
    }
    }
}