/*
* classname     : SSP_AuthRepAccessRequestCtrlTest 
* @description  : This class is use to cover class of SSP_AuthRepAccessRequestCtrl.
* @author       : Ashwin Kasture
* @date         : 3rd Aug 2020
* MODIFICATION LOG:
* DEVELOPER             DATE            DESCRIPTION 
*/
@isTest(seeAllData=false)
public class SSP_AuthRepAccessRequestCtrlTest {
    /*
    * method        : setup()
    * @description  : This method is use to set up the Test Data.
    * @author       : Ashwin Kasture    
    * @return       : Void
    * */
    @TestSetup static void setup() {
             insert new LOG_LogMessageSettings__c(
            Name = RE_GlobalConstants.LOGS_DEFAULT_AUTOGENERATED,
            LOG_Debug__c = true,
            LOG_Error__c= true,
            LOG_Info__c = true,
            LOG_Warning__c = true,
            LOG_Log_Purge__c = 365
        );
        SSP_TestDataFactory.setupTestData();
        List<Account> lstAcc = SSP_TestDataFactory.createAccounts(1, false);
        lstAcc[0].Name = 'SSP_AuthRepAccessRequestCtrl';
        lstAcc = ESAPI.accessController().insertAsUser(lstAcc, SSP_Utility.getFieldsNamesList (lstAcc)).getInsertedObjects();
        
        List<Contact> lstCon = (List<Contact>)SSP_Utility.fetchRecords(new Map<String, String>{'objectName'=>'Contact','operator'=>'AND'}, new Set<String>{'Id', 'FirstName', 'LastName'}, new Map<String, String>{'FirstName'=>'Citizen','LastName'=>'User'});
        
        AccountContactRelation acr = new AccountContactRelation(); 
        acr.Accountid = lstAcc[0].Id;
        acr.Contactid = lstCon[0].Id;
        acr.IsActive = true;
        acr.Roles = 'Organization_Auth_Rep';
        acr = (AccountContactRelation)ESAPI.accessController().insertAsUser(new List<AccountContactRelation>{acr}, SSP_Utility.getFieldsNamesList (new List<AccountContactRelation>{acr})).getInsertedObjects()[0];       
        
        List<SSP_Application__c> lstAppln = SSP_TestDataFactory.createSSPApplications(1, false);
        lstAppln[0].Account__c=lstAcc[0].Id;        
        lstAppln[0].Contact__c = lstCon[0].Id;
        lstAppln= ESAPI.accessController().insertAsUser(lstAppln, SSP_Utility.getFieldsNamesList (lstAppln)).getInsertedObjects();
        
        List<SSP_Member__c> lstMem = SSP_TestDataFactory.createSSPMembers(1, false);
        lstMem[0].contact__c=lstCon[0].Id;  
        lstMem[0].PrimaryPhoneExtension__c ='7348789790';
        lstMem[0].PrimaryPhoneNumber__c ='8983838290';
        lstMem = ESAPI.accessController().insertAsUser(lstMem, SSP_Utility.getFieldsNamesList (lstMem)).getInsertedObjects();
        
        List<SSP_ApplicationIndividual__c> lstAppInd = SSP_TestDataFactory.createApplicationIndividuals(1, false); 
        lstAppInd[0].SSP_Application__c=lstAppln[0].Id;
        lstAppInd[0].SSP_Member__c=lstMem[0].Id;
        lstAppInd = ESAPI.accessController().insertAsUser(lstAppInd, SSP_Utility.getFieldsNamesList (lstAppInd)).getInsertedObjects(); 
        
        System.runAs(fetchCitizenUser()) {
            Id recordTypeIdNotification = Schema.SObjectType.SSP_Notifications__c.getRecordTypeInfosByName().get('To Do').getRecordTypeId();
            SSP_Notifications__c notifRec = new SSP_Notifications__c();
            notifRec.recordtypeid = recordTypeIdNotification;
            notifRec.recipientType__c = 'citizen';
            notifRec.recipientId__c = '999036538';
            notifRec.Status__c = 'Active';
            notifRec.Linked_Record_Id__c = String.valueOf(acr.Id);
            notifRec.notificationCode__c = 'SF-TOD-001';
            notifRec.Reminder_Date__c = Date.today();
            insert notifRec;
        }
    }
    
    private static User fetchCitizenUser() {
        return ((List<User>)SSP_Utility.fetchRecords(new Map<String, String>{'objectName'=>'User'}, new Set<String>{'Id'}, new Map<String, String>{'UserName'=>'citizen@abc.xyz','limit'=>'1'}))[0];        
    }
    
    /* 
    * method        : authRepAccessRequestMethod
    * @description  : This method is use to cover methods of class.
    * @author       : Ashwin Kasture    
    * @return       : void
    * */
    @isTest
    public static void authRepAccessRequestMethod() {
        Test.setMock(WebServiceMock.class, new SSP_MCIForBenefitMockClass()); 
        System.runAs(fetchCitizenUser()) {
            Test.startTest();
            SSP_AuthRepAccessRequestCtrl.loadAuthRepDetails();
            List<SSP_Notifications__c> lstNotifications = [select Id from SSP_Notifications__c];
            String sNotificationDetails='{"notificationId": "'+lstNotifications[0].Id+'"}';
            SSP_AuthRepAccessRequestCtrl.showClientProgramPermission(sNotificationDetails);
            
            String sClientDetails= '{"firstName":"Amit","middleName":"","lastName":"Shah","suffix":"","gender":"M","birthDate":"2001-03-05","ssn":"","applicationNumber":""}';
            SSP_AuthRepAccessRequestCtrl.searchClientMCIService(sClientDetails);
            Test.stopTest();
        }
    }
    /* 
    * method        : authRepAccessRequestMethod1
    * @description  : This method is use to cover methods of class.
    * @author       : Ashwin Kasture    
    * @return       : void
    * */
    @isTest
    public static void authRepAccessRequestMethod1() {
        System.runAs(fetchCitizenUser()) {
            Test.startTest();
            String sRequestAccessDetails = '{"accountContactRelation": {"RepresentativeRelationshipCode__c": "EX","programPermission": {"PermissionLevel_Medicaid__c": "ST"}},"sourceIndividualId": "999036538","caseNumber": "123","applicationNumber": "","loginUserDetails":[{"Id": "005r00000040JkUAAU","ContactId": "003r000000LyPdRAAV","Contact": {"FirstName": "Dail","LastName": "Worker","Id": "003r000000LyPdRAAV"}}],"reverseSSPDCResponse": {"CaseInfo":[{"ProgramCode":"MA","CaseNumber":"123","LastUpdatedDate":"2001-10-10"}]},"applicationResponse": []}';
            SSP_AuthRepAccessRequestCtrl.requestAccess(sRequestAccessDetails);

            //Cover exception block
            SSP_AuthRepAccessRequestCtrl.requestAccess(null);
            SSP_AuthRepAccessRequestCtrl.searchClientMCIService(null);
            SSP_AuthRepAccessRequestCtrl.showClientProgramPermission(null);
            Test.stopTest();
        }
    }
    /* 
    * method        : authRepAccessRequestMethodWithAppNum
    * @description  : This method is use to cover methods of class. 
    * @author       : Ashwin Kasture    
    * @return       : void
    * */
    @isTest
    public static void authRepAccessRequestMethodWithAppNum() {
                    List<SSP_Application__c> lstApp = [select Id,Name from SSP_Application__c];
                    List<SSP_Member__c> lstMember = [select Id from SSP_Member__c];
                    List<SSP_ApplicationIndividual__c> lstAppIndv = [select Id from SSP_ApplicationIndividual__c];
                    List<AccountContactRelation> lstACR = [select Id from AccountContactRelation];

        System.runAs(fetchCitizenUser()) {
            Test.startTest();
            String sRequestAccessDetails = '{"accountContactRelation": {"RepresentativeRelationshipCode__c": "EX","programPermission": {"PermissionLevel_Medicaid__c": "ST","PermissionLevel_KTAP__c":"ST","PermissionLevel_SNAP__c":"ST"}},"sourceIndividualId": "999036538","caseNumber": "123","applicationNumber": "12345","loginUserDetails":[{"Id": "005r00000040JkUAAU","ContactId": "003r000000LyPdRAAV","Contact": {"FirstName": "Dail","LastName": "Worker","Id": "003r000000LyPdRAAV"}}],"reverseSSPDCResponse": {"CaseInfo":[{"ProgramCode":"MA","CaseNumber":"123","LastUpdatedDate":"2001-10-10"}]},"applicationResponse": [{"ApplicationNumber":"12345","ProgramCode":"MA","LastUpdatedDate":"2001-10-10"},{"ApplicationNumber":"1234","ProgramCode":"KT","LastUpdatedDate":"2001-10-11"}]}';
            SSP_AuthRepAccessRequestService.requestApplicationAccess(sRequestAccessDetails);
            String sRequestAccessDetails1 = '{"accountContactRelation": {"RepresentativeRelationshipCode__c": "EX","programPermission": {"PermissionLevel_Medicaid__c": "ST","PermissionLevel_KTAP__c":"ST","PermissionLevel_SNAP__c":"ST"}},"sourceIndividualId": "999036538","caseNumber": "123","applicationNumber": "12345","loginUserDetails":[{"Id": "005r00000040JkUAAU","ContactId": "003r000000LyPdRAAV","Contact": {"FirstName": "Dail","LastName": "Worker","Id": "003r000000LyPdRAAV"}}],"reverseSSPDCResponse": {"CaseInfo":[{"ProgramCode":"MA","CaseNumber":"1234","LastUpdatedDate":"2001-10-10"}]},"applicationResponse": [{"ApplicationNumber":"3214","ProgramCode":"MA","LastUpdatedDate":"2001-10-10"}]}';
            SSP_AuthRepAccessRequestService.requestApplicationAccess(sRequestAccessDetails1);
            String sRequestAccessDetails2 = '{"accountContactRelation": {"RepresentativeRelationshipCode__c": "EX","programPermission": {"PermissionLevel_KTAP__c":"ST","PermissionLevel_SNAP__c":"ST"},"addressDetails":{"Street__c":"teststreet","AddressLine2__c":"testaddreline2","City__c":"testcity","CountyCode__c":"001","SSP_State__c":"AL","Zipcode4__c":"6546","Zipcode5__c":"32232"}},"sourceIndividualId": "999036538","caseNumber": "123","applicationNumber":"'+lstApp[0].Name+'","loginUserDetails":[{"Id": "005r00000040JkUAAU","ContactId": "003r000000LyPdRAAV","Contact": {"FirstName": "Dail","LastName": "Worker","Id": "003r000000LyPdRAAV"}}],"reverseSSPDCResponse": {"CaseInfo":[{"ProgramCode":"MA","CaseNumber":"1234","LastUpdatedDate":"2001-10-10"}]},"applicationResponse": [{"ApplicationNumber":"'+lstApp[0].Name+'","ProgramCode":"MA","LastUpdatedDate":"2001-10-10"}]}';
            SSP_AuthRepAccessRequestService.requestApplicationAccess(sRequestAccessDetails2);
            SSP_AuthRepAccessRequestService.getRequestAccessPermission(lstApp[0].Id);
            Test.stopTest();  
        }
    }
    @isTest
    public static void authRepAccessRequestMethod2() {
        SSP_MCIForBenefitMockClass mockclass= new SSP_MCIForBenefitMockClass();
        mockclass.isThrowException=true;
        Test.setMock(WebServiceMock.class, mockclass); 
        System.runAs(fetchCitizenUser()) {
            Test.startTest();
            SSP_AuthRepAccessRequestCtrl.loadAuthRepDetails();
            List<SSP_Notifications__c> lstNotifications = [select Id from SSP_Notifications__c];
            String sNotificationDetails='{"notificationId": "'+lstNotifications[0].Id+'"}';
            SSP_AuthRepAccessRequestCtrl.showClientProgramPermission(sNotificationDetails);
            
            String sClientDetails= '{"firstName":"Amit","middleName":"","lastName":"Shah","suffix":"","gender":"M","birthDate":"2001-03-05","ssn":"","applicationNumber":""}';
            SSP_AuthRepAccessRequestCtrl.searchClientMCIService(sClientDetails);
            Test.stopTest();
        }
    }
    @isTest
    public static void authRepAccessRequestMethod3() {
        SSP_MCIForBenefitMockClass mockclass= new SSP_MCIForBenefitMockClass();
        mockclass.isNoMatch=true;
        Test.setMock(WebServiceMock.class, mockclass); 
        System.runAs(fetchCitizenUser()) {
            Test.startTest();
            SSP_AuthRepAccessRequestCtrl.loadAuthRepDetails();
            List<SSP_Notifications__c> lstNotifications = [select Id from SSP_Notifications__c];
            String sNotificationDetails='{"notificationId": "'+lstNotifications[0].Id+'"}';
            SSP_AuthRepAccessRequestCtrl.showClientProgramPermission(sNotificationDetails);
            
            String sClientDetails= '{"firstName":"Amit","middleName":"","lastName":"Shah","suffix":"","gender":"M","birthDate":"2001-03-05","ssn":"","applicationNumber":""}';
            SSP_AuthRepAccessRequestCtrl.searchClientMCIService(sClientDetails);
            Test.stopTest();
        }
    }
    
    @istest
    
    public static void getApplicationBasedOnIndividualIdtest()
    {
        
        Test.startTest();
        createData();
       
        SSP_AuthRepAccessRequestService.getApplicationBasedOnIndividualId('1250002321','sApplicationNumber');
        Test.stopTest();
    }
    
    @isTest
    public static void requestAccesstest()
    {
         createData();
        
        Map<String,Object> mp= new Map<String,Object>();
        Contact con= [Select id,IndividualId__c from Contact where IndividualId__c='1250002321' Limit 1];
       AccountContactRelation acr= [select Id,AccountId,ContactId from AccountContactRelation where ContactId=:con.Id Limit 1];
        Map<String,Object> mp1= new Map<String,Object>();
        
        mp.put('sourceIndividualId','1250002321');
        mp1.put('accountContactRelation',JSON.serialize(acr));
        mp.put('accountContactRelation',mp1);
        mp.put('caseNumber','100011699');
        string sRequestAccessDetails=JSON.serialize(mp);
       System.runAs(fetchCitizenUser()) { 
           SSP_AuthRepAccessRequestService.requestAccess(sRequestAccessDetails);
           String sRequestAccessDetails1 = '{"accountContactRelation": {"RepresentativeRelationshipCode__c": "EX","programPermission": {"PermissionLevel_Medicaid__c": "ST","PermissionLevel_KTAP__c":"ST","PermissionLevel_SNAP__c":"ST"},"addressDetails":{"Street__c":"teststreet","AddressLine2__c":"testaddreline2","City__c":"testcity","CountyCode__c":"001","SSP_State__c":"AL","Zipcode4__c":"6546","Zipcode5__c":"32232"}},"sourceIndividualId": "999036538","caseNumber": "123","applicationNumber": "","loginUserDetails":[{"Id": "005r00000040JkUAAU","ContactId": "003r000000LyPdRAAV","Contact": {"FirstName": "Dail","LastName": "Worker","Id": "003r000000LyPdRAAV"}}],"reverseSSPDCResponse": {"CaseInfo":[{"ProgramCode":"MA","CaseNumber":"123","LastUpdatedDate":"2001-10-10"},{"ProgramCode":"KT","CaseNumber":"1234","LastUpdatedDate":"2001-10-11"}]},"applicationResponse": []}';

           SSP_AuthRepAccessRequestService.requestAccess(sRequestAccessDetails1);
           String sRequestAccessDetails2 = '{"accountContactRelation": {"RepresentativeRelationshipCode__c": "EX","programPermission": {"PermissionLevel_Medicaid__c": "ST","PermissionLevel_KTAP__c":"ST","PermissionLevel_SNAP__c":"ST"},"addressDetails":{"Street__c":"teststreet","AddressLine2__c":"testaddreline2","City__c":"testcity","CountyCode__c":"001","SSP_State__c":"AL","Zipcode4__c":"6546","Zipcode5__c":"32232"}},"sourceIndividualId": "999036538","caseNumber": "123","applicationNumber": "","loginUserDetails":[{"Id": "005r00000040JkUAAU","ContactId": "003r000000LyPdRAAV","Contact": {"FirstName": "Dail","LastName": "Worker","Id": "003r000000LyPdRAAV"}}],"reverseSSPDCResponse": {"CaseInfo":[{"ProgramCode":"MA","CaseNumber":"321","LastUpdatedDate":"2001-10-10"}]},"applicationResponse": []}';

           SSP_AuthRepAccessRequestService.requestAccess(sRequestAccessDetails2);

           String sRequestAccessDetails3 = '{"accountContactRelation": {"RepresentativeRelationshipCode__c": "EX","programPermission": {"PermissionLevel_KTAP__c":"ST","PermissionLevel_SNAP__c":"ST"},"addressDetails":{"Street__c":"teststreet","AddressLine2__c":"testaddreline2","City__c":"testcity","CountyCode__c":"001","SSP_State__c":"AL","Zipcode4__c":"6546","Zipcode5__c":"32232"}},"sourceIndividualId": "999036538","caseNumber": "123","applicationNumber": "","loginUserDetails":[{"Id": "005r00000040JkUAAU","ContactId": "003r000000LyPdRAAV","Contact": {"FirstName": "Dail","LastName": "Worker","Id": "003r000000LyPdRAAV"}}],"reverseSSPDCResponse": {"CaseInfo":[{"ProgramCode":"MA","CaseNumber":"123","LastUpdatedDate":"2001-10-10"}]},"applicationResponse": []}';

           SSP_AuthRepAccessRequestService.requestAccess(sRequestAccessDetails3);
      }
    }
    
     @isTest
    private static void createData(){
         UserRole portalRole = [Select Id From UserRole Where PortalType = 'None' Limit 1];
    system.debug('portalRole is ' + portalRole);
    
    Profile profile = [Select Id from Profile where name = 'System Administrator'];
    User portalUserCreator = new User(
        UserRoleId          =   portalRole.Id,
        ProfileId           =   profile.Id,
        Username            =   System.now().millisecond() + Math.random() + 'test2@test.com',
        Alias               =   'batman',
        Email               =   'ronald.stewart@mailinators.com',
        EmailEncodingKey    =   'UTF-8',
        Firstname           =   'Bruce',
        Lastname            =   'Wayne',
        LanguageLocaleKey   =   'en_US',
        LocaleSidKey        =   'en_US',
        TimeZoneSidKey      =   'America/Chicago'
    );
    Database.insert(portalUserCreator);
    
    System.runAs ( portalUserCreator ) {
        //Create account
        Account portalUserAccount = new Account(
            Name = 'Portal Account',
            OwnerId = portalUserCreator.Id
            
        );
        Database.insert(portalUserAccount);
        //String individualId=SSP_Utility.getIndividualId();
        //Create contact
        Contact contactForPortalUser = new Contact(
            FirstName = 'Test',
            Lastname = 'McTesty',
            AccountId = portalUserAccount.Id,
            Email = System.now().millisecond() + 'test@test.com',
            IndividualId__c = '1250002321',//'1250002321',
            MemberType__c='HOH',
            CacheBenefitMedicaidEBTData__c='[{"ShowMedicard":true,"ShowEBT":true,"IndividualName":"GLOT TEST","IndividualId":"1250002321","CaseNumber":"100011699"}]'
        );
        Database.insert(contactForPortalUser);
        
        
        //Create SSP Member
        SSP_Member__c objMem = new SSP_Member__c(
            Contact__c = contactForPortalUser.Id,
            FirstName__c='Test',
            LastName__c = 'McTesty'
            
                    );
        Database.insert(objMem);
//Create SSP Application 
        SSP_Application__c SSPApp = new SSP_Application__c(
            Contact__c = contactForPortalUser.Id,
            Account__c = portalUserAccount.Id,
            Status__c = 'P',
            ProgramsApplied__c ='MA;KT;CC;SN;SS;KP'
        );
        Database.insert(SSPApp);
        
            SSP_Application__c SSPAppUn = new SSP_Application__c(
            Contact__c = contactForPortalUser.Id,
            Account__c = portalUserAccount.Id,
            Status__c = 'UN',
            RecordTypeId=SSP_Utility.getRecrodTypeIdBySobjectAndDevName('SSP_Application__c','Case'),
            LocalDCBSOffice__c = 'Kentucky',
            ProgramsApplied__c ='MA;KT;CC;SN;SS;KP',
            //DCCaseNumber__c = 890,
            RAC_Selections__c='CIS_CareTaker',
            ApplicationCreationInSSP__c = system.today()
        );
        Database.insert(SSPAppUn);
        
        SSP_Application__c SSPAppNcase = new SSP_Application__c(
            Contact__c = contactForPortalUser.Id,
            Account__c = portalUserAccount.Id,
            Status__c = 'UN'
        );
        Database.insert(SSPAppNcase);
        
            SSP_Application__c SSPAppNull = new SSP_Application__c(
            Contact__c = contactForPortalUser.Id,
            Account__c = portalUserAccount.Id
        );
        Database.insert(SSPAppNull);
        
        SSP_ApplicationIndividual__c SSPAppInd = new SSP_ApplicationIndividual__c(
            SSP_Application__c = SSPApp.Id,
            SSP_Member__c= ObjMem.Id,
            IsHeadOfHousehold__c = false
        );
        Database.insert(SSPAppInd);
                    
        SSP_ApplicationIndividual__c SSPAppIndUn = new SSP_ApplicationIndividual__c(
        SSP_Application__c = SSPAppUn.Id,
        SSP_Member__c= ObjMem.Id,
        IsHeadOfHousehold__c = true
        );
        Database.insert(SSPAppIndUn);
        
        SSP_ApplicationIndividual__c SSPAppNcaseIn = new SSP_ApplicationIndividual__c(
        SSP_Application__c = SSPAppNcase.Id,
        SSP_Member__c= ObjMem.Id,
        IsHeadOfHousehold__c = true
        );
        Database.insert(SSPAppNcaseIn);

        
        //Create Portal user
        Profile portalProfile = [SELECT Id FROM Profile WHERE Name=:'RE Citizen Profile' Limit 1];
        User portalUser = new User(
            Username = System.now().millisecond() + 'test12345@test.com',
            ContactId = contactForPortalUser.Id,
            ProfileId = portalProfile.Id,
            Alias = 'test123',
            Email = 'test12345@test.com',
            EmailEncodingKey = 'UTF-8',
            LastName = 'McTesty',
            CommunityNickname = 'batman905',
            TimeZoneSidKey = 'America/Los_Angeles',
            LocaleSidKey = 'en_US',
            LanguageLocaleKey = 'en_US'
        );
        Database.insert(portalUser);
        
        SSP_Office__c sspo=new SSP_Office__c();
    sspo.Name='Testing address';
    sspo.DCOfficeId__c=1001;
    sspo.PhysicalAddressLine1__c='1 street';
    sspo.PhysicalCity__c='Frankfort';
    Database.insert(sspo);
    }

    

}
    
}