/***************************************************************************************************************************
*   Type         :   Test Class
*   Name         :   SSP_HouseholdMembersSummaryCtrlTest
*   Created By   :   Suyash Singhal
*   Created Date :   11/13/2019
*   Description  : 
*  
*   Modification Log
*   --------------------------------------------------------------------------------------
*   * Developer                   Date          Description
*   * ------------------------------------------------------------------------------------                 
*     Suyash                    11/13/2019        Initial Version
*****************************************************************************************************************************/


@isTest(seeAllData=false)
public with sharing class SSP_HouseholdMembersSummaryCtrlTest {

    /**
    @author : Suyash Singhal
    Method to setup test data*/
    
    
    @testSetup static void setup() { 
         Id RecordTypeIdRelation = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('SSP_Relationship__c','Relationship');
        insert new LOG_LogMessageSettings__c(
            Name = RE_GlobalConstants.LOGS_DEFAULT_AUTOGENERATED,
            LOG_Debug__c = true,
            LOG_Error__c= true,
            LOG_Info__c = true,
            LOG_Warning__c = true,
            LOG_Log_Purge__c = 365
        );
        SSP_TestDataFactory.setupTestData();     
        List<Account> lstAcc = SSP_TestDataFactory.createAccounts(2, false);
        lstAcc[0].Name = 'IncomeController';
        lstAcc[1].Name = 'NewAccountController';
        insert lstAcc;
        
        List<Contact> lstCon = [SELECT Id, FirstName, LastName FROM Contact WHERE FirstName = 'Citizen' AND LastName = 'User' LIMIT 1];//= SSP_TestDataFactory.createContacts(1, false); 
        lstCon[0].IndividualId__c='919216847';
        update lstCon;
        
        AccountContactRelation acr = new AccountContactRelation(); 
        acr.Accountid = lstAcc[0].Id;
        acr.Contactid = lstCon[0].Id;
        acr.IsActive = true;
        acr.DCContactId__c=366;
        insert acr;

        List<SSP_Application__c> lstAppln = SSP_TestDataFactory.createSSPApplications(2, false);
        lstAppln[0].Account__c=lstAcc[0].Id;        
        lstAppln[0].Contact__c = lstCon[0].Id;
        lstAppln[0].ProgramsApplied__c = 'MA;KT;SN';
        lstAppln[1].Account__c=lstAcc[1].Id;        
        lstAppln[1].Contact__c = lstCon[0].Id;
        lstAppln[1].ProgramsApplied__c = 'MA;KT;SN';
        lstAppln[1].DCCaseNumber__c = 123456;
        insert lstAppln;
                
        List<SSP_Member__c> lstMem = SSP_TestDataFactory.createSSPMembers(2, false);
        lstMem[0].contact__c=lstCon[0].Id;
        lstMem[0].firstName__c='FirstName';
        lstMem[0].lastName__c='LastName'    ;
        lstMem[0].GenderCode__c='M';
        lstMem[0].BirthDate__c=system.today();
        lstMem[0].IndividualId__c='919216847';
        lstMem[0].Alias_First_Name__c='testalias';
        lstMem[0].Alias_Last_Name__c='testaliaslast';
        lstMem[0].DeathDate__c=system.today();
        lstMem[0].SuffixCode__c= 'JR';
        lstMem[0].SSN__c= '123344';
        lstMem[0].NoReasonSSNCode__c= 'AL';
        lstMem[1].contact__c=lstCon[0].Id;
        insert lstMem;
        
        List<SSP_ApplicationIndividual__c> lstAppInd = SSP_TestDataFactory.createApplicationIndividuals(2, false); 
        lstAppInd[0].SSP_Application__c=lstAppln[0].Id;
        lstAppInd[0].IsHeadOfHousehold__c =true;
        lstAppInd[0].SSP_Member__c=lstMem[0].Id;
        lstAppInd[0].MemberProgramsApplied__c='SN;MA;KT';
        lstAppInd[0].IsActiveIEESCasePresent__c=true;
        lstAppInd[1].SSP_Application__c=lstAppln[0].Id;
        lstAppInd[1].SSP_Member__c=lstMem[1].Id;
        lstAppInd[1].IsHeadOfHousehold__c=false;
        insert lstAppInd;   
        
        SSP_Relationship__c relation = new SSP_Relationship__c();
        relation.Name = 'Test Relation';
        relation.SSP_Member__c = lstMem[0].Id;
        relation.SSP_MemberRelatedTo__c = lstMem[1].Id;
        relation.RecordTypeId = RecordTypeIdRelation;
        relation.RelationshipType__c = 'MO';
        insert relation;
        
      
        
    }

  
     @isTest
    public static void getHouseholdDetailTest2(){ // cover else block
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        System.runAs(citizen){
            
            List<SSP_Application__c> lstApps = [SELECT Id  FROM SSP_Application__c LIMIT 2];
            List<SSP_ApplicationIndividual__c> appIndvList = [SELECT Id, SSP_Member__c, SSP_Application__c FROM SSP_ApplicationIndividual__c WHERE SSP_Application__c =: lstApps[0].Id] ;
            List<SSP_Member__c> lstMembers =  [SELECT Id FROM SSP_Member__c LIMIT 50];   
            delete appIndvList;
            test.startTest();
            SSP_LightningResponse response = SSP_HouseholdMembersSummaryCtrl.getHouseholdDetails(String.valueOf(lstApps[0].Id), false,'intake');
            SSP_LightningResponse response2 = SSP_HouseholdMembersSummaryCtrl.getHouseholdDetails(lstApps[0].id, false,'addRemoveMember'); 
            system.assertNotEquals(null, response.mapResponse);
                                  
        test.stopTest();
        }
        
    }

   
   @isTest
    public static void ExceptionsTest(){
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        System.runAs(citizen){
            
            List<SSP_Application__c> lstApps = [SELECT Id  FROM SSP_Application__c LIMIT 1];
            List<SSP_ApplicationIndividual__c> appIndvList = [SELECT Id, SSP_Member__c, SSP_Application__c FROM SSP_ApplicationIndividual__c WHERE SSP_Application__c =: lstApps[0].Id] ;
            List<SSP_Member__c> lstMembers =  [SELECT Id FROM SSP_Member__c LIMIT 50];
            
            
            test.startTest();
            SSP_LightningResponse response = SSP_HouseholdMembersSummaryCtrl.getHouseholdDetails(lstApps[0].id, false,'intake');
            SSP_HouseHoldSummaryService.buildWrapperObject(lstMembers[0],appIndvList[0],lstApps,false);
            
           // system.assertNotEquals(null, response.mapResponse);
            //system.assert(response.mapResponse.containsKey('applicationIndividuals'));                        
        test.stopTest();
        }
        
    }
    
   @isTest
    public static void buildProgramsAPIValueStringTest(){        
      test.startTest();
         String programList = 'Medicaid/KCHIP;KTAP (Cash Assistance);DSNAP';   
        SSP_HouseHoldSummaryService.buildProgramsAPIValueString(programList);
       test.stopTest(); 
    }

     @isTest
    public static void removeProgramsTest(){
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        System.runAs(citizen){
            
            List<SSP_Application__c> lstApps = [SELECT Id,ProgramsApplied__c  FROM SSP_Application__c LIMIT 1];
            lstApps[0].ProgramsApplied__c = 'MA;KT;SN';
            update lstApps;

            String sUnAssignedProgrs = '["SNAP (Food Assistance)"]';
            
            test.startTest();
            SSP_LightningResponse response = SSP_HouseholdMembersSummaryCtrl.removeUnassignedProgramsOnAPP(String.valueOf(lstApps[0].Id),sUnAssignedProgrs);
            system.assertNotEquals(null, response.mapResponse);
            //system.assert(response.mapResponse.containsKey('applicationIndividuals'));                        
        test.stopTest();
        }
        
    }
    
     @isTest
    public static void removeProgramsTest2(){
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        System.runAs(citizen){
            
            List<SSP_Application__c> lstApps = [SELECT Id,ProgramsApplied__c  FROM SSP_Application__c LIMIT 1];
            lstApps[0].ProgramsApplied__c = 'MA;KT';
            update lstApps;

            String sUnAssignedProgrs = '["SNAP (Food Assistance)"]';
            
            test.startTest();
            SSP_LightningResponse response = SSP_HouseholdMembersSummaryCtrl.removeUnassignedProgramsOnAPP(String.valueOf('12345'),sUnAssignedProgrs);
            system.assertNotEquals(null, response.mapResponse);
            //system.assert(response.mapResponse.containsKey('applicationIndividuals'));                        
        test.stopTest();
        }
        
    }

    @isTest
    public static void deleteMemberTestmethod(){
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        List<SSP_Application__c> lstApps = [SELECT Id  FROM SSP_Application__c LIMIT 1];
        List<SSP_ApplicationIndividual__c> appIndvList = [SELECT Id, SSP_Member__c, SSP_Application__c,SSP_Member__r.IndividualID__c,IsActiveIEESCasePresent__c FROM SSP_ApplicationIndividual__c WHERE SSP_Application__c =: lstApps[0].Id] ;
        List<SSP_Member__c> lstMembers =  [SELECT Id FROM SSP_Member__c LIMIT 50];
        appIndvList[0].IsActiveIEESCasePresent__c=true;
        appIndvList[0].SSP_Member__r.IndividualID__c='919216847';
        upsert appIndvList[0];
        System.runAs(citizen){ 
            SSP_LightningResponse result = SSP_HouseholdMembersSummaryCtrl.deleteMember(String.valueof(lstMembers[0].id),String.valueOf(appIndvList[0].id), 'intake');    
            SSP_LightningResponse result2 = SSP_HouseholdMembersSummaryCtrl.deleteMember(null,null, 'intake'); 
        }
       }
    
     @isTest
    public static void deleteMember_AddRemoveMember(){
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        List<SSP_Application__c> lstApps = [SELECT Id  FROM SSP_Application__c LIMIT 1];
        List<SSP_ApplicationIndividual__c> appIndvList = [SELECT Id, SSP_Member__c, SSP_Application__c,SSP_Member__r.IndividualID__c,IsActiveIEESCasePresent__c FROM SSP_ApplicationIndividual__c WHERE SSP_Application__c =: lstApps[0].Id] ;
        List<SSP_Member__c> lstMembers =  [SELECT Id FROM SSP_Member__c LIMIT 50];
        appIndvList[0].IsActiveIEESCasePresent__c=true;
        appIndvList[0].SSP_Member__r.IndividualID__c='919216847';
        upsert appIndvList[0];
        System.runAs(citizen){ 
            SSP_LightningResponse result = SSP_HouseholdMembersSummaryCtrl.deleteMember(String.valueof(lstMembers[0].id),String.valueOf(appIndvList[0].id), 'addRemoveMember');    
            SSP_LightningResponse result2 = SSP_HouseholdMembersSummaryCtrl.deleteMember(null,null, 'addRemoveMember'); 
        }
           }
    
     @isTest
    public static void deleteMemberTestmethod2(){
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        System.runAs(citizen){
            
            List<SSP_Application__c> lstApps = [SELECT Id  FROM SSP_Application__c LIMIT 1];
            List<SSP_ApplicationIndividual__c> appIndvList = [SELECT Id, SSP_Member__c, SSP_Application__c,SSP_Member__r.IndividualID__c,IsActiveIEESCasePresent__c FROM SSP_ApplicationIndividual__c WHERE SSP_Application__c =: lstApps[0].Id] ;
            List<SSP_Member__c> lstMembers =  [SELECT Id FROM SSP_Member__c LIMIT 50];
            appIndvList[0].IsActiveIEESCasePresent__c=true;
            appIndvList[0].SSP_Member__r.IndividualID__c='919216847';
            upsert appIndvList[0];
            SSP_LightningResponse result = SSP_HouseholdMembersSummaryCtrl.deleteMember(String.valueof(lstMembers[0].id),String.valueOf(appIndvList[0].id), 'intake');  
            SSP_LightningResponse result2 = SSP_HouseholdMembersSummaryCtrl.deleteMember(null,null, 'intake');  
        }        
    }

    @isTest
    public static void saveData_ApplicationBlockedCase(){
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        System.runAs(citizen){
            
            List<SSP_Application__c> lstApps = [SELECT Id,ProgramsApplied__c,SectionStatus__c,Name,DCCaseNumber__c  FROM SSP_Application__c LIMIT 1];
            List<SSP_ApplicationIndividual__c> appIndvList = [SELECT Id, ProgramsApplied__c,MemberProgramsApplied__c,SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c,isHOHDetailsCompleted__c,IsRACSNAPMealsRuleTriggered__c,MemberStatus__c,MedicaidType__c FROM SSP_ApplicationIndividual__c WHERE SSP_Application__c =: lstApps[0].Id] ;
            List<SSP_Member__c> lstMembers =  [Select id,Name,BirthDate__c,FirstName__c,Age__c, MiddleInitial__c,LastName__c,SSN__c,GenderCode__c,NoReasonSSNCode__c,IsUSCitizenToggle__c,IsIntendToResideToggle__c,IsMilitaryMemberToggle__c,RaceCode__c,SuffixCode__c,IsHispanicLatinoSpanishToggle__c,EthnicityCode__c,DeathDate__c,NationalityCode__c,SpecialNeedIndicatorToggle__c,IsFileCleared__c,IsUSCitizenValidated__c,SSNVerified__c,TaxFilerStatusCurrentYear__c,TaxFilerStatusNextYear__c,MailingAddressLine1__c,PhysicalAddressLine1__c,IsBlindToggle__c,IsDisabledToggle__c,IsDateOfDeathValidated__c,IndividualId__c,SameAddressInfoAsHOHToggle__c FROM SSP_Member__c LIMIT 50];

        lstApps[0].ProgramsApplied__c ='SN';
            
        update lstApps;
        appIndvList[0].ProgramsApplied__c = 'SN';
        appIndvList[0].IsActiveIEESCasePresent__c=true;   
        appIndvList[0].BlockedCaseNumber__c='2345678';  
        appIndvList[0].isApplicationBlocked__c=true;    
        update appIndvList;
            
            lstMembers[0].IsFileCleared__c=true;
            lstMembers[0].SSNVerified__c=false;
            lstMembers[0].Firstname__c='mock1';
            lstMembers[0].LastName__c='NoMatch';
            lstMembers[0].GenderCode__c='M';
            lstMembers[0].BirthDate__C=system.today();
         update lstMembers;   
            
            
            SSP_HouseholdMembersSummaryCtrl.MemberDetailsWrapper response = SSP_HouseHoldSummaryService.buildWrapperObject(lstMembers[0],appIndvList[0],lstApps , false);
            response.sName = 'Test 1 Name';
            response.sFirstName = 'mock';
            response.sLastName = 'NoMatch';
            response.sGender = 'M';
            response.sRace = 'IN';
            response.sSufficeCode = 'JR';
            response.sEthnicityCode = 'CU';
            response.sGender = 'M';
            response.sGender = 'M';
            response.bisUSCitizen ='Y';
            response.sAppIndividualId = appIndvList[0].Id;
            response.bisHOH = true;
            response.bSSNVerified = false;
            response.bSSNPresent ='N';
            response.bServedInUSMilitary ='Y';
            response.bKentuckyResident ='Y';
            response.sSpecialNeedIndicator ='Y';
            response.bisHispanicLatino ='N';
            response.sProgramsRequested = 'SNAP (Food Assistance)'; 
            response.sRecordId = lstMembers[0].id;
            response.dDOB = system.today();
            response.sApplicationId=  lstApps[0].Id;
                        response.mciCallCount = 1;
            response.sSSN = null;
            response.memberIndividualId='919216847';
            response.sHOHMCIId = '919216847';
            
            response.sSufficeCode = 'JR';
            lstMembers[0].SSNVerified__c= false;
            update lstmembers;

            Cache.SessionPartition sessionPart = Cache.Session.getPartition(SSP_GlobalConstants.CACHE_PARTITION_NAME);  
            sessionPart.put('finalProgramList',new List<String>{'SNAP (Food Assistance)'});
            sessionPart.put('programRemoved',new List<String>{'Retirement'});
            SSP_LightningResponse result5 = SSP_HouseholdMembersSummaryCtrl.saveData(JSON.serialize(response), false , false, false);

            Test.setMock(HttpCalloutMock.class, new SSP_MCIMockService('NoMatch'));  
            test.startTest();
            
            response.sRecordId = null;
            SSP_LightningResponse result3 = SSP_HouseholdMembersSummaryCtrl.saveData(JSON.serialize(response), false , false, false);             
            test.stopTest();
            
            SSP_LightningResponse result6 = SSP_HouseholdMembersSummaryCtrl.saveData(JSON.serialize(response), false , true, true);
            response.sApplicationId=  'uiu*uuyuy';
            SSP_LightningResponse result7 = SSP_HouseholdMembersSummaryCtrl.saveData(JSON.serialize(response), false , true, true);
            
            
        }
    }
    
    @isTest
    public static void saveDatatestErrorCode(){
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        System.runAs(citizen){
            
            List<SSP_Application__c> lstApps = [SELECT Id,ProgramsApplied__c,SectionStatus__c,Name,DCCaseNumber__c  FROM SSP_Application__c LIMIT 1];
            List<SSP_ApplicationIndividual__c> appIndvList = [SELECT Id, ProgramsApplied__c,MemberProgramsApplied__c,SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c,isHOHDetailsCompleted__c,IsRACSNAPMealsRuleTriggered__c,MemberStatus__c,MedicaidType__c FROM SSP_ApplicationIndividual__c WHERE SSP_Application__c =: lstApps[0].Id] ;
            List<SSP_Member__c> lstMembers =  [Select id,Name,BirthDate__c,FirstName__c,Age__c, MiddleInitial__c,LastName__c,SSN__c,GenderCode__c,NoReasonSSNCode__c,IsUSCitizenToggle__c,IsIntendToResideToggle__c,IsMilitaryMemberToggle__c,RaceCode__c,SuffixCode__c,IsHispanicLatinoSpanishToggle__c,EthnicityCode__c,DeathDate__c,NationalityCode__c,SpecialNeedIndicatorToggle__c,IsFileCleared__c,IsUSCitizenValidated__c,SSNVerified__c,TaxFilerStatusCurrentYear__c,TaxFilerStatusNextYear__c,MailingAddressLine1__c,PhysicalAddressLine1__c,IsBlindToggle__c,IsDisabledToggle__c,IsDateOfDeathValidated__c,IndividualId__c,SameAddressInfoAsHOHToggle__c FROM SSP_Member__c LIMIT 50];

        lstApps[0].ProgramsApplied__c ='SN';
            
        update lstApps;
        appIndvList[0].ProgramsApplied__c = 'SN';
        appIndvList[0].IsActiveIEESCasePresent__c=true;   
        appIndvList[0].BlockedCaseNumber__c='2345678';  
        appIndvList[0].isApplicationBlocked__c=true;    
        update appIndvList;
            
            lstMembers[0].IsFileCleared__c=false;
            lstMembers[0].SSNVerified__c=true;
            lstMembers[0].Firstname__c='mock';
            lstMembers[0].LastName__c='ErrorCode';
            lstMembers[0].GenderCode__c='M';
            lstMembers[0].BirthDate__C=system.today();
         update lstMembers;   
            
      
            
            SSP_HouseholdMembersSummaryCtrl.MemberDetailsWrapper response = SSP_HouseHoldSummaryService.buildWrapperObject(lstMembers[0],appIndvList[0],lstApps , false);
            response.sName = 'Test 1 Name';
            response.sFirstName = 'mock';
            response.sLastName = 'ErrorCode';
            response.sGender = 'M';
            response.sRace = 'IN';
            response.sSufficeCode = 'JR';
            response.sEthnicityCode = 'CU';
            response.sGender = 'M';
            response.sGender = 'M';
            response.bisUSCitizen ='Y';
            response.sAppIndividualId = appIndvList[0].Id;
            response.bisHOH = true;
            response.bSSNVerified = false;
            response.bSSNPresent ='N';
            response.bServedInUSMilitary ='Y';
            response.bKentuckyResident ='Y';
            response.sSpecialNeedIndicator ='Y';
            response.bisHispanicLatino ='N';
            response.sProgramsRequested = 'SNAP (Food Assistance)'; 
            response.sRecordId = lstMembers[0].id;
            response.dDOB = system.today();
            response.sApplicationId=  lstApps[0].Id;
                        response.mciCallCount = 1;
            response.sSSN = '1223445345';
            response.memberIndividualId='919216847';
            response.sHOHMCIId = '919216847';
            
            response.sSufficeCode = 'JR';
            lstMembers[0].SSNVerified__c= false;
            update lstmembers;
                        Test.setMock(HttpCalloutMock.class, new SSP_MCIMockService('ErrorCode'));  
            test.startTest();
            SSP_LightningResponse result5 = SSP_HouseholdMembersSummaryCtrl.saveData(JSON.serialize(response), false , false, false);             
            
        test.stopTest();
        }
    }
    
     @isTest
    public static void saveData_FileClearedMember(){
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        System.runAs(citizen){
            
            List<SSP_Application__c> lstApps = [SELECT Id,ProgramsApplied__c,SectionStatus__c,Name,DCCaseNumber__c  FROM SSP_Application__c LIMIT 1];
            List<SSP_ApplicationIndividual__c> appIndvList = [SELECT Id, ProgramsApplied__c,MemberProgramsApplied__c,SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c,isHOHDetailsCompleted__c,IsRACSNAPMealsRuleTriggered__c,MemberStatus__c,MedicaidType__c FROM SSP_ApplicationIndividual__c WHERE SSP_Application__c =: lstApps[0].Id] ;
            List<SSP_Member__c> lstMembers =  [Select id,Name,BirthDate__c,FirstName__c,Age__c, MiddleInitial__c,LastName__c,SSN__c,GenderCode__c,NoReasonSSNCode__c,IsUSCitizenToggle__c,IsIntendToResideToggle__c,IsMilitaryMemberToggle__c,RaceCode__c,SuffixCode__c,IsHispanicLatinoSpanishToggle__c,EthnicityCode__c,DeathDate__c,NationalityCode__c,SpecialNeedIndicatorToggle__c,IsFileCleared__c,IsUSCitizenValidated__c,SSNVerified__c,TaxFilerStatusCurrentYear__c,TaxFilerStatusNextYear__c,MailingAddressLine1__c,PhysicalAddressLine1__c,IsBlindToggle__c,IsDisabledToggle__c,IsDateOfDeathValidated__c,IndividualId__c,SameAddressInfoAsHOHToggle__c FROM SSP_Member__c LIMIT 50];
            
            lstApps[0].ProgramsApplied__c ='SN';            
            update lstApps;
            appIndvList[0].ProgramsApplied__c = 'SN';
            update appIndvList;
            
            lstMembers[0].IsFileCleared__c=true;
            lstMembers[0].SSNVerified__c=true;
            lstMembers[0].Firstname__c='mock';
            lstMembers[0].LastName__c='ErrorCode';
            lstMembers[0].GenderCode__c='M';
            lstMembers[0].BirthDate__C=system.today();
            lstMembers[0].SSN__c = null;
            
            update lstMembers;             
      
            
            SSP_HouseholdMembersSummaryCtrl.MemberDetailsWrapper response = SSP_HouseHoldSummaryService.buildWrapperObject(lstMembers[0],appIndvList[0],lstApps , false);
            response.sName = 'Test 1 Name';
            response.sFirstName = 'mock';
            response.sLastName = 'ErrorCode';
            response.sGender = 'M';
            response.sRace = 'IN';
            response.sSufficeCode = 'JR';
            response.sEthnicityCode = 'CU';
            response.sGender = 'M';
            response.sGender = 'M';
            response.bisUSCitizen ='Y';
            response.sAppIndividualId = appIndvList[0].Id;
            response.bisHOH = true;
            response.bSSNVerified = false;
            response.bSSNPresent ='N';
            response.bServedInUSMilitary ='Y';
            response.bKentuckyResident ='Y';
            response.sSpecialNeedIndicator ='Y';
            response.bisHispanicLatino ='N';
            response.sProgramsRequested = 'SNAP (Food Assistance)'; 
            response.sRecordId = lstMembers[0].id;
            response.dDOB = system.today();
            response.sApplicationId=  lstApps[0].Id;
                        response.mciCallCount = 1;
            response.sSSN = '786787657';
            response.memberIndividualId='919216847';
            response.sHOHMCIId = '919216847';
            
            response.sSufficeCode = 'JR';
            lstMembers[0].SSNVerified__c= false;
            update lstmembers;
            
            Test.setMock(HttpCalloutMock.class, new SSP_MCIMockService('FileClearedMember'));  
            test.startTest();
            SSP_LightningResponse result5 = SSP_HouseholdMembersSummaryCtrl.saveData(JSON.serialize(response), false , false, false);            
            
        test.stopTest();
        }
    }
    
    
    
    
        @isTest
    public static void saveDataNoMembers(){
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        
        List<SSP_Application__c> lstApps = [SELECT Id,ProgramsApplied__c,SectionStatus__c,Name,DCCaseNumber__c  FROM SSP_Application__c LIMIT 1];
        List<SSP_ApplicationIndividual__c> appIndvList = [SELECT Id, ProgramsApplied__c,MemberProgramsApplied__c,SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c,isHOHDetailsCompleted__c,IsRACSNAPMealsRuleTriggered__c,MemberStatus__c,MedicaidType__c FROM SSP_ApplicationIndividual__c WHERE SSP_Application__c =: lstApps[0].Id] ;
        List<SSP_Member__c> lstMembers =  [Select id,Name,BirthDate__c,FirstName__c,Age__c, MiddleInitial__c,LastName__c,SSN__c,GenderCode__c,NoReasonSSNCode__c,IsUSCitizenToggle__c,IsIntendToResideToggle__c,IsMilitaryMemberToggle__c,RaceCode__c,SuffixCode__c,IsHispanicLatinoSpanishToggle__c,EthnicityCode__c,DeathDate__c,NationalityCode__c,SpecialNeedIndicatorToggle__c,IsFileCleared__c,IsUSCitizenValidated__c,SSNVerified__c,TaxFilerStatusCurrentYear__c,TaxFilerStatusNextYear__c,MailingAddressLine1__c,PhysicalAddressLine1__c,IsBlindToggle__c,IsDisabledToggle__c,IsDateOfDeathValidated__c,IndividualId__c,SameAddressInfoAsHOHToggle__c FROM SSP_Member__c LIMIT 50];
        User objNonCitizenUser = SSP_TestDataFactory.setUpNonCitizenUser();
        lstApps[0].ProgramsApplied__c ='SN';
            
        update lstApps;
        appIndvList[0].ProgramsApplied__c = 'SN';
        appIndvList[0].IsActiveIEESCasePresent__c=true;   
        appIndvList[0].BlockedCaseNumber__c='2345678';  
        appIndvList[0].isApplicationBlocked__c=true;    
        update appIndvList;
        
        lstMembers[0].IsFileCleared__c=true;
        lstMembers[0].SSNVerified__c=false;
        update lstMembers;   
        System.runAs(citizen){

        test.startTest();
            
            SSP_HouseholdMembersSummaryCtrl.MemberDetailsWrapper response = SSP_HouseHoldSummaryService.buildWrapperObject(lstMembers[0],appIndvList[0],lstApps , false);
            response.sName = 'Test 1 Name';
            response.sFirstName = 'mock';
            response.sLastName = 'NoMembers';
            response.sMiddleName = '1';
            response.sGender = 'M';
            response.sRace = 'IN';
            response.sSufficeCode = 'JR';
            response.sEthnicityCode = 'CU';
            response.sGender = 'M';
            response.bisUSCitizen ='Y';
            response.sAppIndividualId = appIndvList[0].Id;
            response.bisHOH = true;
            response.bSSNVerified = false;
            response.bSSNPresent ='N';
            response.bServedInUSMilitary ='Y';
            response.bKentuckyResident ='Y';
            response.sSpecialNeedIndicator ='Y';
            response.bisHispanicLatino ='N';
            response.sProgramsRequested = 'SNAP (Food Assistance)'; 
            response.dDOB = system.today();
            response.sApplicationId=  lstApps[0].Id;
            response.mciCallCount = 1;
            response.sSSN = '1223445345';
            response.sRecordId=null;
           
            Test.setMock(HttpCalloutMock.class, new SSP_MCIMockService('NoMembers'));  
            SSP_LightningResponse result5 = SSP_HouseholdMembersSummaryCtrl.saveData(JSON.serialize(response), false , false, false);             

        test.stopTest();
        }
    }
    @isTest
    public static void saveDataCallSSN(){
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
            
            List<SSP_Application__c> lstApps = [SELECT Id,ProgramsApplied__c,SectionStatus__c,Name,DCCaseNumber__c  FROM SSP_Application__c LIMIT 1];
            List<SSP_ApplicationIndividual__c> appIndvList = [SELECT Id, ProgramsApplied__c,MemberProgramsApplied__c,SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c,isHOHDetailsCompleted__c,IsRACSNAPMealsRuleTriggered__c,MemberStatus__c,MedicaidType__c FROM SSP_ApplicationIndividual__c WHERE SSP_Application__c =: lstApps[0].Id] ;
            List<SSP_Member__c> lstMembers =  [Select id,Name,BirthDate__c,FirstName__c,Age__c, MiddleInitial__c,LastName__c,SSN__c,GenderCode__c,NoReasonSSNCode__c,IsUSCitizenToggle__c,IsIntendToResideToggle__c,IsMilitaryMemberToggle__c,RaceCode__c,SuffixCode__c,IsHispanicLatinoSpanishToggle__c,EthnicityCode__c,DeathDate__c,NationalityCode__c,SpecialNeedIndicatorToggle__c,IsFileCleared__c,IsUSCitizenValidated__c,SSNVerified__c,TaxFilerStatusCurrentYear__c,TaxFilerStatusNextYear__c,MailingAddressLine1__c,PhysicalAddressLine1__c,IsBlindToggle__c,IsDisabledToggle__c,IsDateOfDeathValidated__c,IndividualId__c,SameAddressInfoAsHOHToggle__c FROM SSP_Member__c LIMIT 50];
        User objNonCitizenUser = SSP_TestDataFactory.setUpNonCitizenUser();
        lstApps[0].ProgramsApplied__c ='SN';
            
        update lstApps;
        appIndvList[0].ProgramsApplied__c = 'SN';
        appIndvList[0].IsActiveIEESCasePresent__c=true;   
        appIndvList[0].BlockedCaseNumber__c='2345678';  
        appIndvList[0].isApplicationBlocked__c=true;    
        update appIndvList;
            
            lstMembers[0].IsFileCleared__c=true;
            lstMembers[0].SSNVerified__c=false;
         update lstMembers;   
        System.runAs(citizen){
            SSP_HouseholdMembersSummaryCtrl.MemberDetailsWrapper response = SSP_HouseHoldSummaryService.buildWrapperObject(lstMembers[0],appIndvList[0],lstApps , false);
            response.sName = 'Test 1 Name';
            response.sFirstName = 'mock';
            response.sLastName = 'LastName';
            response.sMiddleName = '1';
            response.sGender = 'M';
            response.sRace = 'IN';
            response.sSufficeCode = 'JR';
            response.sEthnicityCode = 'CU';
            response.sGender = 'M';
            response.bisUSCitizen ='Y';
            response.sAppIndividualId = appIndvList[0].Id;
            response.bisHOH = true;
            response.bSSNVerified = false;
            response.bSSNPresent ='N';
            response.bServedInUSMilitary ='Y';
            response.bKentuckyResident ='Y';
            response.sSpecialNeedIndicator ='Y';
            response.bisHispanicLatino ='N';
            response.sProgramsRequested = 'SNAP (Food Assistance)'; 
            response.sRecordId = lstMembers[0].id;
            response.dDOB = system.today();
            response.sApplicationId=  lstApps[0].Id;
            response.mciCallCount = 1;
            response.sSSN = '1223445345';
           
            Test.setMock(HttpCalloutMock.class, new SSP_MCIMockService('LastName')); 
        Test.startTest();
            SSP_LightningResponse result5 = SSP_HouseholdMembersSummaryCtrl.saveData(JSON.serialize(response), false , false, false);             

        test.stopTest();
        }
    }
    
     @isTest
    public static void saveData_NoData(){
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];            
        List<SSP_Application__c> lstApps = [SELECT Id,ProgramsApplied__c,SectionStatus__c,Name,DCCaseNumber__c  FROM SSP_Application__c LIMIT 1];
        List<SSP_ApplicationIndividual__c> appIndvList = [SELECT Id, ProgramsApplied__c,MemberProgramsApplied__c,SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c,isHOHDetailsCompleted__c,IsRACSNAPMealsRuleTriggered__c,MemberStatus__c,MedicaidType__c FROM SSP_ApplicationIndividual__c WHERE SSP_Application__c =: lstApps[0].Id] ;
        List<SSP_Member__c> lstMembers =  [Select id,Name,BirthDate__c,FirstName__c,Age__c, MiddleInitial__c,LastName__c,SSN__c,GenderCode__c,NoReasonSSNCode__c,IsUSCitizenToggle__c,IsIntendToResideToggle__c,IsMilitaryMemberToggle__c,RaceCode__c,SuffixCode__c,IsHispanicLatinoSpanishToggle__c,EthnicityCode__c,DeathDate__c,NationalityCode__c,SpecialNeedIndicatorToggle__c,IsFileCleared__c,IsUSCitizenValidated__c,SSNVerified__c,TaxFilerStatusCurrentYear__c,TaxFilerStatusNextYear__c,MailingAddressLine1__c,PhysicalAddressLine1__c,IsBlindToggle__c,IsDisabledToggle__c,IsDateOfDeathValidated__c,IndividualId__c,SameAddressInfoAsHOHToggle__c FROM SSP_Member__c LIMIT 50];
        User objNonCitizenUser = SSP_TestDataFactory.setUpNonCitizenUser();
        lstApps[0].ProgramsApplied__c ='SN';
        
        update lstApps;
        appIndvList[0].ProgramsApplied__c = 'SN';
        appIndvList[0].IsActiveIEESCasePresent__c=true;   
        appIndvList[0].BlockedCaseNumber__c='2345678';  
        appIndvList[0].isApplicationBlocked__c=true;    
        update appIndvList;
        
        lstMembers[0].IsFileCleared__c=true;
        lstMembers[0].SSNVerified__c=false;
        update lstMembers;   
        System.runAs(citizen){      
            
            SSP_HouseholdMembersSummaryCtrl.MemberDetailsWrapper response = SSP_HouseHoldSummaryService.buildWrapperObject(lstMembers[0],appIndvList[0],lstApps , false);
            response.sName = 'Test 1 Name';
            response.sFirstName = 'mock';
            response.sLastName = 'LastName';
            response.sMiddleName = '1';
            response.sGender = 'M';
            response.sRace = 'IN';
            response.sSufficeCode = 'JR';
            response.sEthnicityCode = 'CU';
            response.sGender = 'M';
            response.bisUSCitizen ='Y';
            response.sAppIndividualId = appIndvList[0].Id;
            response.bisHOH = true;
            response.bSSNVerified = false;
            response.bSSNPresent ='N';
            response.bServedInUSMilitary ='Y';
            response.bKentuckyResident ='Y';
            response.sSpecialNeedIndicator ='Y';
            response.bisHispanicLatino ='N';
            response.sProgramsRequested = 'SNAP (Food Assistance)'; 
            response.sRecordId = lstMembers[0].id;
            response.dDOB = system.today();
            response.sApplicationId=  lstApps[0].Id;
            response.mciCallCount = 1;
            response.sSSN = '1223445345';
           
            Test.setMock(HttpCalloutMock.class, new SSP_MCIMockService('LastName'));  
            test.startTest();
            SSP_LightningResponse result5 = SSP_HouseholdMembersSummaryCtrl.saveData(JSON.serialize(response), false , false, false);           
            
            test.stopTest();
        }
    }
 @isTest
    public static void saveDataNonCitizen(){
            
        List<SSP_Application__c> lstApps = [SELECT Id,ProgramsApplied__c,SectionStatus__c,Name,DCCaseNumber__c  FROM SSP_Application__c LIMIT 1];
        List<SSP_ApplicationIndividual__c> appIndvList = [SELECT Id, ProgramsApplied__c,MemberProgramsApplied__c,SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c,isHOHDetailsCompleted__c,IsRACSNAPMealsRuleTriggered__c,MemberStatus__c,MedicaidType__c FROM SSP_ApplicationIndividual__c WHERE SSP_Application__c =: lstApps[0].Id] ;
        List<SSP_Member__c> lstMembers =  [Select id,Name,BirthDate__c,FirstName__c,Age__c, MiddleInitial__c,LastName__c,SSN__c,GenderCode__c,NoReasonSSNCode__c,IsUSCitizenToggle__c,IsIntendToResideToggle__c,IsMilitaryMemberToggle__c,RaceCode__c,SuffixCode__c,IsHispanicLatinoSpanishToggle__c,EthnicityCode__c,DeathDate__c,NationalityCode__c,SpecialNeedIndicatorToggle__c,IsFileCleared__c,IsUSCitizenValidated__c,SSNVerified__c,TaxFilerStatusCurrentYear__c,TaxFilerStatusNextYear__c,MailingAddressLine1__c,PhysicalAddressLine1__c,IsBlindToggle__c,IsDisabledToggle__c,IsDateOfDeathValidated__c,IndividualId__c,SameAddressInfoAsHOHToggle__c FROM SSP_Member__c LIMIT 50];
        
        User objNonCitizenUser = SSP_TestDataFactory.setUpNonCitizenUser();
        Cache.SessionPartition sessionPart = Cache.Session.getPartition(SSP_GlobalConstants.CACHE_PARTITION_NAME);  
        sessionPart.put(SSP_GlobalConstants.SELECTED_ROLE,'Mail_Center_Worker');
        sessionPart.put('finalProgramList',new List<String>{'SNAP (Food Assistance)'});
        sessionPart.put('programRemoved',new List<String>{'Retirement'});
        
        lstApps[0].ProgramsApplied__c ='SN'; 
            
        update lstApps;
        appIndvList[0].ProgramsApplied__c = 'SN';
        appIndvList[0].IsActiveIEESCasePresent__c=true;   
        appIndvList[0].BlockedCaseNumber__c='2345678';  
        appIndvList[0].isApplicationBlocked__c=true;    
        update appIndvList;
        
        lstMembers[0].SSNVerified__c=false;
        update lstMembers;   
            
            SSP_HouseholdMembersSummaryCtrl.MemberDetailsWrapper response = SSP_HouseHoldSummaryService.buildWrapperObject(lstMembers[0],appIndvList[0],lstApps , false);
            response.sName = 'Test 1 Name';
            response.sFirstName = 'mona';
            response.sLastName = 'Lisa';
            response.sGender = 'M';
            response.sRace = 'IN';
            response.sSufficeCode = 'JR';
            response.sEthnicityCode = 'CU';
            response.sGender = 'M';
            response.bisUSCitizen ='Y';
            response.sAppIndividualId = appIndvList[0].Id;
            response.bisHOH = true;
            response.bSSNVerified = false;
            response.bSSNPresent ='N';
            response.bServedInUSMilitary ='Y';
            response.bKentuckyResident ='Y';
            response.sSpecialNeedIndicator ='Y';
            response.bisHispanicLatino ='N';
            response.sProgramsRequested = 'Social Security'; 
            response.sRecordId = lstMembers[0].id;
            response.dDOB = system.today();
            response.sApplicationId=  lstApps[0].Id;
            response.mciCallCount = 1;
            response.sSSN = '1223445345';
             response.nonCitizenVerificationFlag = true;
            response.matchType = 'Full Match';
      
      
            test.startTest();
          System.runAs(objNonCitizenUser){ 
            Test.setMock(HttpCalloutMock.class, new SSP_MCIMockService('FullMatch_MoreThan1Member'));  
            SSP_LightningResponse result6 = SSP_HouseholdMembersSummaryCtrl.saveData(JSON.serialize(response), false , false, false);             
            test.stopTest(); 
        }
        
    }
    
    @isTest
    public static void identifyAndMarkUNApplicationsTest(){
        SSP_HouseholdSummaryService.mciWrap.isNonCitizenUser = false;
         User objNonCitizenUser = SSP_TestDataFactory.setUpNonCitizenUser();
        System.runAs(objNonCitizenUser){
            
        List<Account> lstAcc = SSP_TestDataFactory.createAccounts(1, false); 
        lstAcc[0].Name = 'NonCitizenAccount'; 
         lstAcc[0].CaseNumber__c ='3456788';  
        insert lstAcc;
            
        System.debug('lstAcc-->'+ lstAcc);   
        
        List<Contact> lstCon = [SELECT Id, FirstName, LastName FROM Contact WHERE FirstName = 'NonCitizen' AND LastName = 'User' LIMIT 1];//= SSP_TestDataFactory.createContacts(1, false); 
         update lstCon;
        
        AccountContactRelation acr = new AccountContactRelation(); 
        acr.Accountid = lstAcc[0].Id;
        acr.Contactid = lstCon[0].Id;
        acr.IsActive = true; 
        insert acr;

        List<SSP_Application__c> lstAppln = SSP_TestDataFactory.createSSPApplications(1, false);
        System.debug('lstAcc[0].Id'+ lstAcc[0].Id);    
        lstAppln[0].Account__c=lstAcc[0].Id; 
        lstAppln[0].Contact__c = lstCon[0].Id;
        lstAppln[0].Status__c='UN';
        insert lstAppln;
        
         List<Contact> conList = SSP_TestDataFactory.createContacts(2,true);
        conList[0].IndividualId__c='12345777';
        insert    conList;
        Contact_Mapping__c cm = new Contact_Mapping__c(IEES_ID__c=12345777 , Contact__c=conList[0].id);
        insert cm;
        Contact_Mapping__c cm2 = new Contact_Mapping__c(IEES_ID__c=12345777 , Contact__c=conList[1].id);
        insert cm2;
        List<SSP_Member__c> listMembers = SSP_TestDataFactory.createSSPMembers(2, false);
        
        listMembers[0].FirstName__c='Andrews'; 
        listMembers[0].LastName__c='Nelsonj';
        listMembers[0].GenderCode__c='M';
        listMembers[0].Contact__c = conList[0].Id;
        listMembers[0].IndividualId__c='12345777';
            listMembers[1].FirstName__c='Andrews'; 
        listMembers[1].LastName__c='Nelsonj';
        listMembers[1].GenderCode__c='M';
        listMembers[1].Contact__c = conList[1].Id;
        listMembers[1].IndividualId__c='12345077';
        insert listMembers;
        List<SSP_ApplicationIndividual__c> listAppIndiv = SSP_TestDataFactory.createApplicationIndividuals(1, false);
        listAppIndiv[0].SSP_Member__c = listMembers[0].Id;
        listAppIndiv[0].SSP_Application__c = lstAppln[0].Id;
        listAppIndiv[0].IsHeadOfHousehold__c = true;insert listAppIndiv;
            SSP_HouseholdSummaryService.identifyAndMarkUNApplications(new Set<String>{listMembers[0].id});
            SSP_HouseholdSummaryService.fetchRequiredData(new List<String>{'12345777'});
            SSP_HouseholdSummaryService.createConMapping( new Set<Integer>{12345777}, null);
            SSP_HouseholdSummaryService.getContactsToInsert( new Set<Integer>{12345777}, conList);
            String s = String.valueOf(conList[0].Id);
            SSP_SharingBypassFetcher.getContacts(new Set<String>{s});
            conList[0].DCACRId__c='1234';
            update conList[0];
            SSP_SharingBypassFetcher.getContactsByDCACRIds( new Set<String>{'1234'});  
            SSP_SharingBypassFetcher.fetchExistingAccount('3456788', lstCon[0].id);
            SSP_SharingBypassFetcher.fetchExistingCase('3456788', lstCon[0].id);
            SSP_SharingBypassFetcher.getUserList('SSP Non Citizen Profile');
            Map<String,Object> mapHouseholdData = new Map<String,Object> ();
            mapHouseholdData.put('memberObj', new SSP_Member__c());
            mapHouseholdData.put('contactId', new SSP_Member__c( )); 
             mapHouseholdData.put('lstMembers', listMembers[1]);
            SSP_HouseholdSummaryService.updateContactInfo(mapHouseholdData,null,'12345777');
            
        }
    }
    
    @isTest
    public static void handleFullMatchScenarioTest(){
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
       
            List<SSP_Application__c> lstApps = [SELECT Id,ProgramsApplied__c,SectionStatus__c,Name,DCCaseNumber__c  FROM SSP_Application__c LIMIT 1];
            List<SSP_ApplicationIndividual__c> appIndvList = [SELECT Id, ProgramsApplied__c,MemberProgramsApplied__c,SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c,isHOHDetailsCompleted__c,IsRACSNAPMealsRuleTriggered__c,MemberStatus__c,MedicaidType__c FROM SSP_ApplicationIndividual__c WHERE SSP_Application__c =: lstApps[0].Id] ;
            List<SSP_Member__c> lstMembers =  [Select id,Name,BirthDate__c,FirstName__c,Age__c,
                                               MiddleInitial__c,LastName__c,SSN__c,GenderCode__c,NoReasonSSNCode__c,
                                               IsUSCitizenToggle__c,IsIntendToResideToggle__c,IsMilitaryMemberToggle__c,
                                               RaceCode__c,SuffixCode__c,IsHispanicLatinoSpanishToggle__c,
                                               EthnicityCode__c,DeathDate__c,NationalityCode__c,SpecialNeedIndicatorToggle__c,IsFileCleared__c,
                                               IsUSCitizenValidated__c,SSNVerified__c,TaxFilerStatusCurrentYear__c,TaxFilerStatusNextYear__c,MailingAddressLine1__c,PhysicalAddressLine1__c,IsBlindToggle__c,IsDisabledToggle__c,IsDateOfDeathValidated__c,IndividualId__c,SameAddressInfoAsHOHToggle__c FROM SSP_Member__c
                                               LIMIT 1];
            lstMembers[0].Non_Citizen_Verification_Flag__c =true;
            update lstMembers;
            Cache.SessionPartition sessionPart = Cache.Session.getPartition(SSP_GlobalConstants.CACHE_PARTITION_NAME);  
            sessionPart.put(SSP_GlobalConstants.SELECTED_ROLE,'Contact_Center_View_and_Edit');
        
            SSP_HouseholdMembersSummaryCtrl.MemberDetailsWrapper response = SSP_HouseHoldSummaryService.buildWrapperObject(lstMembers[0],appIndvList[0],lstApps , false);
            response.sName = 'Test 1 Name';
            response.sFirstName = 'FirstName';
            response.sLastName = 'LastName';
            response.sMiddleName = '1';
            response.sGender = 'M';
            response.sRace = 'IN';
            response.sSufficeCode = 'JR';
            response.sEthnicityCode = 'CU';
            response.sGender = 'M';
            response.sGender = 'M';
            response.bisUSCitizen ='Y';
            response.sAppIndividualId = appIndvList[0].Id;
            response.bisHOH = true;
            response.bSSNVerified = false;
            response.bSSNPresent ='N';
            response.bServedInUSMilitary ='Y';
            response.bKentuckyResident ='Y';
            response.sSpecialNeedIndicator ='Y';
            response.bisHispanicLatino ='N';
            response.sProgramsRequested = 'SNAP (Food Assistance)'; 
            response.sRecordId = lstMembers[0].id;
            response.dDOB = system.today();
            SSP_MCIMergedServiceResponeWrapper responseData  = new SSP_MCIMergedServiceResponeWrapper();     
            responseData.IndividualId='3456767';
            responseData.Applicationnumber='12345';
            responseData.lstOfSSPMembers = lstMembers; 
            responseData.lstOfApplicationIndividuals = appIndvList;
            responseData.MatchStatus='Match';
            Map<String,Object> mapHouseholdData = new Map<String,Object>();
            mapHouseholdData.put('lstAppIndividuals',appIndvList);
            mapHouseholdData.put('lstApps',lstApps);
            mapHouseholdData.put('lstMembers',lstMembers);
            SSP_ProgramSelectionService.QualifiedIndividualDetailWrapper detailsWrapper = new SSP_ProgramSelectionService.QualifiedIndividualDetailWrapper();
            detailsWrapper.applicationIndividual = appIndvList.get(0);
            detailsWrapper.member = lstMembers.get(0);
            detailsWrapper.responseMemberData = lstMembers.get(0);
            detailsWrapper.isCitizenUser = true;
            detailsWrapper.triggerQualifiedCall = false;
        System.runAs(citizen){
            SSP_HouseHoldSummaryService.triggerQualifiedCall('919216840', '919216843', detailsWrapper);
            SSP_HouseHoldSummaryService.handleFullMatchScenario(responseData , lstMembers.get(0), response ,mapHouseholdData, false);
            SSP_HouseHoldSummaryService.handleFullMatchScenario(responseData , lstMembers.get(0), response ,mapHouseholdData, true);
            detailsWrapper = SSP_HouseHoldSummaryService.constructQICallData(response , detailsWrapper, '919216845', lstMembers.get(0));
            
        }
        SSP_HouseHoldSummaryService.handleFullMatchScenario(responseData , lstMembers.get(0), response ,mapHouseholdData, false);
        lstMembers.get(0).id = null;
        SSP_HouseHoldSummaryService.handleNoMatchScenario(responseData , lstMembers.get(0), response ,mapHouseholdData, false);
         SSP_HouseHoldSummaryService.handleNoMatchScenario(null , lstMembers.get(0), response ,mapHouseholdData, false);
          SSP_HouseHoldSummaryService.handleNoMatchScenario(null , null, null ,null, null);

        
    }
    
    @isTest
    public static void deleteNavFlowRecordForMemberTest(){
        List<SSP_Member__c> lstMembers =  [Select id,Identify_verification_method__c,Alias_First_Name__c,Alias_Last_Name__c,Name,BirthDate__c, IsDateOfBirthValidated__c,   Reference_Number__c, FirstName__c,Age__c, MiddleInitial__c,LastName__c,SSN__c,GenderCode__c,NoReasonSSNCode__c,IsUSCitizenToggle__c,IsIntendToResideToggle__c,IsMilitaryMemberToggle__c,RaceCode__c,SuffixCode__c,IsHispanicLatinoSpanishToggle__c,EthnicityCode__c,DeathDate__c,NationalityCode__c,SpecialNeedIndicatorToggle__c,IsFileCleared__c,IsUSCitizenValidated__c,SSNVerified__c,TaxFilerStatusCurrentYear__c,TaxFilerStatusNextYear__c,MailingAddressLine1__c,PhysicalAddressLine1__c,IsBlindToggle__c,IsDisabledToggle__c,IsDateOfDeathValidated__c,IndividualId__c,SameAddressInfoAsHOHToggle__c,SecondaryPhoneNumber__c FROM SSP_Member__c LIMIT 50];
        List<SSP_Application__c> lstApps = [SELECT Id,ProgramsApplied__c,SectionStatus__c,Name,DCCaseNumber__c  FROM SSP_Application__c LIMIT 1];
        NavFlowStatus__c navFlowrec = new NavFlowStatus__c();
        navFlowrec.SSP_Member__c = lstMembers.get(0).Id;
        navFlowrec.SSPApplication__c = lstApps.get(0).Id;
        navFlowrec.FlowPageStatus__c = 'Active';
        navFlowrec.NavFlowName__c = 'Member Flow';
        if(navFlowrec !=null){
            insert navFlowrec;
        }
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        System.runAs(citizen){
            SSP_HouseHoldSummaryService.deleteNavFlowRecordForMember(lstMembers.get(0).Id , lstApps.get(0).Id);
            SSP_HouseHoldSummaryService.checkMCIApplicable(lstMembers.get(0).Id);
            SSP_HouseHoldSummaryService.saveValueEnteredFromUser(lstMembers.get(0), lstMembers.get(0));
          // SSP_HouseHoldSummaryService.isDummyMember(lstMembers.get(0));
        }
    }
    @isTest 
    public static void getTrimFirstAndLastNameTest(){
        String firstname = 'This is the Test first name above 40 character for the test purpose';
        String lastName = 'This is the Test Last name above 80 character for the test purpose in the Test Class for check the result In Test class';
        SSP_HouseHoldSummaryService.getTrimFirstAndLastName('Jhon','Clarck');
        SSP_HouseHoldSummaryService.getTrimFirstAndLastName(null,null);
        SSP_HouseHoldSummaryService.getTrimFirstAndLastName(firstname,lastName);

    }
    
    @isTest
    public static void createAccountContactRelationTest(){
        
        List<SSP_Application__c> lstApps = [SELECT Id,ProgramsApplied__c,SectionStatus__c,Name,DCCaseNumber__c  FROM SSP_Application__c LIMIT 1];
        List<SSP_ApplicationIndividual__c> appIndvList = [SELECT Id, SSP_Member__c, SSP_Application__c,IsHeadOfHousehold__c,SSP_Member__r.Contact__c,SSP_Member__r.Contact__r.AccountId FROM SSP_ApplicationIndividual__c WHERE SSP_Application__c =: lstApps[0].Id] ;
        appIndvList[0].IsHeadOfHousehold__c=false;
        update appIndvList;
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        
        System.runAs(citizen){
            SSP_HouseHoldSummaryService.createAccountContactRelation(lstApps.get(0).Id, true); 
        }
        List<Account> lstAcc = SSP_TestDataFactory.createAccounts(2, false);
        lstAcc[0].Name = 'IncomeController1';
        insert lstAcc;
        
        Id contactRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Citizen');
        Contact objAdminContact = SSP_TestDataFactory.createContactRecord('Admin', 'User', 'admin@abc.xyz' , contactRecordTypeId, true);

        List<SSP_Application__c> lstAppln = SSP_TestDataFactory.createSSPApplications(1, false);
        lstAppln[0].Account__c=lstAcc[0].Id;        
        lstAppln[0].Contact__c = objAdminContact.Id;
        insert lstAppln;
                
        List<SSP_Member__c> lstMem = SSP_TestDataFactory.createSSPMembers(1, false);
        lstMem[0].contact__c=objAdminContact.Id;
        insert lstMem;
        
        List<SSP_ApplicationIndividual__c> lstAppInd = SSP_TestDataFactory.createApplicationIndividuals(1, false); 
        lstAppInd[0].SSP_Application__c=lstAppln[0].Id;
        lstAppInd[0].IsHeadOfHousehold__c =false;
        lstAppInd[0].SSP_Member__c=lstMem[0].Id;
        insert lstAppInd;   
        System.runAs(citizen){
            SSP_HouseHoldSummaryService.createAccountContactRelation(lstAppln.get(0).Id, true); 
        }

    }
    
    @isTest
    public static void checkExistingPermissionTest(){
        Test.setMock(HttpCalloutMock.class, new SSP_DC_ReverseMockImpl()); 
        List<SSP_Application__c> lstApps = [SELECT Id,ProgramsApplied__c,SectionStatus__c,Name,DCCaseNumber__c  FROM SSP_Application__c LIMIT 1];
        List<String> requestedProgram = new List<String>{'SNAP (Food Assistance)','Retirement'};
        List<String> programFromCallout = new List<String>{'Social Security','Retirement'};
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        System.runAs(citizen){
            SSP_HouseHoldSummaryService.getRequriedProgramHoh(requestedProgram,programFromCallout);
            Test.startTest();
            SSP_HouseHoldSummaryService.checkExistingPermission('100044211', lstApps[0].ProgramsApplied__c,SSP_GlobalConstants.ORGANISATION_AUTH_REP,'68765567');
            Test.stopTest();
        
        }
    }
    
     @isTest
    public static void isDataProcessedTest(){
        List<SSP_Application__c> lstApps = [SELECT Id,ProgramsApplied__c,SectionStatus__c,Name,DCCaseNumber__c  FROM SSP_Application__c LIMIT 1];
        List<SSP_ApplicationIndividual__c> appIndvList = [SELECT Id, ProgramsApplied__c,MemberProgramsApplied__c,SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c,isHOHDetailsCompleted__c,IsRACSNAPMealsRuleTriggered__c,MemberStatus__c,MedicaidType__c FROM SSP_ApplicationIndividual__c WHERE SSP_Application__c =: lstApps[0].Id] ;
        List<SSP_Member__c> membrs = [Select id from SSP_Member__c limit 10 ];
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];        
        System.runAs(citizen){
            SSP_HouseholdMembersSummaryCtrl.isDataProcessed(lstApps[0].id,'Intake');// if part
            SSP_HouseholdMembersSummaryCtrl.isDataProcessed('989898989','Intake'); // exception part            
        }        
       SSP_Member__c member = new SSP_Member__C ();
        member.id = appIndvList[0].SSP_Member__c;
        member.IndividualId__c = null;
        update member; 
        System.runAs(citizen){
             SSP_HouseholdMembersSummaryCtrl.isDataProcessed(lstApps[0].id,'Intake'); // else if part
        }
        delete member;
        System.runAs(citizen){
             SSP_HouseholdMembersSummaryCtrl.isDataProcessed(lstApps[0].id,'Intake'); // else 
        }
    }
    
     @isTest
    public static void parseApplicationDetailsTest(){
        SSP_HouseHoldSummaryService.mciWrap.applicationDetail = new SSP_Application__c();
        SSP_ApplicationIndividual__c appIndvList = [SELECT Id, isApplicationBlocked__c, BlockedCaseNumber__c, SSP_Member__c,SSP_Member__r.firstName__c ,SSP_Member__r.lastName__c,SSP_Application__c FROM SSP_ApplicationIndividual__c limit 1] ;
       appIndvList.isApplicationBlocked__c = true;
       appIndvList.BlockedCaseNumber__c ='567589';
        update appIndvList;
        SSP_Member__c member = new SSP_Member__c();
        member.FirstName__c = appIndvList.SSP_Member__r.firstName__c;
        member.LastName__c = appIndvList.SSP_Member__r.lastName__c;
        SSP_HouseHoldSummaryService.parseApplicationDetails(appIndvList ,member);        
    }
    
    @isTest
    public static void storeHOHIndvIdToCacheTest(){
        User objNonCitizenUser = SSP_TestDataFactory.setUpNonCitizenUser();
       
        // covers all positive scenario 
        Cache.SessionPartition sessionPart = Cache.Session.getPartition(SSP_GlobalConstants.CACHE_PARTITION_NAME);        
        sessionPart.put(SSP_GlobalConstants.SELECTED_ROLE, 'Assister',7200);
        List<Contact> con = [Select id from contact where email='noncitizen@abc.xyz'];
        List<Account> listOrgAccount = SSP_TestDataFactory.createAccounts(1, true, Schema.SObjectType.Account.getRecordTypeInfosByName().get('Organization').getRecordTypeId());
        listOrgAccount[0].DCDataId__c=4.0;
        update listOrgAccount;
        AccountContactRelation assisterACR = SSP_TestDataFactory.createAccountContactRelationshipRecord(con[0].Id, listOrgAccount[0].Id, false);
        assisterACR.Roles = 'Assister';
        insert assisterACR;     
        List<SSP_Member__c> listMembers = SSP_TestDataFactory.createSSPMembers(1, false);
        listMembers[0].FirstName__c='Andrews';
        listMembers[0].LastName__c='Nelsonj';
        listMembers[0].GenderCode__c='M';
        listMembers[0].Contact__c = con[0].Id;
        listMembers[0].IndividualId__c='89898769';
        insert listMembers;
        
        List<SSP_Application__c> listApplication = SSP_TestDataFactory.createSSPApplications(1, false);
        listApplication[0].Account__c = assisterACR.AccountId;
        insert listApplication;
        
        List<SSP_ApplicationIndividual__c> listAppIndiv = SSP_TestDataFactory.createApplicationIndividuals(1, false);
        listAppIndiv[0].SSP_Member__c = listMembers[0].Id;
        listAppIndiv[0].SSP_Application__c = listApplication[0].Id;
        listAppIndiv[0].IsHeadOfHousehold__c = true;
        insert listAppIndiv;

        System.runAs(objNonCitizenUser){ 
            SSP_HouseholdMembersSummaryCtrl.storeHOHIndvIdToCache(listApplication[0].id);        
        }
    }
   @isTest
    public static void fetchApplicationProgramsTest(){
        List<SSP_Application__c> lstApps = [SELECT Id,ProgramsApplied__c,SectionStatus__c,Name,DCCaseNumber__c  FROM SSP_Application__c LIMIT 1];
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
       
        System.runAs(citizen){
            SSP_HouseholdMembersSummaryCtrl.fetchApplicationPrograms(lstApps[0].id);
        
        }
    }
    @isTest
    public static void fetchApplicationProgramsTestException(){
        List<SSP_Application__c> lstApps = [SELECT Id,ProgramsApplied__c,SectionStatus__c,Name,DCCaseNumber__c  FROM SSP_Application__c LIMIT 1];
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
       
        System.runAs(citizen){
            SSP_HouseholdMembersSummaryCtrl.fetchApplicationPrograms(lstApps[0].Name);
        
        }
    }
    @isTest
    public static void fetchMemberIdNotCitizenTest(){
        List<SSP_Application__c> lstApps = [SELECT Id,ProgramsApplied__c,SectionStatus__c,Name,DCCaseNumber__c  FROM SSP_Application__c LIMIT 1];
        List<SSP_ApplicationIndividual__c> appIndvList = [SELECT Id, SSP_Member__r.id, SSP_Application__c FROM SSP_ApplicationIndividual__c WHERE SSP_Application__c =: lstApps[0].Id] ;
        SSP_Member__c  member =  new  SSP_Member__c ();
        member.id= appIndvList[0].SSP_Member__r.id;
        member.HasAlienSponsorToggle__c = SSP_GlobalConstants.NO;
        member.IsUSCitizenToggle__c =  SSP_GlobalConstants.NO;  
        upsert member;
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        
        SSP_HouseholdMembersSummaryCtrl.fetchMemberIdNotCitizen( appIndvList[0].SSP_Member__r.id, lstApps[0].Id);
    }
     @isTest
    public static void fetchMemberIdNotCitizenExceptionTest(){
        
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
         System.runAs(citizen){
            SSP_HouseholdMembersSummaryCtrl.fetchMemberIdNotCitizen(null,null);
            
        }
    }
    @isTest
    public static void MemberDetailsWrapperTest(){
        //String sIdentityMethod='Test Wrapper';
        SSP_HouseholdMembersSummaryCtrl.MemberDetailsWrapper wrapperDetails= new SSP_HouseholdMembersSummaryCtrl.MemberDetailsWrapper();
        wrapperDetails.sIdentityMethod = 'Test Wrapper';
        wrapperDetails.referenceNumber='4434343434';
        wrapperDetails.nonCitizenVerificationFlag=true;
    }
    
    @istest
    public static void updateApplicationIndividualWithCounttest()
    {
         List<SSP_Member__c> lstMembers =  [Select id,Identify_verification_method__c,Alias_First_Name__c,Alias_Last_Name__c,Name,BirthDate__c, IsDateOfBirthValidated__c,   Reference_Number__c, FirstName__c,Age__c, MiddleInitial__c,LastName__c,SSN__c,GenderCode__c,NoReasonSSNCode__c,IsUSCitizenToggle__c,IsIntendToResideToggle__c,IsMilitaryMemberToggle__c,RaceCode__c,SuffixCode__c,IsHispanicLatinoSpanishToggle__c,EthnicityCode__c,DeathDate__c,NationalityCode__c,SpecialNeedIndicatorToggle__c,IsFileCleared__c,IsUSCitizenValidated__c,SSNVerified__c,TaxFilerStatusCurrentYear__c,TaxFilerStatusNextYear__c,MailingAddressLine1__c,PhysicalAddressLine1__c,IsBlindToggle__c,IsDisabledToggle__c,IsDateOfDeathValidated__c,IndividualId__c,SameAddressInfoAsHOHToggle__c FROM SSP_Member__c LIMIT 50];
         List<SSP_Application__c> lstApps = [SELECT Id,ProgramsApplied__c,SectionStatus__c,Name,DCCaseNumber__c  FROM SSP_Application__c LIMIT 1];
         List<SSP_ApplicationIndividual__c> appIndvList = [SELECT Id, SSP_Member__c, SSP_Application__c , MCIcount__c FROM SSP_ApplicationIndividual__c WHERE SSP_Application__c =: lstApps[0].Id] ;
         SSP_HouseHoldSummaryService.updateApplicationIndividualWithCount(appIndvList,true);
    }
    
     @istest
    public static void updateApplicationIndividualWithCounttest2()
    {
         List<SSP_Member__c> lstMembers =  [Select id,Identify_verification_method__c,Alias_First_Name__c,Alias_Last_Name__c,Name,BirthDate__c, IsDateOfBirthValidated__c,   Reference_Number__c, FirstName__c,Age__c, MiddleInitial__c,LastName__c,SSN__c,GenderCode__c,NoReasonSSNCode__c,IsUSCitizenToggle__c,IsIntendToResideToggle__c,IsMilitaryMemberToggle__c,RaceCode__c,SuffixCode__c,IsHispanicLatinoSpanishToggle__c,EthnicityCode__c,DeathDate__c,NationalityCode__c,SpecialNeedIndicatorToggle__c,IsFileCleared__c,IsUSCitizenValidated__c,SSNVerified__c,TaxFilerStatusCurrentYear__c,TaxFilerStatusNextYear__c,MailingAddressLine1__c,PhysicalAddressLine1__c,IsBlindToggle__c,IsDisabledToggle__c,IsDateOfDeathValidated__c,IndividualId__c,SameAddressInfoAsHOHToggle__c FROM SSP_Member__c LIMIT 50];
         List<SSP_Application__c> lstApps = [SELECT Id,ProgramsApplied__c,SectionStatus__c,Name,DCCaseNumber__c  FROM SSP_Application__c LIMIT 1];
         List<SSP_ApplicationIndividual__c> appIndvList = [SELECT Id, SSP_Member__c, SSP_Application__c , MCIcount__c FROM SSP_ApplicationIndividual__c WHERE SSP_Application__c =: lstApps[0].Id] ;
         appIndvList[0].MCIcount__c=null; 
        SSP_HouseHoldSummaryService.updateApplicationIndividualWithCount(appIndvList,true);
    }
     @istest
    public static void updateApplicationIndividualWithCounttest3() // exception 
    {
         List<SSP_Member__c> lstMembers =  [Select id,Identify_verification_method__c,Alias_First_Name__c,Alias_Last_Name__c,Name,BirthDate__c, IsDateOfBirthValidated__c,   Reference_Number__c, FirstName__c,Age__c, MiddleInitial__c,LastName__c,SSN__c,GenderCode__c,NoReasonSSNCode__c,IsUSCitizenToggle__c,IsIntendToResideToggle__c,IsMilitaryMemberToggle__c,RaceCode__c,SuffixCode__c,IsHispanicLatinoSpanishToggle__c,EthnicityCode__c,DeathDate__c,NationalityCode__c,SpecialNeedIndicatorToggle__c,IsFileCleared__c,IsUSCitizenValidated__c,SSNVerified__c,TaxFilerStatusCurrentYear__c,TaxFilerStatusNextYear__c,MailingAddressLine1__c,PhysicalAddressLine1__c,IsBlindToggle__c,IsDisabledToggle__c,IsDateOfDeathValidated__c,IndividualId__c,SameAddressInfoAsHOHToggle__c FROM SSP_Member__c LIMIT 50];
         List<SSP_Application__c> lstApps = [SELECT Id,ProgramsApplied__c,SectionStatus__c,Name,DCCaseNumber__c  FROM SSP_Application__c LIMIT 1];
         List<SSP_ApplicationIndividual__c> appIndvList = [SELECT Id, SSP_Member__c, SSP_Application__c  FROM SSP_ApplicationIndividual__c WHERE SSP_Application__c =: lstApps[0].Id] ;
         appIndvList[0].MCIcount__c=null; 
        SSP_HouseHoldSummaryService.updateApplicationIndividualWithCount(appIndvList,true);
    }
    
    @isTest
    public static void constructMemberDataTest(){
         User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        System.runAs(citizen){
        SSP_Member__c sspMembers =  [Select id,Firstname__c ,lastname__c,IndividualId__c  FROM SSP_Member__c LIMIT 1];
         sspMembers.IndividualId__c='919216849';
            update sspMembers;             
        SSP_HouseHoldSummaryService.getTrimFirstAndLastName('Jhon','Clarck');
        SSP_HouseHoldSummaryService.ResponseWrapper responsewap1 = new SSP_HouseHoldSummaryService.ResponseWrapper();
        responsewap1 = SSP_HouseHoldSummaryService.constructMemberData(sspMembers);
        }
    }
   
    @isTest
    public static void updateOwnerTest(){
        
        List<Account> accList = SSP_TestDataFactory.createAccounts(1,true);
        List<Contact> conList = SSP_TestDataFactory.createContacts(1,true);
        //List<User> getSystemAutoProcess = SSP_TestDataFactory.createUser(1,false,'System Auto Process');
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        System.runAs(citizen){
             List<User> getSystemAutoProcess = SSP_TestDataFactory.createUser(1,false,'System Auto Process');
            conList[0].ownerID=getSystemAutoProcess[0].id;
            SSP_HouseHoldSummaryService.updateOwner(accList,conList);
        }
    }

   @isTest
    public static void saveData_FullMatch_NonHOHSave(){
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        User objNonCitizenUser = SSP_TestDataFactory.setUpNonCitizenUser();
        List<SSP_Application__c> lstApps = [SELECT Id,ProgramsApplied__c,SectionStatus__c,Name,DCCaseNumber__c  FROM SSP_Application__c LIMIT 1];
        List<SSP_ApplicationIndividual__c> appIndvList = [SELECT Id, ProgramsApplied__c,MemberProgramsApplied__c,SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c,isHOHDetailsCompleted__c,IsRACSNAPMealsRuleTriggered__c,MemberStatus__c,MedicaidType__c FROM SSP_ApplicationIndividual__c WHERE SSP_Application__c =: lstApps[0].Id] ;
        List<SSP_Member__c> lstMembers =  [Select id,Name,BirthDate__c,FirstName__c,Age__c, MiddleInitial__c,LastName__c,SSN__c,GenderCode__c,NoReasonSSNCode__c,IsUSCitizenToggle__c,IsIntendToResideToggle__c,IsMilitaryMemberToggle__c,RaceCode__c,SuffixCode__c,IsHispanicLatinoSpanishToggle__c,EthnicityCode__c,DeathDate__c,NationalityCode__c,SpecialNeedIndicatorToggle__c,IsFileCleared__c,IsUSCitizenValidated__c,SSNVerified__c,TaxFilerStatusCurrentYear__c,TaxFilerStatusNextYear__c,MailingAddressLine1__c,PhysicalAddressLine1__c,IsBlindToggle__c,IsDisabledToggle__c,IsDateOfDeathValidated__c,IndividualId__c,SameAddressInfoAsHOHToggle__c FROM SSP_Member__c LIMIT 50];
        
        lstApps[0].ProgramsApplied__c ='SN';            
        update lstApps;
        appIndvList[0].ProgramsApplied__c = 'SN';
        update appIndvList;
        
        lstMembers[0].IsFileCleared__c=true;
        lstMembers[0].SSNVerified__c=true;
        lstMembers[0].Firstname__c='mock';
        lstMembers[0].LastName__c='ErrorCode';
        lstMembers[0].GenderCode__c='M';
        lstMembers[0].BirthDate__C=system.today();
        lstMembers[0].SSN__c = null;
        lstMembers[0].SSNVerified__c= false;
            update lstmembers;
        
            
            SSP_HouseholdMembersSummaryCtrl.MemberDetailsWrapper response = SSP_HouseHoldSummaryService.buildWrapperObject(lstMembers[0],appIndvList[0],lstApps , false);
            response.sName = 'Test 1 Name';
            response.sFirstName = 'mock';
            response.sLastName = 'ErrorCode';
            response.sGender = 'M';
            response.sRace = 'IN';
            response.sSufficeCode = 'JR';
            response.sEthnicityCode = 'CU';
            response.sGender = 'M';
            response.sGender = 'M';
            response.bisUSCitizen ='Y';
            response.sAppIndividualId = appIndvList[0].Id;
            response.bisHOH = true;
            response.bSSNVerified = false;
            response.bSSNPresent ='N';
            response.bServedInUSMilitary ='Y';
            response.bKentuckyResident ='Y';
            response.sSpecialNeedIndicator ='Y';
            response.bisHispanicLatino ='N';
            response.sProgramsRequested = 'SNAP (Food Assistance)'; 
            response.sRecordId = lstMembers[0].id;
            response.dDOB = system.today();
            response.sApplicationId=  lstApps[0].Id;
            response.mciCallCount = 1;
            response.sSSN = '786787657';            
            response.sSufficeCode = 'JR';    
        test.startTest();
            System.runAs(objNonCitizenUser){            
            Test.setMock(HttpCalloutMock.class, new SSP_MCIMockService('FullMatch_1Member'));  
            SSP_LightningResponse result5 = SSP_HouseholdMembersSummaryCtrl.saveData(JSON.serialize(response), false , false, false);
        }
        System.runAs(objNonCitizenUser){            
            Test.setMock(HttpCalloutMock.class, new SSP_MCIMockService('FullMatch_1MemberHoh'));              
            SSP_LightningResponse result5 = SSP_HouseholdMembersSummaryCtrl.saveData(JSON.serialize(response), false , false, false);
        }
         System.runAs(objNonCitizenUser){       
            
            Test.setMock(HttpCalloutMock.class, new SSP_MCIMockService('FullMatch_MoreThan1Member'));              
            SSP_LightningResponse result5 = SSP_HouseholdMembersSummaryCtrl.saveData(JSON.serialize(response), false , false, false);
        }       
        
         test.stopTest();
        
    }
     @isTest
    public static void isDummyMemberTest (){
        SSP_Member__c sspMembers =  [Select id,Firstname__c ,lastname__c,IndividualId__c,Contact__c,Contact__r.FirstName,Contact__r.LastName  FROM SSP_Member__c where Contact__c!=null LIMIT 1];
        contact c = new contact();
        c.id =sspMembers.Contact__c;
        c.FirstName='DUMMYDATA';
        c.LastName='DUMMYDATA';        
        upsert c;
        test.startTest();
        SSP_HouseHoldSummaryService.isDummyMember(sspMembers);
        test.stopTest(); 
    }
    
     @isTest
    public static void deleteRecordTest(){
        SSP_Member__c sspMembers =  [Select id,Firstname__c ,lastname__c,IndividualId__c  FROM SSP_Member__c where Contact__c!=null LIMIT 1];
        List<String> memberID = new List<String>();
        memberID.add(sspMembers.id);
        test.startTest();
        SSP_HouseHoldSummaryService.mciWrap.deleteContact = true;
        SSP_HouseHoldSummaryService.deleteRecords(memberID);
        test.stopTest();       

    }

    @isTest
    public static void deleteRecordTestElse(){
        SSP_Member__c sspMembers =  [Select id,Firstname__c ,lastname__c,IndividualId__c  FROM SSP_Member__c where Contact__c!=null LIMIT 1];
        List<String> memberID = new List<String>();
        memberID.add(sspMembers.id);
        test.startTest();
        SSP_HouseHoldSummaryService.deleteRecords(memberID);
        test.stopTest();  
    }
    
 
private class SSP_MCIMockService implements HttpCalloutMock {  
    /**
     * method       : respond 
     * @description     : Mock method to generate response
     * @author      : Rahul
     * @param req : HttpRequest for hitting the service
     */ 
    protected string mockParam;
    SSP_MCIMockService(String mockCallParam){ 
       this.mockParam = mockCallPAram; 
    }
   public HTTPResponse respond(HTTPRequest req) {
        httpResponse response = new HttpResponse();
        response.setStatusCode(200);
        response.setHeader('Content-Type', 'application/json');
       String json= '';
        if(this.mockParam == 'NoMembers'){
        json ='{"Mode": "Intake","ErrorCode": "","IndividualId": 919216847,"Applicationnumber": 600002010,"ViewName": "SSP_APP_HHMemberDetails","MatchStatus": "Full Match","CaseNumber": null,"Payload": {"SSP_Member__c": [{"NationalityCode__c": null,"FirstName__c": "Rahul","MiddleInitial__c": "","LastName__c": "Kumar","Alias_First_Name__c": null,"Alias_Last_Name__c": null,"SuffixCode__c": null,"BirthDate__c": "1988-06-01","SSN__c": null,"RaceCode__c": null,"EthnicityCode__c": null,"DeathDate__c": null,"GenderCode__c": "M","NoReasonSSNCode__c": null,"IndividualId__c": 919216847,"MCIId__c": null,"SSNVerified__c": false,"PrisonerConfinementDate__c": null,"DeathConfirmationCode__c": null,"IsUSCitizenToggle__c": "N","InmateStatusIndicator__c": false,"LifeTimeQuarterQuantity__c": null,"IsDateOfBirthValidated__c": false,"IsUSCitizenValidated__c": false,"IsDateOfDeathValidated__c": false,"PseudoSSN__c": null,"CitizenShipVerificationCode__c": null,"SSNVerificationCode__c": null,"IsFileCleared__c": false,"IsIntendToResideToggle__c": null,"IsMilitaryMemberToggle__c": null,"IsHispanicLatinoSpanishToggle__c": null,"DeathDateVerificationCode__c": null},{"NationalityCode__c": null,"FirstName__c": "Rahul","MiddleInitial__c": "","LastName__c": "Kumar","Alias_First_Name__c": null,"Alias_Last_Name__c": null,"SuffixCode__c": null,"BirthDate__c": "1988-06-01","SSN__c": null,"RaceCode__c": null,"EthnicityCode__c": null,"DeathDate__c": null,"GenderCode__c": "M","NoReasonSSNCode__c": null,"IndividualId__c": 919216747,"MCIId__c": null,"SSNVerified__c": false,"PrisonerConfinementDate__c": null,"DeathConfirmationCode__c": null,"IsUSCitizenToggle__c": "N","InmateStatusIndicator__c": false,"LifeTimeQuarterQuantity__c": null,"IsDateOfBirthValidated__c": false,"IsUSCitizenValidated__c": false,"IsDateOfDeathValidated__c": false,"PseudoSSN__c": null,"CitizenShipVerificationCode__c": null,"SSNVerificationCode__c": null,"IsFileCleared__c": false,"IsIntendToResideToggle__c": null,"IsMilitaryMemberToggle__c": null,"IsHispanicLatinoSpanishToggle__c": null,"DeathDateVerificationCode__c": null}],"SSP_ApplicationIndividual__c": [{"IsActiveIEESCasePresent__c": false,"SSP_Member__c": 919216847,"BlockedCaseNumber__c": "1234","IsHeadOfHousehold__c": true,"isApplicationBlocked__c": false}],"SSP_Application__c": [{"HasConvictedCrimeToggle__c": null}]},"IsApplicationBlocked": false,"BlockedCaseNumber": "1234","errorData": {"errorCode": null,"errorDescription": null}}';
         }else if(this.mockParam == 'NoMatch'){
            json ='{"Mode": "Intake","ErrorCode": "","IndividualId": 919216847,"Applicationnumber": 600002010,"ViewName": "SSP_APP_HHMemberDetails","MatchStatus": "No Match","CaseNumber": null,"Payload": {"SSP_Member__c": [{"NationalityCode__c": null,"FirstName__c": "Rahul","MiddleInitial__c": "","LastName__c": "Kumar","Alias_First_Name__c": null,"Alias_Last_Name__c": null,"SuffixCode__c": null,"BirthDate__c": "1988-06-01","SSN__c": null,"RaceCode__c": null,"EthnicityCode__c": null,"DeathDate__c": null,"GenderCode__c": "M","NoReasonSSNCode__c": null,"IndividualId__c": 919216847,"MCIId__c": null,"SSNVerified__c": false,"PrisonerConfinementDate__c": null,"DeathConfirmationCode__c": null,"IsUSCitizenToggle__c": "N","InmateStatusIndicator__c": false,"LifeTimeQuarterQuantity__c": null,"IsDateOfBirthValidated__c": false,"IsUSCitizenValidated__c": false,"IsDateOfDeathValidated__c": false,"PseudoSSN__c": null,"CitizenShipVerificationCode__c": null,"SSNVerificationCode__c": null,"IsFileCleared__c": false,"IsIntendToResideToggle__c": null,"IsMilitaryMemberToggle__c": null,"IsHispanicLatinoSpanishToggle__c": null,"DeathDateVerificationCode__c": null},{"NationalityCode__c": null,"FirstName__c": "Rahul","MiddleInitial__c": "","LastName__c": "Kumar","Alias_First_Name__c": null,"Alias_Last_Name__c": null,"SuffixCode__c": null,"BirthDate__c": "1988-06-01","SSN__c": null,"RaceCode__c": null,"EthnicityCode__c": null,"DeathDate__c": null,"GenderCode__c": "M","NoReasonSSNCode__c": null,"IndividualId__c": 919216747,"MCIId__c": null,"SSNVerified__c": false,"PrisonerConfinementDate__c": null,"DeathConfirmationCode__c": null,"IsUSCitizenToggle__c": "N","InmateStatusIndicator__c": false,"LifeTimeQuarterQuantity__c": null,"IsDateOfBirthValidated__c": false,"IsUSCitizenValidated__c": false,"IsDateOfDeathValidated__c": false,"PseudoSSN__c": null,"CitizenShipVerificationCode__c": null,"SSNVerificationCode__c": null,"IsFileCleared__c": false,"IsIntendToResideToggle__c": null,"IsMilitaryMemberToggle__c": null,"IsHispanicLatinoSpanishToggle__c": null,"DeathDateVerificationCode__c": null}],"SSP_ApplicationIndividual__c": [{"IsActiveIEESCasePresent__c": false,"SSP_Member__c": 919216847,"BlockedCaseNumber__c": "1234","IsHeadOfHousehold__c": true,"isApplicationBlocked__c": false}],"SSP_Application__c": [{"HasConvictedCrimeToggle__c": null}]},"IsApplicationBlocked": false,"BlockedCaseNumber": "1234","errorData": {"errorCode": null,"errorDescription": null}}';
         }else if(this.mockParam == 'ErrorCode'){
            json ='{"Mode": "Intake","ErrorCode": "ERRSSN001","IndividualId": 919216847,"Applicationnumber": 600002010,"ViewName": "SSP_APP_HHMemberDetails","MatchStatus": "","CaseNumber": null,"Payload": {"SSP_Member__c": [{"NationalityCode__c": null,"FirstName__c": "Rahul","MiddleInitial__c": "","LastName__c": "Kumar","Alias_First_Name__c": null,"Alias_Last_Name__c": null,"SuffixCode__c": null,"BirthDate__c": "1988-06-01","SSN__c": null,"RaceCode__c": null,"EthnicityCode__c": null,"DeathDate__c": null,"GenderCode__c": "M","NoReasonSSNCode__c": null,"IndividualId__c": 919216847,"MCIId__c": null,"SSNVerified__c": false,"PrisonerConfinementDate__c": null,"DeathConfirmationCode__c": null,"IsUSCitizenToggle__c": "N","InmateStatusIndicator__c": false,"LifeTimeQuarterQuantity__c": null,"IsDateOfBirthValidated__c": false,"IsUSCitizenValidated__c": false,"IsDateOfDeathValidated__c": false,"PseudoSSN__c": null,"CitizenShipVerificationCode__c": null,"SSNVerificationCode__c": null,"IsFileCleared__c": false,"IsIntendToResideToggle__c": null,"IsMilitaryMemberToggle__c": null,"IsHispanicLatinoSpanishToggle__c": null,"DeathDateVerificationCode__c": null},{"NationalityCode__c": null,"FirstName__c": "Rahul","MiddleInitial__c": "","LastName__c": "Kumar","Alias_First_Name__c": null,"Alias_Last_Name__c": null,"SuffixCode__c": null,"BirthDate__c": "1988-06-01","SSN__c": null,"RaceCode__c": null,"EthnicityCode__c": null,"DeathDate__c": null,"GenderCode__c": "M","NoReasonSSNCode__c": null,"IndividualId__c": 919216747,"MCIId__c": null,"SSNVerified__c": false,"PrisonerConfinementDate__c": null,"DeathConfirmationCode__c": null,"IsUSCitizenToggle__c": "N","InmateStatusIndicator__c": false,"LifeTimeQuarterQuantity__c": null,"IsDateOfBirthValidated__c": false,"IsUSCitizenValidated__c": false,"IsDateOfDeathValidated__c": false,"PseudoSSN__c": null,"CitizenShipVerificationCode__c": null,"SSNVerificationCode__c": null,"IsFileCleared__c": false,"IsIntendToResideToggle__c": null,"IsMilitaryMemberToggle__c": null,"IsHispanicLatinoSpanishToggle__c": null,"DeathDateVerificationCode__c": null}],"SSP_ApplicationIndividual__c": [{"IsActiveIEESCasePresent__c": false,"SSP_Member__c": 919216847,"BlockedCaseNumber__c": "1234","IsHeadOfHousehold__c": true,"isApplicationBlocked__c": true }],"SSP_Application__c": [{"HasConvictedCrimeToggle__c": null}]},"IsApplicationBlocked": false,"BlockedCaseNumber": "1234","errorData": {"errorCode": null,"errorDescription": null}}';
         }
       else if(this.mockParam == 'FileClearedMember'){
            json ='{"Mode":"Intake","IndividualId":999038366,"Applicationnumber":600003096,"ViewName":"SSP_APP_HHMemberDetails","MatchStatus":null,"CaseNumber":null,"isMemberFileCleared":true,"Payload":{"SSP_Member__c":[{"NationalityCode__c":null,"FirstName__c":"Chaloe","MiddleInitial__c":"","LastName__c":"Kumar","Alias_First_Name__c":null,"Alias_Last_Name__c":null,"SuffixCode__c":null,"BirthDate__c":"1992-05-12","SSN__c":"786787657","RaceCode__c":null,"EthnicityCode__c":null,"DeathDate__c":null,"GenderCode__c":"M","NoReasonSSNCode__c":null,"IndividualId__c":999038366,"MCIId__c":null,"SSNVerified__c":true,"PrisonerConfinementDate__c":null,"DeathConfirmationCode__c":"Unconfirmed","IsUSCitizenToggle__c":"N","InmateStatusIndicator__c":false,"LifeTimeQuarterQuantity__c":null,"IsDateOfBirthValidated__c":true,"IsUSCitizenValidated__c":true,"IsDateOfDeathValidated__c":false,"PseudoSSN__c":null,"CitizenShipVerificationCode__c":"Y","SSNVerificationCode__c":"Y","IsFileCleared__c":false,"IsIntendToResideToggle__c":null,"IsMilitaryMemberToggle__c":null,"IsHispanicLatinoSpanishToggle__c":null,"DeathDateVerificationCode__c":null}],"SSP_ApplicationIndividual__c":[{"IsActiveIEESCasePresent__c":false,"SSP_Member__c":999038366,"BlockedCaseNumber__c":null,"IsHeadOfHousehold__c":false,"isApplicationBlocked__c":false}],"SSP_Application__c":[{"HasConvictedCrimeToggle__c":"N"}]},"IsApplicationBlocked":false,"BlockedCaseNumber":null,"errorData":{"errorCode":null,"errorDescription":null}}}';
         }
       else if(this.mockParam == 'FullMatch_1Member'){
            json ='{"Mode":"Intake","IndividualId":999038366,"Applicationnumber":600003096,"ViewName":"SSP_APP_HHMemberDetails","MatchStatus":"Full Match","CaseNumber":null,"isMemberFileCleared":false,"Payload":{"SSP_Member__c":[{"NationalityCode__c":null,"FirstName__c":"Chaloe","MiddleInitial__c":"","LastName__c":"Kumar","Alias_First_Name__c":null,"Alias_Last_Name__c":null,"SuffixCode__c":null,"BirthDate__c":"1992-05-12","SSN__c":"786787657","RaceCode__c":null,"EthnicityCode__c":null,"DeathDate__c":null,"GenderCode__c":"M","NoReasonSSNCode__c":null,"IndividualId__c":999038366,"MCIId__c":null,"SSNVerified__c":true,"PrisonerConfinementDate__c":null,"DeathConfirmationCode__c":"Unconfirmed","IsUSCitizenToggle__c":"N","InmateStatusIndicator__c":false,"LifeTimeQuarterQuantity__c":null,"IsDateOfBirthValidated__c":true,"IsUSCitizenValidated__c":true,"IsDateOfDeathValidated__c":false,"PseudoSSN__c":null,"CitizenShipVerificationCode__c":"Y","SSNVerificationCode__c":"Y","IsFileCleared__c":false,"IsIntendToResideToggle__c":null,"IsMilitaryMemberToggle__c":null,"IsHispanicLatinoSpanishToggle__c":null,"DeathDateVerificationCode__c":null}],"SSP_ApplicationIndividual__c":[{"IsActiveIEESCasePresent__c":false,"SSP_Member__c":999038366,"BlockedCaseNumber__c":null,"IsHeadOfHousehold__c":false,"isApplicationBlocked__c":false}],"SSP_Application__c":[{"HasConvictedCrimeToggle__c":"N"}]},"IsApplicationBlocked":false,"BlockedCaseNumber":null,"errorData":{"errorCode":null,"errorDescription":null}}}';
         }
       else if(this.mockParam == 'FullMatch_1MemberHoh'){
            json ='{"Mode":"Intake","IndividualId":999038366,"Applicationnumber":600003096,"ViewName":"SSP_APP_HHMemberDetails","MatchStatus":"Full Match","CaseNumber":null,"isMemberFileCleared":false,"Payload":{"SSP_Member__c":[{"NationalityCode__c":null,"FirstName__c":"Chaloe","MiddleInitial__c":"","LastName__c":"Kumar","Alias_First_Name__c":null,"Alias_Last_Name__c":null,"SuffixCode__c":null,"BirthDate__c":"1992-05-12","SSN__c":"786787657","RaceCode__c":null,"EthnicityCode__c":null,"DeathDate__c":null,"GenderCode__c":"M","NoReasonSSNCode__c":null,"IndividualId__c":999038366,"MCIId__c":null,"SSNVerified__c":true,"PrisonerConfinementDate__c":null,"DeathConfirmationCode__c":"Unconfirmed","IsUSCitizenToggle__c":"N","InmateStatusIndicator__c":false,"LifeTimeQuarterQuantity__c":null,"IsDateOfBirthValidated__c":true,"IsUSCitizenValidated__c":true,"IsDateOfDeathValidated__c":false,"PseudoSSN__c":null,"CitizenShipVerificationCode__c":"Y","SSNVerificationCode__c":"Y","IsFileCleared__c":false,"IsIntendToResideToggle__c":null,"IsMilitaryMemberToggle__c":null,"IsHispanicLatinoSpanishToggle__c":null,"DeathDateVerificationCode__c":null}],"SSP_ApplicationIndividual__c":[{"IsActiveIEESCasePresent__c":false,"SSP_Member__c":999038366,"BlockedCaseNumber__c":null,"IsHeadOfHousehold__c":True,"isApplicationBlocked__c":false}],"SSP_Application__c":[{"HasConvictedCrimeToggle__c":"N"}]},"IsApplicationBlocked":false,"BlockedCaseNumber":null,"errorData":{"errorCode":null,"errorDescription":null}}}';
         }
       else if(this.mockParam == 'FullMatch_MoreThan1Member'){
           json ='{"Mode":"Intake","IndividualId":100000632,"Applicationnumber":600006314,"ViewName":"SSP_APP_HHMemberDetails","MatchStatus":"Full Match","CaseNumber":null,"isMemberFileCleared":false,"Payload":{"SSP_Member__c":[{"NationalityCode__c":null,"FirstName__c":"EYFULL","MiddleInitial__c":null,"LastName__c":"JULHYBVUHD","Alias_First_Name__c":null,"Alias_Last_Name__c":null,"SuffixCode__c":null,"BirthDate__c":"1955-07-18","SSN__c":"072581785","RaceCode__c":"W","EthnicityCode__c":null,"DeathDate__c":null,"GenderCode__c":"F","NoReasonSSNCode__c":null,"IndividualId__c":100000632,"MCIId__c":"500828","SSNVerified__c":true,"PrisonerConfinementDate__c":null,"DeathConfirmationCode__c":null,"IsUSCitizenToggle__c":"Y","InmateStatusIndicator__c":false,"LifeTimeQuarterQuantity__c":null,"IsDateOfBirthValidated__c":true,"IsUSCitizenValidated__c":true,"IsDateOfDeathValidated__c":true,"PseudoSSN__c":null,"CitizenShipVerificationCode__c":null,"SSNVerificationCode__c":null,"IsFileCleared__c":true,"IsIntendToResideToggle__c":"Y","IsMilitaryMemberToggle__c":"N","IsHispanicLatinoSpanishToggle__c":"N","DeathDateVerificationCode__c":null},{"NationalityCode__c":null,"FirstName__c":"ELECS","MiddleInitial__c":null,"LastName__c":"WXPPIYKEBVUEH","Alias_First_Name__c":null,"Alias_Last_Name__c":null,"SuffixCode__c":null,"BirthDate__c":"1970-08-03","SSN__c":"070516367","RaceCode__c":"W","EthnicityCode__c":null,"DeathDate__c":null,"GenderCode__c":"M","NoReasonSSNCode__c":null,"IndividualId__c":100001097,"MCIId__c":"75137","SSNVerified__c":true,"PrisonerConfinementDate__c":null,"DeathConfirmationCode__c":null,"IsUSCitizenToggle__c":"Y","InmateStatusIndicator__c":false,"LifeTimeQuarterQuantity__c":null,"IsDateOfBirthValidated__c":true,"IsUSCitizenValidated__c":true,"IsDateOfDeathValidated__c":true,"PseudoSSN__c":null,"CitizenShipVerificationCode__c":null,"SSNVerificationCode__c":null,"IsFileCleared__c":true,"IsIntendToResideToggle__c":"Y","IsMilitaryMemberToggle__c":"N","IsHispanicLatinoSpanishToggle__c":"N","DeathDateVerificationCode__c":null}],"SSP_ApplicationIndividual__c":[{"IsActiveIEESCasePresent__c":true,"SSP_Member__c":100000632,"BlockedCaseNumber__c":"110000195","IsHeadOfHousehold__c":true,"isApplicationBlocked__c":false},{"IsActiveIEESCasePresent__c":true,"SSP_Member__c":100001097,"BlockedCaseNumber__c":"110000195","IsHeadOfHousehold__c":false,"isApplicationBlocked__c":false}],"SSP_Application__c":[{"HasConvictedCrimeToggle__c":null}]},"IsApplicationBlocked":false,"BlockedCaseNumber":"110000195","errorData":{"errorCode":null,"errorDescription":null}}';
         }
       else if(this.mockParam == 'NoData'){
           json ='{}';
         }
        response.setBody(json);
        
        return Response;
    }
 }
     
    
}