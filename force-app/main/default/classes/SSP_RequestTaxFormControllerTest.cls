@isTest
public with sharing class SSP_RequestTaxFormControllerTest {
    @testSetup
    public static void setupData() {
        Cache.SessionPartition sessionPart = Cache.Session.getPartition(SSP_GlobalConstants.CACHE_PARTITION_NAME);
        sessionPart.put(SSP_GlobalConstants.INDIVIDUAL_ID, '123456');

        SSPIntegrationEndpoints__c endpoint = new SSPIntegrationEndpoints__c();
        endpoint.name = '1095B Portal';
        endpoint.URL__c = 'https://stu3.form1095.ky.gov/Anonymous/Form1095Receiver';
        upsert endpoint;
        //Create Custom settings 
        LOG_LogMessageSettings__c log = new LOG_LogMessageSettings__c();
        log.Name = 'Default_AutoGenerated';
        log.LOG_Debug__c = true;
        log.LOG_Error__c = true;
        log.LOG_Log_Purge__c = 365;
        log.LOG_Info__c = true;
        log.LOG_Warning__c = true;
        insert log;
    }

    @isTest
    public static void getScreenDataTest1() {
        Test.setMock(HttpCalloutMock.class, new SSP_RequestTaxFormControllerTest.SSP_TaxForms_HttpMockTest());
        Test.startTest();
        SSP_RequestTaxFormController.getScreenData(null);
        Test.stopTest();
    }

    @isTest
    public static void getScreenDataTest2() {
        Test.startTest();
        SSP_RequestTaxFormController.getScreenData(null);
        Test.stopTest();
    }

    @isTest
    public static void fireMyInfoCalloutTest1() {
        Test.setMock(HttpCalloutMock.class, new SSP_RequestTaxFormControllerTest.SSP_UpdateContact_HttpMockTest());
        Test.startTest();
        SSP_RequestTaxFormController.fireMyInfoCallout('-');
        Test.stopTest();
    }

    @isTest
    public static void fireMyInfoCalloutTest2() {
        Test.startTest();
        SSP_RequestTaxFormController.fireMyInfoCallout('-');
        Test.stopTest();
    }

    @isTest
    public static void taxCorrespondenceTest1() {
        Test.setMock(HttpCalloutMock.class, new SSP_RequestTaxFormControllerTest.SSP_Correspondence_HttpMockTest());
        Test.startTest();
        SSP_RequestTaxFormController.taxFormCorrespondenceService('-', '2000');
        Test.stopTest();
    }

    @isTest
    public static void taxCorrespondenceTest2() {
        Test.startTest();
        SSP_RequestTaxFormController.taxFormCorrespondenceService('-', '2000');
        Test.stopTest();
    }

    public class SSP_TaxForms_HttpMockTest implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            String body = '{"AckResponse":null,"Payload":{"ReqTaxFormsEnrollmentDetail":null,"ReqTaxFormsYears":[{"Year":"2015"},{"Year":"2016"}]},"role":"Citizen_Individual","miscelleanousParameter":"","applicationID":"","mode":"","programCode":"","individualIds":"","primaryApplicantIndividualId":"850000217","caseNumber":"0","viewName":"TaxForms1095AInformation"}';
            HttpResponse res = new HttpResponse();
            res.setHeader('Content-Type', 'application/json');
            res.setBody(body);
            res.setStatusCode(200);
            return res;
        }
    }

    public class SSP_Correspondence_HttpMockTest implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            String body = '';
            HttpResponse res = new HttpResponse();
            res.setHeader('Content-Type', 'application/json');
            res.setBody(body);
            res.setStatusCode(200);
            return res;
        }
    }
    
    public class SSP_UpdateContact_HttpMockTest implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            String body = '{"status":true,"AckResponse":{"AckResponseCode":null,"AckResponseDescription":null}}';
            HttpResponse res = new HttpResponse();
            res.setHeader('Content-Type', 'application/json');
            res.setBody(body);
            res.setStatusCode(200);
            return res;
        }
    }
}
