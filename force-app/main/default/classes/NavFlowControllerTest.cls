@isTest
public class NavFlowControllerTest {
    
    @TestSetup
    public static void setupMethod(){
          	SSP_TestDataFactory.setupTestData();
        
        List<Account> lstAcc = SSP_TestDataFactory.createAccounts(1, false);
        lstAcc[0].Name = 'HealthSelectionCtrl';
        lstAcc = ESAPI.accessController().insertAsUser(lstAcc, SSP_Utility.getFieldsNamesList (lstAcc)).getInsertedObjects();
        
        List<Contact> lstCon = (List<Contact>)SSP_Utility.fetchRecords(new Map<String, String>{'objectName'=>'Contact','operator'=>'AND'}, new Set<String>{'Id', 'FirstName', 'LastName'}, new Map<String, String>{'FirstName'=>'Citizen','LastName'=>'User'});
        
        AccountContactRelation acr = new AccountContactRelation(); 
        acr.Accountid = lstAcc[0].Id;
        acr.Contactid = lstCon[0].Id;
        acr.IsActive = true;
        acr = (AccountContactRelation)ESAPI.accessController().insertAsUser(new List<AccountContactRelation>{acr}, SSP_Utility.getFieldsNamesList (new List<AccountContactRelation>{acr})).getInsertedObjects()[0];       
        
        List<SSP_Application__c> lstAppln = SSP_TestDataFactory.createSSPApplications(1, false);
        lstAppln[0].Account__c=lstAcc[0].Id;        
        lstAppln[0].Contact__c = lstCon[0].Id;
        lstAppln= ESAPI.accessController().insertAsUser(lstAppln, SSP_Utility.getFieldsNamesList (lstAppln)).getInsertedObjects();
        
        List<SSP_Member__c> lstMem = SSP_TestDataFactory.createSSPMembers(1, false);
        lstMem[0].contact__c=lstCon[0].Id;  
        lstMem[0].PrimaryPhoneExtension__c ='7348789790';
        lstMem[0].PrimaryPhoneNumber__c ='8983838290';
        lstMem = ESAPI.accessController().insertAsUser(lstMem, SSP_Utility.getFieldsNamesList (lstMem)).getInsertedObjects();
        
        List<SSP_ApplicationIndividual__c> lstAppInd = SSP_TestDataFactory.createApplicationIndividuals(1, false); 
        lstAppInd[0].SSP_Application__c=lstAppln[0].Id;
        lstAppInd[0].SSP_Member__c=lstMem[0].Id;
        lstAppInd = ESAPI.accessController().insertAsUser(lstAppInd, SSP_Utility.getFieldsNamesList (lstAppInd)).getInsertedObjects();        
     
        NavFlowStatus__c nfs = new NavFlowStatus__c();
        nfs.NavFlowName__c = 'ContactInformation';
        nfs.FlowPageStatus__c = 'CC';
        nfs.FlowDupStatus__c = 'CC';
        nfs.SSPApplication__c = lstAppln[0].Id;
        nfs.SSP_Application__c = lstAppln[0].Id;
        nfs.SSP_Member__c = lstMem[0].Id;
        nfs.Member__c = lstMem[0].Id;
        nfs.Contact__c = lstCon[0].Id;
        insert nfs;                    
        
        //Create Custom settings 
        LOG_LogMessageSettings__c log = new LOG_LogMessageSettings__c();
        log.Name = 'Default_AutoGenerated';
        log.LOG_Debug__c = true;
        log.LOG_Error__c = true;
        log.LOG_Log_Purge__c = 365;
        log.LOG_Info__c = true;
        log.LOG_Warning__c = true;
        insert log;
        
    }
    
    @isTest
    public static void LoadFlowTest(){
        User citizen  = getUserDetails();
        System.runAs(citizen){            
            SSP_Member__c member = [Select Id, Name FROM SSP_Member__c];            
            SSP_Application__c application = [SELECT Id FROM SSP_Application__c LIMIT 1];            
            NavFlowStatus__c nfs = [SELECT Id FROM NavFlowStatus__c LIMIT 1];
           	String mode = 'Intake';
        	Test.startTest();
            NavFlowController.execute('loadFlow',citizen.contactId,'ContactInformation','','','','',null,null,new List<String>(),application.Id, member.Id,mode,new List<String>());
            Test.stopTest();
        }
    }
    
   @isTest
    public static void NextTest(){
        User citizen  = getUserDetails();
        System.runAs(citizen){
            SSP_Member__c member = [Select Id FROM SSP_Member__c LIMIT 1];
            SSP_Application__c application = [SELECT Id FROM SSP_Application__c LIMIT 1];
            NavFlowStatus__c nfs = [SELECT Id FROM NavFlowStatus__c LIMIT 1];
            //Create custom metadata
       		List<NavFlowPageConfig__mdt> flowPageConfigList = getNavFlowPageConfig ('ContactInformation');            
            String curNavFlowPageConfigId = (flowPageConfigList != null && !flowPageConfigList.isEmpty()) ? flowPageConfigList[0].Id : '';            
            String mode = 'Intake';
           	Test.startTest();
               NavFlowController.execute('next',citizen.contactId,'ContactInformation',curNavFlowPageConfigId,'','','',null,new List<String>(),new List<String>(),application.Id, member.Id,mode,new List<String>());
            Test.stopTest();
        }
    }
    
    @isTest
    public static void backTest(){
        User citizen  = getUserDetails();
        System.runAs(citizen){
            SSP_Member__c member = [Select Id FROM SSP_Member__c LIMIT 1];
            SSP_Application__c application = [SELECT Id FROM SSP_Application__c LIMIT 1];
            NavFlowStatus__c nfs = [SELECT Id FROM NavFlowStatus__c LIMIT 1];
            //Create custom metadata
            List<NavFlowPageConfig__mdt> flowPageConfigList = getNavFlowPageConfig ('ContactInformation');
            String curNavFlowPageConfigId = (flowPageConfigList != null && !flowPageConfigList.isEmpty()) ? flowPageConfigList[1].Id : '';
            String navFlowStatusId = nfs.Id;            
            String mode = 'Intake';
           	Test.startTest();
               NavFlowController.execute('back',citizen.contactId,'ContactInformation',curNavFlowPageConfigId,navFlowStatusId,application.Id,'',null,new List<String>(),new List<String>(),application.Id, member.Id,mode,new List<String>());
            Test.stopTest();
        }
    }        
    
    @isTest
    public static void finishTest(){
        User citizen  = getUserDetails();
        System.runAs(citizen){
            SSP_Member__c member = [Select Id FROM SSP_Member__c LIMIT 1];
            SSP_Application__c application = [SELECT Id FROM SSP_Application__c LIMIT 1];
            NavFlowStatus__c nfs = [SELECT Id FROM NavFlowStatus__c LIMIT 1];
            //Create custom metadata
       		List<NavFlowPageConfig__mdt> flowPageConfigList = getNavFlowPageConfig ('ContactInformation');            
            String curNavFlowPageConfigId = (flowPageConfigList != null && !flowPageConfigList.isEmpty()) ? flowPageConfigList[0].Id : '';
            String navFlowStatusId = nfs.Id;            
            String mode = 'Intake';
           	Test.startTest();
            	NavFlowController.execute('finish',citizen.contactId,'ContactInformation',curNavFlowPageConfigId,navFlowStatusId,application.Id,'',null,new List<String>(),new List<String>(),application.Id, member.Id,mode,new List<String>());
            Test.stopTest();
        }
    }    

	@isTest
    public static void gotoPageTest(){
        User citizen  = getUserDetails();
        System.runAs(citizen){
            SSP_Member__c member = [Select Id FROM SSP_Member__c LIMIT 1];
            SSP_Application__c application = [SELECT Id FROM SSP_Application__c LIMIT 1];
            NavFlowStatus__c nfs = [SELECT Id FROM NavFlowStatus__c LIMIT 1];
            //Create custom metadata
       		List<NavFlowPageConfig__mdt> flowPageConfigList = getNavFlowPageConfig ('ContactInformation');            
            String curNavFlowPageConfigId = (flowPageConfigList != null && !flowPageConfigList.isEmpty()) ? flowPageConfigList[1].Id : '';
            String navFlowStatusId = nfs.Id;
            String goToPageConfigId = (flowPageConfigList != null && !flowPageConfigList.isEmpty()) ? flowPageConfigList[0].Id : '';            
            String mode = 'Intake';
           	Test.startTest();
            	NavFlowController.execute('goToPage',citizen.contactId,'ContactInformation',curNavFlowPageConfigId,navFlowStatusId,application.Id,goToPageConfigId,null,new List<String>(),new List<String>(),application.Id, member.Id,mode,new List<String>());
            Test.stopTest();
        }
    }        
               
    @isTest
    public static void memberDetailsTest(){
        User citizen  = getUserDetails();
        System.runAs(citizen){
            SSP_Member__c member = [Select Id FROM SSP_Member__c];
           	Test.startTest();
            	NavFlowController.fetchMemberDetails(member.Id);
            	system.assert(member != null);
            Test.stopTest();
        }
    }
	
    @isTest
    public static void resetDriverTest(){
        User citizen  = getUserDetails();
        System.runAs(citizen){
            SSP_Application__c application = [SELECT Id FROM SSP_Application__c LIMIT 1];
           	Test.startTest();
            NavFlowController.resetStatus(application.Id,'ContactInformation');     
            NavFlowStatus__c flowStat = [SELECT Id, FlowPageStatus__c FROM NavFlowStatus__c WHERE SSPApplication__c = : application.Id];            
            system.assert(flowStat.FlowPageStatus__c.contains('N'));
            Test.stopTest();
        }
    }
    
    @isTest
    public static void helpContentTest(){
        User citizen  = getUserDetails();
        System.runAs(citizen){
            SSP_Application__c application = [SELECT Id FROM SSP_Application__c LIMIT 1];
			SSP_LightningResponse response = new SSP_LightningResponse();     
            List<NavFlowPageConfig__mdt> flowPageConfigList = getNavFlowPageConfig ('ContactInformation');
           	Test.startTest();            
            response = NavFlowController.fetchHelpContent(flowPageConfigList[0].PageInfo__r.PageName__c,'ContactInformation');                 
            system.assert(response.bIsSuccess == null);
            Test.stopTest();
        }
    }
    
    @istest
    public static void memberDataTest(){
    	User citizen  = getUserDetails();
        System.runAs(citizen){
            SSP_Application__c application = [SELECT Id FROM SSP_Application__c LIMIT 1];
            SSP_Member__c member = [Select Id,IndividualId__c FROM SSP_Member__c LIMIT 1];
            SSP_ApplicationIndividual__c appIndividual = [SELECT Id,SSP_Application__c,SSP_Member__c, SSP_Member__r.FirstName__c, IsHeadOfHousehold__c,
                        					SSP_Member__r.LastName__c,SSP_Member__r.MiddleInitial__c,SSP_Member__r.SuffixCode__c
                                            FROM SSP_ApplicationIndividual__c];            
			SSP_LightningResponse response = new SSP_LightningResponse(); 
            Test.startTest();
            response = NavFlowController.getMemberData(application.Id,member.Id);
            Test.stopTest();
            system.assert(response != null);            
        }
    }
    
    @istest
    public static void getMemberDetailsTest (){
        User citizen  = getUserDetails();
        System.runAs(citizen){
            SSP_Application__c application = [SELECT Id, RAC_Selections__c FROM SSP_Application__c LIMIT 1];
            SSP_Member__c member = [SELECT Id, IndividualId__c FROM SSP_Member__c LIMIT 1];
            member.IndividualId__c = '1234';
            update member;            
            List<SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper> screenList = new List<SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper> ();
            SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper screenObj = new SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper();
            screenObj.flowName = 'ContactInformation';
            screenObj.screens = 'SSP_APP_Primary_Contact,SSP_APP_Primary_Address';
            screenList.add(screenObj);  
            SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper screenObj1 = new SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper();
            screenObj1.flowName = 'HouseholdInformation';
            screenObj1.screens = 'SSP_APP_Select_Health';
            screenList.add(screenObj1);  
            SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper screenObj2 = new SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper();
            screenObj2.flowName = 'SSP_APP_HHMembersSummary';
            screenObj2.screens = 'SSP_APP_HHMembersSummary';
            screenList.add(screenObj2);
            SSP_ReportChangeSelectionCtrl.RACSelectionWrapper wrapperObj = new SSP_ReportChangeSelectionCtrl.RACSelectionWrapper();
            wrapperObj.memberId = member.IndividualId__c;       
            wrapperObj.selectedScreens =screenList;            
            List<SSP_ReportChangeSelectionCtrl.RACSelectionWrapper> wrapperObjList = new List<SSP_ReportChangeSelectionCtrl.RACSelectionWrapper>();
            wrapperObjList.add(wrapperObj);
            application.RAC_Selections__c = JSON.serialize(wrapperObjList);
            update application;            
            SSP_ApplicationIndividual__c appIndiv = [SELECT Id, SSP_Member__r.FirstName__c, IsHeadOfHousehold__c,
                                                     SSP_Member__r.LastName__c, SSP_Application__r.RAC_Selections__c,SSP_Member__r.IndividualId__c
                                                     FROM SSP_ApplicationIndividual__c
                                                     WHERE SSP_Member__c =:member.Id AND SSP_Application__c = :application.Id limit 1];            
            String flowName = 'ContactInformation';
            List<String> screenListReturned = new List<String>();
            Test.startTest();
            screenListReturned = NavFlowController.getMemberDetails(application.Id,member.Id,flowName,'RAC');            
            Test.stopTest();
        }
    }
    
    @istest
    public static void getMemberDetailsTest1 (){
        User citizen  = getUserDetails();
        System.runAs(citizen){
            SSP_Application__c application = [SELECT Id, RAC_Selections__c FROM SSP_Application__c LIMIT 1];
            SSP_Member__c member = [SELECT Id, IndividualId__c FROM SSP_Member__c LIMIT 1];
            member.IndividualId__c = '1234';            
            update member;       
            SSP_ApplicationIndividual__c appIndividual = [SELECT Id, IsHeadOfHousehold__c FROM SSP_ApplicationIndividual__c];
            appIndividual.IsHeadOfHousehold__c = true;
            update appIndividual;
            List<SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper> screenList = new List<SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper> ();
            List<SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper> screenList1 = new List<SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper> ();
            List<SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper> screenList2 = new List<SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper> ();
            SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper screenObj = new SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper();
            screenObj.flowName = 'ContactInformation';
            screenObj.screens = 'SSP_APP_Primary_Contact,SSP_APP_Primary_Address';
            screenList.add(screenObj);  
            SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper screenObj1 = new SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper();
            screenObj1.flowName = 'HouseholdInformation';
            screenObj1.screens = 'SSP_APP_Select_Health';
            screenList1.add(screenObj1);  
            SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper screenObj2 = new SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper();
            screenObj2.flowName = 'SSP_APP_HHMembersSummary';
            screenObj2.screens = 'SSP_APP_HHMembersSummary';
            screenList2.add(screenObj2);
            SSP_ReportChangeSelectionCtrl.RACSelectionWrapper wrapperObj = new SSP_ReportChangeSelectionCtrl.RACSelectionWrapper();
            wrapperObj.memberId = member.IndividualId__c;       
            wrapperObj.selectedScreens =screenList;            
            SSP_ReportChangeSelectionCtrl.RACSelectionWrapper wrapperObj1 = new SSP_ReportChangeSelectionCtrl.RACSelectionWrapper();
            wrapperObj1.memberId = '2413';  
            wrapperObj1.selectedScreens = screenList1;
            SSP_ReportChangeSelectionCtrl.RACSelectionWrapper wrapperObj2 = new SSP_ReportChangeSelectionCtrl.RACSelectionWrapper();
            wrapperObj2.memberId = null;  
            wrapperObj2.selectedScreens = screenList2;
            List<SSP_ReportChangeSelectionCtrl.RACSelectionWrapper> wrapperObjList = new List<SSP_ReportChangeSelectionCtrl.RACSelectionWrapper>();
            wrapperObjList.add(wrapperObj);
            wrapperObjList.add(wrapperObj1);
            wrapperObjList.add(wrapperObj2);            
            application.RAC_Selections__c = JSON.serialize(wrapperObjList);
            update application;            
            SSP_ApplicationIndividual__c appIndiv = [SELECT Id, SSP_Member__r.FirstName__c, IsHeadOfHousehold__c,
                                                     SSP_Member__r.LastName__c, SSP_Application__r.RAC_Selections__c,SSP_Member__r.IndividualId__c
                                                     FROM SSP_ApplicationIndividual__c
                                                     WHERE SSP_Member__c =:member.Id AND SSP_Application__c = :application.Id limit 1];            
            String flowName = 'HouseholdInformation';
            List<String> screenListReturned = new List<String>();
            Test.startTest();
            screenListReturned = NavFlowController.getMemberDetails(application.Id,member.Id,flowName,'RAC');            
            Test.stopTest();
        }
    }
    
    @istest
    public static void getMemberDetailsTest2 (){
        User citizen  = getUserDetails();
        System.runAs(citizen){
            SSP_Application__c application = [SELECT Id, RAC_Selections__c FROM SSP_Application__c LIMIT 1];
            SSP_Member__c member = [SELECT Id, IndividualId__c FROM SSP_Member__c LIMIT 1];
            member.IndividualId__c = '1234';            
            update member;       
            SSP_ApplicationIndividual__c appIndividual = [SELECT Id, IsHeadOfHousehold__c FROM SSP_ApplicationIndividual__c];
            appIndividual.IsHeadOfHousehold__c = true;
            update appIndividual;
            List<SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper> screenList = new List<SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper> ();
            List<SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper> screenList1 = new List<SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper> ();
            List<SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper> screenList2 = new List<SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper> ();
            SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper screenObj2 = new SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper();
            screenObj2.flowName = 'SSP_APP_HHMembersSummary';
            screenObj2.screens = 'SSP_APP_HHMembersSummary';
            screenList2.add(screenObj2);            
            SSP_ReportChangeSelectionCtrl.RACSelectionWrapper wrapperObj2 = new SSP_ReportChangeSelectionCtrl.RACSelectionWrapper();
            wrapperObj2.memberId = null;  
            wrapperObj2.selectedScreens = screenList2;
            List<SSP_ReportChangeSelectionCtrl.RACSelectionWrapper> wrapperObjList = new List<SSP_ReportChangeSelectionCtrl.RACSelectionWrapper>();           
            wrapperObjList.add(wrapperObj2);            
            application.RAC_Selections__c = JSON.serialize(wrapperObjList);
            update application;            
            SSP_ApplicationIndividual__c appIndiv = [SELECT Id, SSP_Member__r.FirstName__c, IsHeadOfHousehold__c,
                                                     SSP_Member__r.LastName__c, SSP_Application__r.RAC_Selections__c,SSP_Member__r.IndividualId__c
                                                     FROM SSP_ApplicationIndividual__c
                                                     WHERE SSP_Member__c =:member.Id AND SSP_Application__c = :application.Id limit 1];            
            String flowName = 'HouseholdInformation';
            List<String> screenListReturned = new List<String>();
            Test.startTest();
            screenListReturned = NavFlowController.getMemberDetails(application.Id,member.Id,flowName,'RAC');            
            Test.stopTest();
        }
    }
    
    @istest
    public static void getOrStartRSSPDCTransactionTest (){
        User citizen  = getUserDetails();
        Contact con = [SELECT Id, IndividualId__c, DoesCaseExistForIndividual__c FROM Contact where Id = :citizen.ContactId];
        con.IndividualId__c = '1234';
        con.DoesCaseExistForIndividual__c = false;
        update con;
        System.runAs(citizen){
        	SSP_Application__c app = [SELECT Id, DCCaseNumber__c FROM SSP_Application__c];   
            String screenName = 'SSP_APP_Select_Health';
            String mode = 'Intake';
            Test.startTest();
            SSP_LightningResponse resp = NavFlowController.getOrStartRSSPDCTransaction(app.Id,screenName,mode);
            system.assert(resp != null);            
            Test.stopTest();
        }        
    }
    
    @istest
    public static void getOrStartRSSPDCTransactionTest1 (){
        User citizen  = getUserDetails();
        System.runAs(citizen){
        	SSP_Application__c app = [SELECT Id, DCCaseNumber__c FROM SSP_Application__c LIMIT 1];  
            SSP_Member__c member = [SELECT Id, Contact__c FROM SSP_Member__c LIMIT 1];
            Contact con = [SELECT Id, IndividualId__c, DoesCaseExistForIndividual__c FROM Contact where Id = :member.Contact__c];       
        	con.DoesCaseExistForIndividual__c = false;
        	con.IndividualId__c = null;
        	update con;
            String screenName = 'SSP_APP_Select_Health';
            String mode = 'Intake';
            Test.startTest();
            SSP_LightningResponse resp = NavFlowController.getOrStartRSSPDCTransaction(app.Id,screenName,mode);            
            Test.stopTest();
        }        
    }
    private static User fetchCitizenUser() {
        return ((List<User>)SSP_Utility.fetchRecords(new Map<String, String>{'objectName'=>'User'}, new Set<String>{'Id'}, new Map<String, String>{'UserName'=>'citizen@abc.xyz','limit'=>'1'}))[0];        
    }
    
    @istest
    public static void getOrStartRSSPDCTransactionTest2 (){
        User citizen  = getUserDetails();
        List<Account> lstAcc = SSP_TestDataFactory.createAccounts(1, false);
        	lstAcc[0].Name = 'HealthSelectionCtrl';
            insert lstAcc;
        AccountContactRelation acr = new AccountContactRelation(); 
        acr.Accountid = lstAcc[0].Id;
        acr.Contactid = citizen.ContactId;
        acr.IsActive = true;
		insert acr;     
        System.runAs(fetchCitizenUser()){
            SSP_Member__c objMem = [Select ID,Contact__c,Contact__r.IndividualId__c,Contact__r.DoesCaseExistForIndividual__c from SSP_Member__c LIMIT 1];
            SSP_Application__c objApp = [Select ID from SSP_Application__c LIMIT 1];
            SSP_ApplicationIndividual__c objAppInd = [Select ID, isHeadOfHouseHold__c from SSP_ApplicationIndividual__c where SSP_Application__c =:objApp.Id AND SSP_Member__c =:objMem.Id ];
            objAppind.isHeadOfHouseHold__c = true;
            update objAppInd;        	            
            Contact con = [SELECT Id, IndividualId__c, DoesCaseExistForIndividual__c FROM Contact where Id = :objMem.Contact__c];       
        	con.DoesCaseExistForIndividual__c = false;
        	con.IndividualId__c = null;
        	update con;
            String screenName = 'SSP_APP_Select_Health';
            String mode = 'Intake';
            Test.startTest();
            SSP_LightningResponse resp = NavFlowController.getOrStartRSSPDCTransaction(objApp.Id,screenName,mode);            
            Test.stopTest();
        }        
    }
    
    @istest
    public static void getOrStartRSSPDCTransactionTest3 (){
        User citizen  = getUserDetails();
        List<Account> lstAcc = SSP_TestDataFactory.createAccounts(1, false);
        lstAcc[0].Name = 'HealthSelectionCtrl';
        insert lstAcc;
        AccountContactRelation acr = new AccountContactRelation(); 
        acr.Accountid = lstAcc[0].Id;
        acr.Contactid = citizen.ContactId;
        acr.IsActive = true;
		insert acr;     
        System.runAs(fetchCitizenUser()){
            SSP_Member__c objMem = [Select ID,Contact__c,Contact__r.IndividualId__c,Contact__r.DoesCaseExistForIndividual__c from SSP_Member__c LIMIT 1];
            SSP_Application__c objApp = [Select ID from SSP_Application__c LIMIT 1];
            SSP_ApplicationIndividual__c objAppInd = [Select ID, isHeadOfHouseHold__c from SSP_ApplicationIndividual__c where SSP_Application__c =:objApp.Id AND SSP_Member__c =:objMem.Id ];
            objAppind.isHeadOfHouseHold__c = true;
            update objAppInd;        	            
            Contact con = [SELECT Id, IndividualId__c, DoesCaseExistForIndividual__c FROM Contact where Id = :objMem.Contact__c];       
        	con.DoesCaseExistForIndividual__c = true;
        	con.IndividualId__c = '1234';
        	update con;
            String screenName = 'SSP_APP_Select_Health';
            String mode = 'Intake';
            Test.startTest();
            SSP_LightningResponse resp = NavFlowController.getOrStartRSSPDCTransaction(objApp.Id,screenName,mode);            
            Test.stopTest();
        }        
    }
    
    @istest
    public static void startRSSPDCTransaction(){
        User citizen  = getUserDetails();
        System.runAs(citizen){
            SSP_Application__c app = [SELECT Id, DCCaseNumber__c FROM SSP_Application__c LIMIT 1];  
            String screenName = 'SSP_APP_Select_Health';
            String mode = 'Intake';
            String individualId = '1234';
            Test.startTest();
            Boolean result = NavFlowController.startRSSPDCTransaction(app.Id, screenName, individualId);
            Test.stopTest();
        }
    }
    
    @istest
    public static void startRSSPDCTransaction1(){
        User citizen  = getUserDetails();
        System.runAs(citizen){
            SSP_Application__c app = [SELECT Id, DCCaseNumber__c, ProgramsApplied__c FROM SSP_Application__c LIMIT 1];  
            Id CaseRecordTypeId = Schema.describeSObjects(New String[]{'SSP_Application__c'}).get(0).getRecordTypeInfosByDeveloperName().get('Case').getRecordTypeId();
            app.RecordTypeId = CaseRecordTypeId;
            app.DCCaseNumber__c = 100022387;
            update app;
            String screenName = 'SSP_APP_Select_Health';
            String mode = 'Intake';
            String individualId = '1234';
            Test.startTest();
            Boolean result = NavFlowController.startRSSPDCTransaction(app.Id, screenName, individualId);
            Test.stopTest();
        }
    }
    
    public static List<NavFlowPageConfig__mdt> getNavFlowPageConfig (String flowName){
        List<NavFlowPageConfig__mdt> flowPageConfigList = [SELECT Id, PageInfo__r.PageName__c FROM NavFlowPageConfig__mdt WHERE NavigationFlowDetail__r.FlowName__c =:flowName AND IsActive__c = true];            
        return flowPageConfigList;
    }

    public static User getUserDetails (){
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];        
        return citizen;
    }
    
    @istest
    public static void testContextData (){
        User citizen = getUserDetails();
        system.runAs(citizen){
            List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c FROM SSP_ApplicationIndividual__c LIMIT 1];
            NavFlowStatus__c navFlowStat = [SELECT Id, Name, FlowPageStatus__c, FlowDupStatus__c FROM NavFlowStatus__c LIMIT 1];
         	ContextData ctxData = SSP_TestDataFactory.createContextData (sspAppIndividualList);   
            ctxData.MemberId = !sspAppIndividualList.isEmpty() ? sspAppIndividualList[0].SSP_Member__c : null;
            ctxData.ApplicationId = !sspAppIndividualList.isEmpty() ? sspAppIndividualList[0].SSP_Application__c : null;
            ctxData.action = 'load';
            ctxData.flowName = SSP_GlobalConstants.CONTACT_INFORMATION;
            ctxData.navFlowStatusId = navFlowStat.Id;
            ctxData.navFlowStatusName = navFlowStat.Name; 
            ctxData.recordId = ctxData.ApplicationId;
            ctxData.contactId = citizen.ContactId;
            ctxData.curNavFlowPageConfigId = navFlowStat.Id;
            ctxData.curCompName = 'sspPrimaryIndividualContact';
            ctxData.curPageGroupName = 'abcd';
            ctxData.pageDispName = 'Contact Information';
            ctxData.flowDispName = 'Contact Information';
            ctxData.goToPageConfigId = navFlowStat.Id;
            ctxData.pageConfigIdToLoad = navFlowStat.Id;
            ctxData.SelectedScreen = new List<String>{'SSP_APP_Select_Health'};
            ctxData.SelectedPrograms = new List<String> {'MA;SS'};
            ctxData.strCurrPageName = 'SSP_APP_Select_Health';
            ctxData.currentPageNo = '1';
            ctxData.totalPageCount = '5';
            ctxData.isLastPage = true;
            ctxData.flowDuplicateStatus = navflowStat.FlowDupStatus__c;
            ctxData.noFlowStatusRRPages = new List<String>{'SSP_APP_Select_Health'};
            ctxData.loggedInUserName = 'Guest';
        }        
    }
}