/***************************************************************************************************
*   Type        :   Controller Class
*   Name        :   SSP_MessageCenterCtrlTest
*   Create By   :   Suresh
*   Create Date :   August-6-2020
*   Description :   Test class for SSP_MessageCenterCtrl.
*   Modification Log:
*   --------------------------------------------------------------------------------------
*    Developer                  Date                Description
*   --------------------------------------------------------------------------------------
*    Ajay Saini               JAN-2-2020             Initial Version
*
*****************************************************************************************************/
@isTest(seeAllData=false)
public class SSP_MessageCenterCtrlTest{
      @testSetup
    public static void initialDataSetup() {
        insert new LOG_LogMessageSettings__c(
            Name = RE_GlobalConstants.LOGS_DEFAULT_AUTOGENERATED,
            LOG_Debug__c = true,
            LOG_Error__c= true,
            LOG_Info__c = true,
            LOG_Warning__c = true,
            LOG_Log_Purge__c = 365
        );
        Id sCitizenAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Citizen');
        contact con1 = SSP_TestDataFactory.createContactRecord('Test', 'Test', 'test@tester.com', sCitizenAccRecTypeId, true);
        
        Id recordTypeIdNotification = Schema.SObjectType.SSP_Notifications__c.getRecordTypeInfosByName().get('SSP Announcement').getRecordTypeId();
            SSP_Notifications__c notifRec = new SSP_Notifications__c();
            notifRec.recordtypeid = recordTypeIdNotification;
            notifRec.recipientType__c = 'citizen';
            notifRec.recipientId__c = '999036538';
            notifRec.Status__c = 'Active';
            notifRec.MessageCreateDate__c  = System.now().addDays(-1).Date();
            notifRec.Expiry_Date__c = system.now().addDays(1).Date();
            //notifRec.Linked_Record_Id__c = String.valueOf(acr.Id);
            notifRec.notificationCode__c = 'SF-TOD-001';
            notifRec.Reminder_Date__c = Date.today();
        	//SSP_MessageCenterWithoutSharingService coverage
			notifRec.dmsDocumentId__c = '123';        	
            insert notifRec; 
        String sysNotificationRecTypeId = Schema.SObjectType.SSP_Notifications__c.getRecordTypeInfosByName().get('System Notification').getRecordTypeId();
            SSP_Notifications__c notifRec1 = new SSP_Notifications__c();
            notifRec1.recordtypeid = sysNotificationRecTypeId;
            notifRec1.recipientType__c = SSP_GlobalConstants.NOTIFICATION_CITIZEN;
            notifRec1.recipientId__c = '786756753';
            notifRec1.Status__c = SSP_GlobalConstants.NOTIFICATION_ACTIVE;
            notifRec1.notificationCode__c = 'SF-TOD-001';
            notifRec1.Reminder_Date__c = Date.today();
            insert notifRec1; 
        SSP_Notifications__c notifRec7 = new SSP_Notifications__c();
            notifRec7.recordtypeid = sysNotificationRecTypeId;
            notifRec7.recipientType__c = 'Assister';
            notifRec7.recipientId__c = '786756753';
            notifRec7.Status__c = SSP_GlobalConstants.NOTIFICATION_ACTIVE;
            notifRec7.notificationCode__c = 'SF-TOD-001';
            notifRec7.Reminder_Date__c = Date.today();
            insert notifRec7; 
        
        String noticeRecTypeId = Schema.SObjectType.SSP_Notifications__c.getRecordTypeInfosByName().get('Notice').getRecordTypeId();
        SSP_Notifications__c notifRec3 = new SSP_Notifications__c();
            notifRec3.recordtypeid = noticeRecTypeId;
            notifRec3.recipientType__c = SSP_GlobalConstants.NOTIFICATION_CITIZEN;
            notifRec3.recipientId__c = '786756753';
            notifRec3.Status__c = SSP_GlobalConstants.NOTIFICATION_ACTIVE;
            notifRec3.notificationCode__c = 'SF-TOD-001';
            notifRec3.Reminder_Date__c = Date.today();
            insert notifRec3; 
            SSP_Notifications__c notifRec5 = new SSP_Notifications__c();
            notifRec5.recordtypeid = noticeRecTypeId;
            notifRec5.recipientType__c = 'Assister';
            notifRec5.recipientId__c = '786756753';
            notifRec5.Status__c = SSP_GlobalConstants.NOTIFICATION_ACTIVE;
            notifRec5.notificationCode__c = 'SF-TOD-001';
            notifRec5.Reminder_Date__c = Date.today();
            insert notifRec5; 
        String toDoRecTypeId = Schema.SObjectType.SSP_Notifications__c.getRecordTypeInfosByName().get('To Do').getRecordTypeId();
        SSP_Notifications__c notifRec4 = new SSP_Notifications__c();
            notifRec4.recordtypeid = toDoRecTypeId;
            notifRec4.recipientType__c = SSP_GlobalConstants.NOTIFICATION_CITIZEN;
            notifRec4.recipientId__c = '786756753';
            notifRec4.Status__c = SSP_GlobalConstants.NOTIFICATION_ACTIVE;
            notifRec4.notificationCode__c = 'SF-TOD-001';
            notifRec4.Reminder_Date__c = Date.today();
            insert notifRec4; 
        SSP_Notifications__c notifRec6 = new SSP_Notifications__c();
            notifRec6.recordtypeid = toDoRecTypeId;
            notifRec6.recipientType__c = 'Assister';
            notifRec6.recipientId__c = '786756753';
            notifRec6.Status__c = SSP_GlobalConstants.NOTIFICATION_ACTIVE;
            notifRec6.notificationCode__c = 'SF-TOD-001';
            notifRec6.Reminder_Date__c = Date.today();
            insert notifRec6; 
    }
    public static User getPortalUser() {
        return SSP_TestDataFactory.createPortalUser();
    }
    public static User getPortalUser2() {
        return SSP_TestDataFactory.createPortalUser();
    }
    public static User getPortalUser3() {
        return SSP_TestDataFactory.createPortalUser();
    }
    @isTest
    public static void unitTest1() {
        user portalUser = getPortalUser();
        portalUser.ApplicableRoles__c = SSP_GlobalConstants.INDIVDIUDAL_AUTH_REP_ROLE_STRING;
        portalUser.SelectedRole__c = SSP_GlobalConstants.INDIVDIUDAL_AUTH_REP_ROLE_STRING;
        portalUser.ImpersonatedIndividualId__c ='Test123';
        update portalUser;
        System.runAs(portalUser){
            test.startTest();
            Contact_Mapping__c cm = new Contact_Mapping__c(Contact__c = portalUser.ContactId,Group_Id__c = 'Grp123',IEES_Id__c = 786756753);
            insert cm;
            SSP_LightningResponse rep = SSP_MessageCenterCtrl.initMessageCenter('MessageCenter');
            System.debug(':::User::'+portalUser);
            test.stopTest();
        }
    }
    @isTest
    public static void unitTest2() {
        user portalUser = getPortalUser2();
        portalUser.ApplicableRoles__c = SSP_GlobalConstants.CITIZEN_ROLE;
        portalUser.SelectedRole__c = SSP_GlobalConstants.CITIZEN_ROLE;
        update portalUser;
        System.runAs(portalUser){
            test.startTest();
            SSP_LightningResponse rep = SSP_MessageCenterCtrl.initMessageCenter('MessageCenter');
            test.stopTest();
        }
    }
    @isTest
    public static void unitTest3() {
        user portalUser = getPortalUser();
        portalUser.ApplicableRoles__c = SSP_GlobalConstants.INDIVDIUDAL_AUTH_REP_ROLE_STRING;
        portalUser.SelectedRole__c = SSP_GlobalConstants.INDIVDIUDAL_AUTH_REP_ROLE_STRING;
        portalUser.ImpersonatedIndividualId__c ='Test123';
        update portalUser;
        Map<String,Set<String>> newMap= new Map<String,Set<String>>();
        newMap.put('100060269',new Set<String>{'KT'});
        Cache.SessionPartition sessionPart = Cache.Session.getPartition(SSP_GlobalConstants.CACHE_PARTITION_NAME);  
        sessionPart.put('authRepAccessForNotices',JSON.serialize(newMap));
        
        System.runAs(portalUser){
            test.startTest();
            Contact_Mapping__c cm = new Contact_Mapping__c(Contact__c = portalUser.ContactId,Group_Id__c = 'Grp123',IEES_Id__c = 786756750);
            insert cm;
            SSP_LightningResponse rep = SSP_MessageCenterCtrl.initMessageCenter('MessageCenter');
            System.debug(':::User::'+portalUser);
            test.stopTest();
        }
    }
     @isTest
    public static void unitTest4() {
        user portalUser = getPortalUser3();
        portalUser.ApplicableRoles__c = null;
        portalUser.SelectedRole__c = null;
        portalUser.ImpersonatedIndividualId__c =null;
        portalUser.ProfileId = [SELECT Id FROM Profile WHERE Name ='SSP Non Citizen Profile' LIMIT 1].Id;
        update portalUser;
        Cache.SessionPartition sessionPart = Cache.Session.getPartition(SSP_GlobalConstants.CACHE_PARTITION_NAME);  
        sessionPart.put(SSP_GlobalConstants.SELECTED_ROLE,'Assister');
        Id nfId = [SELECT Id FROM SSP_Notifications__c LIMIT 1].Id;
        System.runAs(portalUser){
            test.startTest();
            SSP_LightningResponse rep = SSP_MessageCenterCtrl.initMessageCenter('MessageCenter');
            //SSP_LightningResponse lgtn = SSP_MessageCenterCtrl.updateReadStatus(String.valueof(nfId));
            System.debug(':::User8888::'+portalUser);
            test.stopTest();
        }
    }
     @isTest
    public static void unitTest5() {
      
            test.startTest();
            //SSP_LightningResponse rep = SSP_MessageCenterCtrl.initMessageCenter('MessageCenter');
            Id nfId = [SELECT Id FROM SSP_Notifications__c LIMIT 1 ].Id;
        SSP_LightningResponse lgtn = SSP_MessageCenterCtrl.updateReadStatus(JSON.serialize(new List<String>{String.valueof(nfId)}));
           
            test.stopTest();
        
    }
    
     @isTest
    public static void unitTest6() {
        user portalUser = getPortalUser3();
        
        Cache.SessionPartition sessionPart = Cache.Session.getPartition(SSP_GlobalConstants.CACHE_PARTITION_NAME);  
        sessionPart.put(SSP_GlobalConstants.SELECTED_ROLE,'Assister');
        System.runAs(new User(Id =Userinfo.getuserId())){
            String accRectypeId = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Organization').getRecordTypeId();
            account acc = new account(name='test', RecordtypeId =accRectypeId, DCDataId__c =786756753);
            insert acc;
            AccountContactRelation acr = new AccountContactRelation();
            acr.contactId = portalUser.contactId;
            acr.accountId = acc.Id;
            acr.roles = 'Assister';
            acr.DCContactId__c = 786756753;
            insert acr;
        }
        System.runAs(portalUser){
            test.startTest();
            SSP_LightningResponse rep = SSP_MessageCenterCtrl.initMessageCenter('MessageCenter');
            //SSP_LightningResponse lgtn = SSP_MessageCenterCtrl.updateReadStatus(String.valueof(nfId));
            System.debug(':::User8888::'+[select id, DCContactId__c from AccountContactRelation LImit 1]);
            test.stopTest();
        }
    }
    
     @isTest
    public static void unitTest7() {
        user portalUser = getPortalUser3();
        
        Cache.SessionPartition sessionPart = Cache.Session.getPartition(SSP_GlobalConstants.CACHE_PARTITION_NAME);  
        sessionPart.put(SSP_GlobalConstants.SELECTED_ROLE, SSP_GlobalConstants.ORGANISATION_AUTH_REP);
        sessionPart.put('authRepAccessForNotices', 'test');
        //sessionPart.put('authRepAccessForNotices', 'test');
        System.runAs(new User(Id =Userinfo.getuserId())){
            String accRectypeId = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Organization').getRecordTypeId();
            account acc = new account(name='test', RecordtypeId =accRectypeId, DCDataId__c =786756753);
            insert acc;
            AccountContactRelation acr = new AccountContactRelation();
            acr.contactId = portalUser.contactId;
            acr.accountId = acc.Id;
            acr.roles = 'Assister';
            acr.DCContactId__c = 786756753;
            insert acr;
        }
        System.runAs(portalUser){
            test.startTest();
            SSP_LightningResponse rep = SSP_MessageCenterCtrl.initMessageCenter('MessageCenter');
        try{
           SSP_LightningResponse lgtn = SSP_MessageCenterCtrl.updateReadStatus('[38300]');
        }catch(Exception e){}
            test.stopTest();
        }
    }
    
    /*SSP_MessageCenterWithoutSharingService coverage*/
    @isTest
    public static void unitTest8() {
        user portalUser = getPortalUser();
        portalUser.ApplicableRoles__c = SSP_GlobalConstants.INDIVDIUDAL_AUTH_REP_ROLE_STRING;
        portalUser.SelectedRole__c = SSP_GlobalConstants.INDIVDIUDAL_AUTH_REP_ROLE_STRING;
        portalUser.ImpersonatedIndividualId__c ='Test123';
        update portalUser;
        System.runAs(portalUser){
            test.startTest();
            List<SSP_Notifications__c> lstNotf = SSP_MessageCenterWithoutSharingService.expireDocCenterNotification(new Set<String>{'123'});
            system.assert(lstNotf != null);
            test.stopTest();
        }
    }
    
    /*SSP_MessageCenterWithoutSharingService coverage*/
    @isTest
    public static void unitTest9() {
        user portalUser = getPortalUser();
        portalUser.ApplicableRoles__c = SSP_GlobalConstants.INDIVDIUDAL_AUTH_REP_ROLE_STRING;
        portalUser.SelectedRole__c = SSP_GlobalConstants.INDIVDIUDAL_AUTH_REP_ROLE_STRING;
        portalUser.ImpersonatedIndividualId__c ='Test123';
        update portalUser;
        List<SSP_Notifications__c> lstNotifications = [select Id from SSP_Notifications__c limit 1];
        System.runAs(portalUser){
            test.startTest();
            if(!lstNotifications.isEmpty()){
                SSP_MessageCenterWithoutSharingService.fetchNotifications(lstNotifications[0].Id);
                SSP_MessageCenterWithoutSharingService.updateExpiredRecords(lstNotifications);
            }
            test.stopTest();
        }
    }
}