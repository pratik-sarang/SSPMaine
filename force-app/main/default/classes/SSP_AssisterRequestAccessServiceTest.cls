@isTest
public class SSP_AssisterRequestAccessServiceTest {
    @TestSetup static void setup() {
        insert new LOG_LogMessageSettings__c(
       Name = RE_GlobalConstants.LOGS_DEFAULT_AUTOGENERATED,
       LOG_Debug__c = true,
       LOG_Error__c= true,
       LOG_Info__c = true,
       LOG_Warning__c = true,
       LOG_Log_Purge__c = 365
       );
         AppConfig__c app = new AppConfig__c();
        app.Name='BenefindPrefix';
        app.Value__c = 'benefits';
        insert app;
    }
	@isTest
    private static void testCheckCaseForAssociation(){
        //Setup Data
        Cache.SessionPartition sessionPart = Cache.Session.getPartition(SSP_GlobalConstants.CACHE_PARTITION_NAME);
        sessionPart.put(SSP_GlobalConstants.SELECTED_ROLE,'Assister');
        Integer dcDataId = 349582;
        Integer dcContactId = 262739;
        String caseNumber = '123456789';
        
        Id sCitizenAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Citizen');
        Id sREAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Resource_Engine');
        Id sAppAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Application');

        List<Account> accountList = SSP_TestDataFactory.createAccounts(5,true,sCitizenAccRecTypeId);
        List<Id> lstAccountIds = new List<Id>();
        lstAccountIds.add(accountList[0].Id);
        
        List<Account> reAccount = SSP_TestDataFactory.createAccounts(1,true,sREAccRecTypeId);

        List<Account> appAccount = SSP_TestDataFactory.createAccounts(1,false,sAppAccRecTypeId);
        appAccount[0].DCDataId__c = dcDataId;
        appAccount[0].CaseNumber__c = caseNumber;
        insert appAccount;

        
        Id contactRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Citizen');
        Contact objAdminContact = SSP_TestDataFactory.createContactRecord('Admin', 'User', 'admin@abc.xyz' , contactRecordTypeId, true);
        Contact objCitizenContact = SSP_TestDataFactory.createContactRecord('Citizen', 'User', 'citizen@abc.xyz', contactRecordTypeId, true);
        
        User objAdminUser = SSP_TestDataFactory.createCommunityUser('sspA', null, 'admin@abc.xyz', 'System Administrator',true);
        
        User objCitizenUser = SSP_TestDataFactory.createCommunityUser('sspC', objCitizenContact.Id,'citizen@abc.xyz', 'RE Citizen Profile', true);
        
        AccountContactRelation acrRec = SSP_TestDataFactory.createAccountContactRelationshipRecord(objCitizenContact.Id,reAccount[0].Id,false);
        acrRec.DCContactId__c = dcContactId;
        acrRec.Roles = 'Assister;Authorized Representative';
        insert acrRec;

        List<SSP_Application__c> sspApplications = SSP_TestDataFactory.createSSPApplications(1,false);
        sspApplications[0].RecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('SSP_Application__c','Case');
        sspApplications[0].DCCaseNumber__c = Integer.valueOf(caseNumber);
        sspApplications[0].Account__c = appAccount[0].Id;
        insert sspApplications;

        List<SSP_AssisterAccessRequestCtrl.CaseInfoWrapper> caseInfo = new List<SSP_AssisterAccessRequestCtrl.CaseInfoWrapper>();
        SSP_AssisterAccessRequestCtrl.CaseInfoWrapper caseInfoRec = new SSP_AssisterAccessRequestCtrl.CaseInfoWrapper();
        caseInfoRec.CaseNumber = caseNumber;
        caseInfoRec.ProgramCode = 'MA';
        caseInfo.add(caseInfoRec);
        
        List<SSP_AssisterAccessRequestCtrl.AuthRepAndAssiterClientInfoWrapper> authrepandAssiterClientInfo = new List<SSP_AssisterAccessRequestCtrl.AuthRepAndAssiterClientInfoWrapper>();
        SSP_AssisterAccessRequestCtrl.AuthRepAndAssiterClientInfoWrapper authrepandAssiterClientInfoRec = new SSP_AssisterAccessRequestCtrl.AuthRepAndAssiterClientInfoWrapper();
        authrepandAssiterClientInfoRec.UserId = String.valueOf(dcContactId);
        authrepandAssiterClientInfoRec.CaseNumber = caseNumber;
        authrepandAssiterClientInfo.add(authrepandAssiterClientInfoRec);
        
        SSP_AssisterAccessRequestCtrl.ReverseSSPDCResponseWrapper objRevResponse = new SSP_AssisterAccessRequestCtrl.ReverseSSPDCResponseWrapper();
		objRevResponse.AuthrepandAssiterClientInfo = AuthrepandAssiterClientInfo;
        objRevResponse.CaseInfo = CaseInfo;
        
        SSP_AuthRepAccessRequestCtrl.MCIResponseWrapper objMCIDetails = new SSP_AuthRepAccessRequestCtrl.MCIResponseWrapper();
        objMCIDetails.bIsFullMatch = true;
        objMCIDetails.bIsPartialMatch = false;
        objMCIDetails.bIsNoMatch = false;
        objMCIDetails.sSourceIndividualId = '948492229';
        
        String sCaseNumber = caseNumber;
        
        String sRequestAccessDetails = JSON.serializePretty(objRevResponse);        

        system.runAs(objCitizenUser){
            SSP_AssisterRequestAccessService.checkCaseForAssociation(sRequestAccessDetails, objMCIDetails, sCaseNumber);
        }
        AccountContactRelation acrRec1 =new AccountContactRelation();
        acrRec1.Id=acrRec.Id;
        acrRec1.Roles = 'Authorized Representative';
        acrRec1.DCContactId__c=262738;
        update acrRec1;
         system.runAs(objCitizenUser){
            SSP_AssisterRequestAccessService.checkCaseForAssociation(sRequestAccessDetails, objMCIDetails, '');
        }
    }

    @isTest
    private static void testCreateAssisterUnverifiedACR(){
        //Setup Data

        Integer dcDataId = 234720;
        Integer dcContactId = 374563;
        String caseNumber = '987654321';
        String caseNumber2 = '654321987';
        String caseNumber3 = '654321989';
        String caseNumber4 = '654321985';
        
        Id sCitizenAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Citizen');
        Id sREAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Resource_Engine');
        Id sAppAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Application');

        List<Account> accountList = SSP_TestDataFactory.createAccounts(5,true,sCitizenAccRecTypeId);
        List<Id> lstAccountIds = new List<Id>();
        lstAccountIds.add(accountList[0].Id);
        
        List<Account> reAccount = SSP_TestDataFactory.createAccounts(1,true,sREAccRecTypeId);

        List<Account> appAccount = SSP_TestDataFactory.createAccounts(1,false,sAppAccRecTypeId);
        appAccount[0].DCDataId__c = dcDataId;
        appAccount[0].CaseNumber__c = caseNumber;
        insert appAccount;

        
        Id contactRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Citizen');
        Contact objAdminContact = SSP_TestDataFactory.createContactRecord('Admin', 'User', 'admin@abc.xyz' , contactRecordTypeId, true);
        Contact objCitizenContact = SSP_TestDataFactory.createContactRecord('Citizen', 'User', 'citizen@abc.xyz', contactRecordTypeId, true);
        
        User objAdminUser = SSP_TestDataFactory.createCommunityUser('sspA', null, 'admin@abc.xyz', 'System Administrator',true);
        
        User objCitizenUser = SSP_TestDataFactory.createCommunityUser('sspC', objCitizenContact.Id,'citizen@abc.xyz', 'RE Citizen Profile', true);
        
        AccountContactRelation acrRec = SSP_TestDataFactory.createAccountContactRelationshipRecord(objCitizenContact.Id,reAccount[0].Id,false);
        acrRec.DCContactId__c = dcContactId;
        acrRec.Roles = 'Assister;Authorized Representative';
        insert acrRec;

        List<SSP_Application__c> sspApplications = SSP_TestDataFactory.createSSPApplications(1,false);
        sspApplications[0].RecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('SSP_Application__c','Case');
        sspApplications[0].DCCaseNumber__c = Integer.valueOf(caseNumber);
        sspApplications[0].Account__c = appAccount[0].Id;
        insert sspApplications;
        
        SSP_AssisterAccessRequestCtrl.CaseInfoWrapper caseInfoRec = new SSP_AssisterAccessRequestCtrl.CaseInfoWrapper();
        caseInfoRec.CaseNumber = caseNumber;
        caseInfoRec.ProgramCode = 'MA;KP';

        
        SSP_AssisterAccessRequestCtrl.CaseInfoWrapper caseInfoRec2 = new SSP_AssisterAccessRequestCtrl.CaseInfoWrapper();
        caseInfoRec2.CaseNumber = caseNumber2;
        caseInfoRec2.ProgramCode = 'MA;KP';

        SSP_AssisterAccessRequestCtrl.CaseInfoWrapper caseInfoRec3 = new SSP_AssisterAccessRequestCtrl.CaseInfoWrapper();
        caseInfoRec3.CaseNumber = caseNumber3;
        caseInfoRec3.ProgramCode = 'MA';

        SSP_AssisterAccessRequestCtrl.CaseInfoWrapper caseInfoRec4 = new SSP_AssisterAccessRequestCtrl.CaseInfoWrapper();
        caseInfoRec4.CaseNumber = caseNumber4;
        caseInfoRec4.ProgramCode = 'KP';

        list<Integer> setCaseIds = new list<Integer>();
        setCaseIds.add(Integer.valueOf(caseNumber));
        setCaseIds.add(Integer.valueOf(caseNumber2));
        setCaseIds.add(Integer.valueOf(caseNumber3));
        setCaseIds.add(Integer.valueOf(caseNumber4));

        Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper> mapCaseInfo = new Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper>();        
        mapCaseInfo.put(caseNumber,caseInfoRec);
        mapCaseInfo.put(caseNumber2,caseInfoRec2);
        mapCaseInfo.put(caseNumber3,caseInfoRec3);
        mapCaseInfo.put(caseNumber4,caseInfoRec4);

        Test.setMock(HttpCalloutMock.class, new SSP_ProgramSelectionServiceMock());
        Test.startTest();
        system.runAs(objCitizenUser){            
            SSP_AssisterRequestAccessService.createAssisterUnverifiedACR(setCaseIds,mapCaseInfo);
        }
        Test.stopTest();
    }

    @isTest
    private static void testSearchAssister(){

        Id sREAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Resource_Engine');
        List<Account> reAccount = SSP_TestDataFactory.createAccounts(1,true,sREAccRecTypeId);
        Id contactRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Assister');
        Contact objAdminContact = SSP_TestDataFactory.createContactRecord('Admin', 'User', 'admin@abc.xyz' , contactRecordTypeId, true);
        SSP_AssisterRequestAccessService.searchAssister('admin@abc.xyz');
        SSP_AssisterRequestAccessService.searchAssister(null);
    }

    @isTest
    private static void TestfetchAcrResponse(){
        Id sCitizenAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Citizen');
        Id sREAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Resource_Engine');
        Id sAppAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Application');

        List<Account> accountList = SSP_TestDataFactory.createAccounts(5,true,sCitizenAccRecTypeId);
        List<Id> lstAccountIds = new List<Id>();
        lstAccountIds.add(accountList[0].Id);
        
        List<Account> reAccount = SSP_TestDataFactory.createAccounts(1,true,sREAccRecTypeId);

        
        Id contactRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Citizen');
        Contact objAdminContact = SSP_TestDataFactory.createContactRecord('Admin', 'User', 'admin@abc.xyz' , contactRecordTypeId, true);
        Contact objCitizenContact = SSP_TestDataFactory.createContactRecord('Citizen', 'User', 'citizen@abc.xyz', contactRecordTypeId, true);
        
        AccountContactRelation acrRec = SSP_TestDataFactory.createAccountContactRelationshipRecord(objCitizenContact.Id,reAccount[0].Id,false);
        acrRec.Roles = 'Assister;Authorized Representative';
        acrRec.RequestAccessPermission__c='{"PermissionLevel_Medicaid__c":"ST","PermissionLevel_KIHIPP__c":"ST"}';
        insert acrRec;

        Id recordTypeIdNotification = Schema.SObjectType.SSP_Notifications__c.getRecordTypeInfosByName().get('To Do').getRecordTypeId();
        SSP_Notifications__c notification = new SSP_Notifications__c();
        notification.recordtypeid = recordTypeIdNotification;
        notification.recipientType__c = 'citizen';
        notification.recipientId__c = '999036538';
        notification.Status__c = 'Expired';
        notification.Linked_Record_Id__c = String.valueOf(acrRec.Id);
        notification.notificationCode__c = 'SF-TOD-002';
        insert notification;
 
        SSP_AssisterRequestAccessService.fetchAcrResponse(notification.Id);
    }

    @isTest public static void checkApplicationAssociationTest(){
        Id contactRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Citizen');
        List<Account> lstAcc = SSP_TestDataFactory.createAccounts(1, false);
        lstAcc[0].Name = 'SSP_AuthRepAccessRequestCtrl';
        lstAcc = ESAPI.accessController().insertAsUser(lstAcc, SSP_Utility.getFieldsNamesList (lstAcc)).getInsertedObjects();
        Contact objCitizenContact = SSP_TestDataFactory.createContactRecord('Citizen', 'User', 'citizen@abc.xyz', contactRecordTypeId, true);
        List<Contact> lstCon = new List<Contact>();
        lstCon.add(objCitizenContact);
        AccountContactRelation acr = new AccountContactRelation(); 
        acr.Accountid = lstAcc[0].Id;
        acr.Contactid = lstCon[0].Id;
        acr.IsActive = true;
        acr.Roles = 'Organization_Auth_Rep';
        acr = (AccountContactRelation)ESAPI.accessController().insertAsUser(new List<AccountContactRelation>{acr}, SSP_Utility.getFieldsNamesList (new List<AccountContactRelation>{acr})).getInsertedObjects()[0];       
        
        List<SSP_Application__c> lstAppln = SSP_TestDataFactory.createSSPApplications(1, false);
        lstAppln[0].Account__c=lstAcc[0].Id;        
        lstAppln[0].Contact__c = lstCon[0].Id;
        lstAppln[0].ProgramsApplied__c='MA';
        lstAppln= ESAPI.accessController().insertAsUser(lstAppln, SSP_Utility.getFieldsNamesList (lstAppln)).getInsertedObjects();
        
        List<SSP_Member__c> lstMem = SSP_TestDataFactory.createSSPMembers(1, false);
        lstMem[0].contact__c=lstCon[0].Id;  
        lstMem[0].PrimaryPhoneExtension__c ='7348789790';
        lstMem[0].PrimaryPhoneNumber__c ='8983838290';
        lstMem = ESAPI.accessController().insertAsUser(lstMem, SSP_Utility.getFieldsNamesList (lstMem)).getInsertedObjects();
        
        List<SSP_ApplicationIndividual__c> lstAppInd = SSP_TestDataFactory.createApplicationIndividuals(1, false); 
        lstAppInd[0].SSP_Application__c=lstAppln[0].Id;
        lstAppInd[0].SSP_Member__c=lstMem[0].Id;
        lstAppInd = ESAPI.accessController().insertAsUser(lstAppInd, SSP_Utility.getFieldsNamesList (lstAppInd)).getInsertedObjects(); 

        Contact_Mapping__c cm1 = new Contact_Mapping__c(Contact__c = lstCon[0].Id,Group_Id__c = 'Grp123',IEES_Id__c = 234567788);
        insert cm1;
        
        Contact_Mapping__c cm2 = new Contact_Mapping__c(Contact__c = lstCon[0].Id,Group_Id__c = 'Grp123',IEES_Id__c = 546789023);
        insert cm2;
        
        SSP_Application__c aaplication=[Select Id,Name FROM SSP_Application__c WHERE ID=:lstAppln[0].Id];
        User objCitizenUser = SSP_TestDataFactory.createCommunityUser('sspC', objCitizenContact.Id,'citizen@abc.xyz', 'RE Citizen Profile', true);
        system.debug('lstAppln[0].Name>>'+aaplication);
        system.runAs(objCitizenUser){
            SSP_AssisterRequestAccessService.checkApplicationAssociation('234567788;546789023',aaplication.Name);
        }
        
    }
    @isTest public static void createAssisterUnverifiedAppACRTest(){
        Integer dcDataId = 234720;
        Integer dcContactId = 374563;
        String caseNumber = '987654321';
        Id sCitizenAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Citizen');
        Id sREAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Resource_Engine');
        Id sAppAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Application');

        List<Account> accountList = SSP_TestDataFactory.createAccounts(5,true,sCitizenAccRecTypeId);
        List<Id> lstAccountIds = new List<Id>();
        lstAccountIds.add(accountList[0].Id);
        
        List<Account> reAccount = SSP_TestDataFactory.createAccounts(1,true,sREAccRecTypeId);

        List<Account> appAccount = SSP_TestDataFactory.createAccounts(1,false,sAppAccRecTypeId);
        appAccount[0].DCDataId__c = dcDataId;
        appAccount[0].CaseNumber__c = caseNumber;
        insert appAccount;

        
        Id contactRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Citizen');
        Contact objAdminContact = SSP_TestDataFactory.createContactRecord('Admin', 'User', 'admin@abc.xyz' , contactRecordTypeId, true);
        Contact objCitizenContact = SSP_TestDataFactory.createContactRecord('Citizen', 'User', 'citizen@abc.xyz', contactRecordTypeId, true);
        
        User objAdminUser = SSP_TestDataFactory.createCommunityUser('sspA', null, 'admin@abc.xyz', 'System Administrator',true);
        
        User objCitizenUser = SSP_TestDataFactory.createCommunityUser('sspC', objCitizenContact.Id,'citizen@abc.xyz', 'RE Citizen Profile', true);
        
        AccountContactRelation acrRec = SSP_TestDataFactory.createAccountContactRelationshipRecord(objCitizenContact.Id,reAccount[0].Id,false);
        acrRec.Roles = 'Assister;Authorized Representative';
        insert acrRec;

        List<SSP_Application__c> lstAppln = SSP_TestDataFactory.createSSPApplications(1, false);
        lstAppln[0].Account__c=reAccount[0].Id;        
        lstAppln[0].Contact__c = objCitizenContact.Id;
        lstAppln[0].ProgramsApplied__c='MA';
        lstAppln= ESAPI.accessController().insertAsUser(lstAppln, SSP_Utility.getFieldsNamesList (lstAppln)).getInsertedObjects();
        
        SSP_Application__c aaplication=[Select Id,Name FROM SSP_Application__c WHERE ID=:lstAppln[0].Id];
        System.runAs(objCitizenUser){
            SSP_AssisterRequestAccessService.createAssisterUnverifiedAppACR('234567788;546789023',aaplication.Name);
        }
    }
}