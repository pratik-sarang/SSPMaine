/*
* classname     : SSP_AbsentParentQueueingRuleTest
* @description  : A test class for SSP_AbsentParentQueueingRuleTest class.
* @author       : Ajay Saini
* @date         : JAN-3-2019
* MODIFICATION LOG:
* DEVELOPER             DATE            DESCRIPTION
* ---------------------------------------------------------------------------------------------
* Ajay Saini        JAN-3-2019          Initial Version
*/
@isTest(seeAllData=false)
public class SSP_AbsentParentQueueingRuleTest {
    @testSetup
    public static void initialDataSetup() {
        insert new LOG_LogMessageSettings__c(
            Name = RE_GlobalConstants.LOGS_DEFAULT_AUTOGENERATED,
            LOG_Debug__c = true,
            LOG_Error__c= true,
            LOG_Info__c = true,
            LOG_Warning__c = true,
            LOG_Log_Purge__c = 365
        );
        Id sCitizenAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Citizen');
        SSP_TestDataFactory.createContactRecord('Test', 'Test', 'test@tester.com', sCitizenAccRecTypeId, true);
    }

    public static User getPortalUser() {
        return SSP_TestDataFactory.createPortalUser();
    }
    
    public static void dataSetup() {
        Contact contactRecord = [SELECT Id, AccountId FROM Contact LIMIT 1];
        Integer n = 1;
        List<SSP_Application__c> applications = SSP_TestDataFactory.createSSPApplications(n, false);
        for(Integer i = 0; i < n; ++i) {
            applications[i].Account__c = contactRecord.AccountId;
        }
        insert applications;
        
        n = 3;
        List<SSP_Member__c> members = SSP_TestDataFactory.createSSPMembers(n, false);
        Integer z = 1;
        for(SSP_Member__c member : members) {
            member.Contact__c = contactRecord.Id;
            //member.IsHeadOfHousehold__c = false;
            member.BirthDate__c = SSP_Utility.today().addDays(-5000 * z++);
            System.debug('Member:::'+member+'=>Age'+member.Age__c);
        }
        
        
        insert members;
        List<SSP_ApplicationIndividual__c> individuals = SSP_TestDataFactory.createApplicationIndividuals(n, false);
        for(Integer i = 0; i < n; ++i) {
            individuals[i].ProgramsApplied__c = 'MA';
            individuals[i].SSP_Member__c = members[i].Id;
            individuals[i].SSP_Application__c = applications[0].Id;
        }
        insert individuals;
        List<SSP_Relationship__c> lstRelations = new List<SSP_Relationship__c>();
        SSP_Relationship__c objRelation = new SSP_Relationship__c();
        objRelation.SSP_Member__c = members[1].Id;
        objRelation.SSP_MemberRelatedTo__c = members[0].Id;
        objRelation.RelationshipType__c = 'FA';
        lstRelations.add(objRelation);
        //lstRelations.add(objRelation1);
        insert lstRelations;
    }
    
    @isTest
    public static void unitTest1() {
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();
            SSP_ApplicationIndividual__c individual = [SELECT Id, SSP_Application__c, SSP_Member__c FROM SSP_ApplicationIndividual__c WHERE SSP_Member__r.Age__c < 18 LIMIT 1];        
            ContextData ctxData = new ContextData();
            ctxData.memberId = individual.SSP_Member__c;
            ctxData.applicationId = individual.SSP_Application__c;
            Test.startTest();
            Boolean queued = new SSP_AbsentParentQueueingRule().isRequired(null, ctxData);
            System.assert(queued);
            Test.stopTest();
        }
    }
    
    @isTest
    public static void unitTest2() {
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();
            SSP_ApplicationIndividual__c individual = [SELECT Id, SSP_Application__c, SSP_Member__c FROM SSP_ApplicationIndividual__c WHERE SSP_Member__r.Age__c > 18 LIMIT 1];        
            ContextData ctxData = new ContextData();
            ctxData.memberId = individual.SSP_Member__c;
            ctxData.applicationId = individual.SSP_Application__c;
            Test.startTest();
            Boolean queued = new SSP_AbsentParentQueueingRule().isRequired(null, ctxData);
            System.assert(!queued);
            Test.stopTest();
        }
    }
    
    @isTest
    public static void unitTest3() {
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();
            Test.startTest();
            Boolean queued = new SSP_AbsentParentQueueingRule().isRequired(null, null);
            System.assert(!queued);
            Test.stopTest();
        }
    }
}