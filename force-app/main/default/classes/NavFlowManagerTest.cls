@istest
public class NavFlowManagerTest {
  
    @TestSetup
    public static void setupMethod(){
          	SSP_TestDataFactory.setupTestData();
        
        List<Account> lstAcc = SSP_TestDataFactory.createAccounts(1, false);
        lstAcc[0].Name = 'HealthSelectionCtrl';
        lstAcc = ESAPI.accessController().insertAsUser(lstAcc, SSP_Utility.getFieldsNamesList (lstAcc)).getInsertedObjects();
        
        List<Contact> lstCon = (List<Contact>)SSP_Utility.fetchRecords(new Map<String, String>{'objectName'=>'Contact','operator'=>'AND'}, new Set<String>{'Id', 'FirstName', 'LastName'}, new Map<String, String>{'FirstName'=>'Citizen','LastName'=>'User'});
        
        AccountContactRelation acr = new AccountContactRelation(); 
        acr.Accountid = lstAcc[0].Id;
        acr.Contactid = lstCon[0].Id;
        acr.IsActive = true;
        acr = (AccountContactRelation)ESAPI.accessController().insertAsUser(new List<AccountContactRelation>{acr}, SSP_Utility.getFieldsNamesList (new List<AccountContactRelation>{acr})).getInsertedObjects()[0];       
        
        List<SSP_Application__c> lstAppln = SSP_TestDataFactory.createSSPApplications(1, false);
        lstAppln[0].Account__c=lstAcc[0].Id;        
        lstAppln[0].Contact__c = lstCon[0].Id;
        lstAppln= ESAPI.accessController().insertAsUser(lstAppln, SSP_Utility.getFieldsNamesList (lstAppln)).getInsertedObjects();
        
        List<SSP_Member__c> lstMem = SSP_TestDataFactory.createSSPMembers(1, false);
        lstMem[0].contact__c=lstCon[0].Id;  
        lstMem[0].PrimaryPhoneExtension__c ='7348789790';
        lstMem[0].PrimaryPhoneNumber__c ='8983838290';
        lstMem = ESAPI.accessController().insertAsUser(lstMem, SSP_Utility.getFieldsNamesList (lstMem)).getInsertedObjects();
        
        List<SSP_ApplicationIndividual__c> lstAppInd = SSP_TestDataFactory.createApplicationIndividuals(1, false); 
        lstAppInd[0].SSP_Application__c=lstAppln[0].Id;
        lstAppInd[0].SSP_Member__c=lstMem[0].Id;
        lstAppInd = ESAPI.accessController().insertAsUser(lstAppInd, SSP_Utility.getFieldsNamesList (lstAppInd)).getInsertedObjects();        
     
        NavFlowStatus__c nfs = new NavFlowStatus__c();
        nfs.NavFlowName__c = 'ContactInformation';
        nfs.FlowPageStatus__c = 'CC';
        nfs.FlowDupStatus__c = 'CC';
        nfs.SSPApplication__c = lstAppln[0].Id;
        nfs.SSP_Application__c = lstAppln[0].Id;
        nfs.SSP_Member__c = lstMem[0].Id;
        nfs.Member__c = lstMem[0].Id;
        nfs.Contact__c = lstCon[0].Id;
        insert nfs;            
        
	  	
        
        //Create Custom settings 
        LOG_LogMessageSettings__c log = new LOG_LogMessageSettings__c();
        log.Name = 'Default_AutoGenerated';
        log.LOG_Debug__c = true;
        log.LOG_Error__c = true;
        log.LOG_Log_Purge__c = 365;
        log.LOG_Info__c = true;
        log.LOG_Warning__c = true;
        insert log;        
    }
    
    @istest
    public static void loadFlowTestRAC(){
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c FROM SSP_ApplicationIndividual__c];
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'ContactInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'loadFlow';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.modeValue = 'RAC';
        Test.startTest();
        PageToLoad pg = NavFlowManager.loadFlow(ctx, ctxData);
        
        Test.stopTest();
    }
    
     @istest
    public static void loadFlowTestRAC1(){
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c FROM SSP_ApplicationIndividual__c];
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'HouseholdInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'loadFlow';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.SelectedScreen = new List<String>();
        ctxData.modeValue = 'RAC';
        Test.startTest();
        PageToLoad pg = NavFlowManager.loadFlow(ctx, ctxData);
        
        Test.stopTest();
    }
    @istest
    public static void loadFlowTestIntake(){
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c FROM SSP_ApplicationIndividual__c];
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'HouseholdInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'loadFlow';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.modeValue = 'Renewal';
        System.runAs(citizen){
            Test.startTest();
            PageToLoad pg = NavFlowManager.loadFlow(ctx, ctxData);
            
            Test.stopTest();
        }
    }
    
    @istest
    public static void loadFlowWithNavFlowStatusTest (){
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c FROM SSP_ApplicationIndividual__c];
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        NavFlowStatus__c flowStatus = [SELECT Id, FlowPageStatus__c, FlowDupStatus__c, Screen_Status__c FROM NavFlowStatus__c WHERE NavFlowName__c = 'ContactInformation'];
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'ContactInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'loadFlow';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.SelectedScreen = new List<String>();
        ctxData.modeValue = 'RAC';
        ctxData.navFlowStatusId = flowStatus.Id;
        System.runAs(citizen){
            Test.startTest();
            PageToLoad pg = NavFlowManager.loadFlow(ctx, ctxData);
            
            Test.stopTest();
        }
    }
    
    @istest
     public static void getNextStepTest(){
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c FROM SSP_ApplicationIndividual__c];
        NavFlowStatus__c flowStatus = [SELECT Id, FlowPageStatus__c, FlowDupStatus__c, Screen_Status__c FROM NavFlowStatus__c WHERE NavFlowName__c = 'ContactInformation'];
        flowStatus.FlowPageStatus__c = 'RR';
        update flowStatus;
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'ContactInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'loadFlow';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.modeValue = 'Intake';
       	ctxData.navFlowStatusId = flowStatus.Id;
        System.runAs(citizen){
            Test.startTest();
            PageToLoad pg = NavFlowManager.getNextStep(ctx, ctxData);
            
            Test.stopTest();
        }
    }

	@istest
     public static void getPrevStepTest(){
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c FROM SSP_ApplicationIndividual__c];
        NavFlowStatus__c flowStatus = [SELECT Id, FlowPageStatus__c, FlowDupStatus__c, Screen_Status__c FROM NavFlowStatus__c WHERE NavFlowName__c = 'ContactInformation'];
        flowStatus.FlowPageStatus__c = 'CR';
        update flowStatus;
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'ContactInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'loadFlow';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.modeValue = 'Intake';
       	ctxData.navFlowStatusId = flowStatus.Id;
        System.runAs(citizen){
            Test.startTest();
            PageToLoad pg = NavFlowManager.getPrevStep(ctx, ctxData);
            
            Test.stopTest();
        }
    }    
    
   	 @istest
     public static void flowStatusUpdTest(){
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c FROM SSP_ApplicationIndividual__c];
        NavFlowStatus__c flowStatus = [SELECT Id, FlowPageStatus__c, FlowDupStatus__c, Screen_Status__c FROM NavFlowStatus__c WHERE NavFlowName__c = 'ContactInformation'];
        flowStatus.FlowPageStatus__c = 'RR';
        flowStatus.FlowDupStatus__c = 'RR';
        update flowStatus;
        List<NavFlowPageConfig__mdt> flowPageConfigList = NavFlowControllerTest.getNavFlowPageConfig ('ContactInformation');
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'ContactInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'loadFlow';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.modeValue = 'Intake';
       	ctxData.navFlowStatusId = flowStatus.Id;
        ctxData.curNavFlowPageConfigId = !flowPageConfigList.isEmpty() ? flowPageConfigList[0].Id : '';
        ctxData.SelectedScreen = new List<String>();
        ctxData.SelectedPrograms = new List<String>();
        System.runAs(citizen){
            Test.startTest();
            NavFlowManager.FlowStatusUpdate(ctx, ctxData);            
            Test.stopTest();
        }
    } 
    
    @istest
     public static void flowStatusUpdTest1(){
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c FROM SSP_ApplicationIndividual__c];
        NavFlowStatus__c flowStatus = [SELECT Id, FlowPageStatus__c, FlowDupStatus__c, Screen_Status__c FROM NavFlowStatus__c WHERE NavFlowName__c = 'ContactInformation'];
        flowStatus.FlowPageStatus__c = 'RR';
        flowStatus.FlowDupStatus__c = 'RR';
        update flowStatus;
        List<NavFlowPageConfig__mdt> flowPageConfigList = NavFlowControllerTest.getNavFlowPageConfig ('ContactInformation');
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'ContactInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'next';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.modeValue = 'Intake';
       	ctxData.navFlowStatusId = flowStatus.Id;
        ctxData.curNavFlowPageConfigId = !flowPageConfigList.isEmpty() ? flowPageConfigList[0].Id : '';
        ctxData.SelectedScreen = new List<String>{'SSP_APP_Primary_Contact'};
        ctxData.SelectedPrograms = new List<String> {'MA'};
        
        System.runAs(citizen){
            Test.startTest();
            NavFlowManager.FlowStatusUpdate(ctx, ctxData);            
            Test.stopTest();
        }
    } 
    
    @istest
     public static void flowStatusUpdTest2(){
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c FROM SSP_ApplicationIndividual__c];
        NavFlowStatus__c flowStatus = [SELECT Id, FlowPageStatus__c, FlowDupStatus__c, Screen_Status__c FROM NavFlowStatus__c WHERE NavFlowName__c = 'ContactInformation'];
        flowStatus.FlowPageStatus__c = 'RR';
        flowStatus.FlowDupStatus__c = 'RR';
        update flowStatus;
        List<NavFlowPageConfig__mdt> flowPageConfigList = NavFlowControllerTest.getNavFlowPageConfig ('ContactInformation');
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'ContactInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'next';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.modeValue = 'Intake';       	
        ctxData.curNavFlowPageConfigId = !flowPageConfigList.isEmpty() ? flowPageConfigList[0].Id : '';
        ctxData.SelectedScreen = new List<String>{'SSP_APP_Primary_Contact'};
        ctxData.SelectedPrograms = new List<String> {'MA'};
        
        System.runAs(citizen){
            Test.startTest();
            NavFlowManager.FlowStatusUpdate(ctx, ctxData);            
            Test.stopTest();
        }
    } 
    
    @istest
     public static void flowStatusUpdTest3(){
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c FROM SSP_ApplicationIndividual__c];
        NavFlowStatus__c flowStatus = [SELECT Id, FlowPageStatus__c, FlowDupStatus__c, Screen_Status__c FROM NavFlowStatus__c WHERE NavFlowName__c = 'ContactInformation'];        
        List<NavFlowPageConfig__mdt> flowPageConfigList = NavFlowControllerTest.getNavFlowPageConfig ('ContactInformation');
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'ContactInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'next';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.modeValue = 'Intake';       	
        ctxData.curNavFlowPageConfigId = !flowPageConfigList.isEmpty() ? flowPageConfigList[0].Id : '';
        ctxData.SelectedScreen = new List<String>{'SSP_APP_Primary_Contact'};
        ctxData.SelectedPrograms = new List<String> {'MA'};        
        System.runAs(citizen){
            Test.startTest();
            NavFlowManager.FlowStatusUpdate(ctx, ctxData);            
            Test.stopTest();
        }
    } 
    
    @istest
     public static void flowStatusUpdTest4(){
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c FROM SSP_ApplicationIndividual__c];
        //NavFlowStatus__c flowStatus = [SELECT Id, FlowPageStatus__c, FlowDupStatus__c, Screen_Status__c FROM NavFlowStatus__c WHERE NavFlowName__c = 'ContactInformation'];                
        List<NavFlowPageConfig__mdt> flowPageConfigList = NavFlowControllerTest.getNavFlowPageConfig ('HouseholdInformation');
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'HouseholdInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'next';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.modeValue = 'Intake';       	
        ctxData.curNavFlowPageConfigId = !flowPageConfigList.isEmpty() ? flowPageConfigList[0].Id : '';
        ctxData.SelectedScreen = new List<String>{'SSP_APP_Select_Health'};
        ctxData.SelectedPrograms = new List<String> {'MA'};  
        ctxData.noFlowStatusRRPages = new List<String>{'Health'};
        //ctxData.strCurrPageName = 'SSP_APP_Select_Health';
        System.runAs(citizen){
            Test.startTest();
            NavFlowManager.FlowStatusUpdate(ctx, ctxData);            
            Test.stopTest();
        }
    } 
    
    @istest
     public static void flowStatusUpdTest5(){
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c FROM SSP_ApplicationIndividual__c];
        NavFlowStatus__c flowStatus = [SELECT Id, FlowPageStatus__c, FlowDupStatus__c, Screen_Status__c FROM NavFlowStatus__c WHERE NavFlowName__c = 'ContactInformation'];        
        flowStatus.FlowPageSTatus__c = 'RR';
        flowStatus.FlowDupStatus__c = 'CC';
        update flowStatus;
        List<NavFlowPageConfig__mdt> flowPageConfigList = NavFlowControllerTest.getNavFlowPageConfig ('ContactInformation');
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'ContactInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'next';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.modeValue = 'Intake';       	
        ctxData.curNavFlowPageConfigId = !flowPageConfigList.isEmpty() ? flowPageConfigList[0].Id : '';
        ctxData.SelectedScreen = new List<String>{'SSP_APP_Primary_Contact'};
        ctxData.SelectedPrograms = new List<String> {'MA'};        
        System.runAs(citizen){
            Test.startTest();
            NavFlowManager.FlowStatusUpdate(ctx, ctxData);            
            Test.stopTest();
        }
    } 
    
    @istest
    public static void testinitFlowStatus(){
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c FROM SSP_ApplicationIndividual__c];
        sspAppIndividualList[0].IsHeadOfHousehold__c = true;
        update sspAppIndividualList;
        List<NavFlowPageConfig__mdt> flowPageConfigList = NavFlowControllerTest.getNavFlowPageConfig ('ContactInformation');
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'ContactInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'next';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.modeValue = 'Intake';       	
        ctxData.curNavFlowPageConfigId = !flowPageConfigList.isEmpty() ? flowPageConfigList[0].Id : '';
        ctxData.SelectedScreen = new List<String>{'SSP_APP_Primary_Contact'};
        ctxData.SelectedPrograms = new List<String> {'MA'};        
        System.runAs(citizen){
            Test.startTest();
            Map<String,String> flowStatus = NavFlowManager.initNavFlowStatus(ctx, ctxData);            
            Test.stopTest();   
            system.assert(flowStatus != null);
            system.assertEquals('N', flowStatus.get('SSP_APP_Primary_Contact'));
        }
    }

 	@istest
    public static void testupdateListener(){
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c FROM SSP_ApplicationIndividual__c];
        sspAppIndividualList[0].IsHeadOfHousehold__c = true;
        update sspAppIndividualList;
        NavFlowStatus__c flowStatus = [SELECT Id, FlowPageStatus__c, FlowDupStatus__c, Screen_Status__c FROM NavFlowStatus__c WHERE NavFlowName__c = 'ContactInformation'];
        flowStatus.Screen_Status__c='Test value';
        update flowStatus;
        List<NavFlowPageConfig__mdt> flowPageConfigList = NavFlowControllerTest.getNavFlowPageConfig ('ContactInformation');
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'ContactInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'next';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.modeValue = 'Intake';       	
        ctxData.curNavFlowPageConfigId = !flowPageConfigList.isEmpty() ? flowPageConfigList[0].Id : '';
        ctxData.SelectedScreen = new List<String>{'SSP_APP_Primary_Contact'};
        ctxData.SelectedPrograms = new List<String> {'MA'};
            
		Context ctx2 = new Context();
        ContextData ctxData2 = new ContextData();
        ctxData2 = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData2.flowName = 'ContactInformation';
        ctxData2.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData2.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData2.action = 'next';
        ctxData2.contactId = citizen.ContactId;
        ctxData2.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData2.SelectedPrograms = new List<String>();
        ctxData2.modeValue = 'RAC';       	
        ctxData2.curNavFlowPageConfigId = !flowPageConfigList.isEmpty() ? flowPageConfigList[0].Id : '';
        ctxData2.SelectedScreen = new List<String>{'SSP_APP_Primary_Contact'};
        ctxData2.SelectedPrograms = new List<String> {'MA'};
        System.runAs(citizen){
            Test.startTest();
            NavFlowStatus__c flowStatusRecord = NavFlowManager.updateListenerStepStatus(ctx, ctxData,'SSP_APP_Primary_Contact', flowStatus);            
            Test.stopTest();   
            system.assert(flowStatusRecord != null);
            //system.assertEquals('N', flowStatus.get('SSP_APP_Primary_Contact'));
        }
    }
    
    @istest
    public static void testgetPageConfigByIndex(){
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c FROM SSP_ApplicationIndividual__c];
        sspAppIndividualList[0].IsHeadOfHousehold__c = true;
        update sspAppIndividualList;
        NavFlowStatus__c flowStatus = [SELECT Id, FlowPageStatus__c, FlowDupStatus__c, Screen_Status__c FROM NavFlowStatus__c WHERE NavFlowName__c = 'ContactInformation'];
        List<NavFlowPageConfig__mdt> flowPageConfigList = NavFlowControllerTest.getNavFlowPageConfig ('ContactInformation');
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'ContactInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'next';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.modeValue = 'Intake';       	
        ctxData.curNavFlowPageConfigId = !flowPageConfigList.isEmpty() ? flowPageConfigList[0].Id : '';
        ctxData.SelectedScreen = new List<String>{'SSP_APP_Primary_Contact'};
        ctxData.SelectedPrograms = new List<String> {'MA'};        
        System.runAs(citizen){
            Test.startTest();
            NavFlowPageConfig__mdt flowStatusRecord = NavFlowManager.getPageConfigByIndex(ctx, ctxData,0);            
            Test.stopTest();   
            system.assert(flowStatusRecord != null);
            //system.assertEquals('N', flowStatus.get('SSP_APP_Primary_Contact'));
        }
    }      
    
    @istest
    public static void testCompareStatus(){        
        NavFlowStatus__c flowStatus = [SELECT Id, FlowPageStatus__c, FlowDupStatus__c, Screen_Status__c FROM NavFlowStatus__c WHERE NavFlowName__c = 'ContactInformation'];        
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];  
        Map<String,String> mapFlowStatus = new Map<String,String>();
        System.runAs(citizen){
            Test.startTest();
            mapFlowStatus = NavFlowManager.compareStatus(flowStatus.FlowDupStatus__c, flowStatus.FlowPageStatus__c);            
            Test.stopTest();   
            system.assert(mapFlowStatus != null);
            //system.assertEquals('N', flowStatus.get('SSP_APP_Primary_Contact'));
        }
    }    
    
    @istest
    public static void testResetDriver(){
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c FROM SSP_ApplicationIndividual__c];
        sspAppIndividualList[0].IsHeadOfHousehold__c = true;
        update sspAppIndividualList;
        NavFlowStatus__c flowStatus = [SELECT Id, FlowPageStatus__c, FlowDupStatus__c, Screen_Status__c FROM NavFlowStatus__c WHERE NavFlowName__c = 'ContactInformation'];
        List<NavFlowPageConfig__mdt> flowPageConfigList = NavFlowControllerTest.getNavFlowPageConfig ('ContactInformation');
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'ContactInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'next';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.modeValue = 'Intake';       	
        ctxData.curNavFlowPageConfigId = !flowPageConfigList.isEmpty() ? flowPageConfigList[0].Id : '';
        ctxData.SelectedScreen = new List<String>{'SSP_APP_Primary_Contact'};
        ctxData.SelectedPrograms = new List<String> {'MA'};        
        System.runAs(citizen){
            Test.startTest();
            List<NavFlowStatus__c> flowStatusRecord = NavFlowManager.resetDriver(new Set<Id>{ctxData.applicationId},'ContactInformation');            
            Test.stopTest();   
            system.assert(flowStatusRecord != null);
            //system.assertEquals('N', flowStatus.get('SSP_APP_Primary_Contact'));
        }
    }
    
    @istest
    public static void testresetDriverMethod(){
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c FROM SSP_ApplicationIndividual__c];
        sspAppIndividualList[0].IsHeadOfHousehold__c = true;
        update sspAppIndividualList;
        NavFlowStatus__c flowStatus = [SELECT Id, FlowPageStatus__c, FlowDupStatus__c, Screen_Status__c FROM NavFlowStatus__c WHERE NavFlowName__c = 'ContactInformation'];
        List<NavFlowPageConfig__mdt> flowPageConfigList = NavFlowControllerTest.getNavFlowPageConfig ('ContactInformation');
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'ContactInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'next';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.modeValue = 'Intake';       	
        ctxData.curNavFlowPageConfigId = !flowPageConfigList.isEmpty() ? flowPageConfigList[0].Id : '';
        ctxData.SelectedScreen = new List<String>{'SSP_APP_Primary_Contact'};
        ctxData.SelectedPrograms = new List<String> {'MA'};        
        System.runAs(citizen){
            Test.startTest();
            List<NavFlowStatus__c> flowStatusRecord = NavFlowManager.resetDriver(new Set<Id> {ctxData.applicationId});            
            Test.stopTest();   
            system.assert(flowStatusRecord != null);
            //system.assertEquals('N', flowStatus.get('SSP_APP_Primary_Contact'));
        }
    }
    
    @istest
    public static void testResetNavDriver(){
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c FROM SSP_ApplicationIndividual__c];
        sspAppIndividualList[0].IsHeadOfHousehold__c = true;
        update sspAppIndividualList;
        NavFlowStatus__c flowStatus = [SELECT Id, FlowPageStatus__c, FlowDupStatus__c, Screen_Status__c FROM NavFlowStatus__c WHERE NavFlowName__c = 'ContactInformation'];
        List<NavFlowPageConfig__mdt> flowPageConfigList = NavFlowControllerTest.getNavFlowPageConfig ('ContactInformation');
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'ContactInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'next';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.modeValue = 'Intake';       	
        ctxData.curNavFlowPageConfigId = !flowPageConfigList.isEmpty() ? flowPageConfigList[0].Id : '';
        ctxData.SelectedScreen = new List<String>{'SSP_APP_Primary_Contact'};
        ctxData.SelectedPrograms = new List<String> {'MA'};        
        System.runAs(citizen){
            Test.startTest();
            List<NavFlowStatus__c> flowStatusRecord = NavFlowManager.resetNavDriver(ctxData.applicationId,'ContactInformation',ctxData.MemberId,
                                                                                   ctxData.modeValue, ctxData.queueObject);            
            Test.stopTest();   
            system.assert(flowStatusRecord != null);
            //system.assertEquals('N', flowStatus.get('SSP_APP_Primary_Contact'));
        }
    }
    
    @istest
    public static void testloadScreenProgramming(){
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c FROM SSP_ApplicationIndividual__c];
        sspAppIndividualList[0].IsHeadOfHousehold__c = true;
        update sspAppIndividualList;
        NavFlowStatus__c flowStatus = [SELECT Id, FlowPageStatus__c, FlowDupStatus__c, Screen_Status__c FROM NavFlowStatus__c WHERE NavFlowName__c = 'ContactInformation'];
        List<NavFlowPageConfig__mdt> flowPageConfigList = NavFlowControllerTest.getNavFlowPageConfig ('ContactInformation');
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'ContactInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'next';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.modeValue = 'Intake';       	
        ctxData.curNavFlowPageConfigId = !flowPageConfigList.isEmpty() ? flowPageConfigList[0].Id : '';
        ctxData.SelectedScreen = new List<String>{'SSP_APP_Primary_Contact'};
        ctxData.SelectedPrograms = new List<String> {'MA'};        
        System.runAs(citizen){
            Test.startTest();
            String flowStatusRecord = NavFlowManager.loadScreenProgramMapping(ctx,ctxData,flowStatus);          
            Test.stopTest();   
            system.assert(flowStatusRecord != null);
            //system.assertEquals('N', flowStatus.get('SSP_APP_Primary_Contact'));
        }
    }
    
    @istest
    public static void testFetchTransactionStatus(){
        Map<String,String> detailMap = new Map<String,String>();
        SSP_ApplicationIndividual__c appIndividual = [SELECT Id, SSP_Application__c, SSP_Member__c, IsHeadOfHousehold__c FROM SSP_ApplicationIndividual__c LIMIT 1];
        detailMap.put('sHOHId',appIndividual.SSP_Member__c);
        detailMap.put('sScreenName','SSP_APP_Primary_Contact');
        detailMap.put('sMode','Intake');
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        System.runAs(citizen){
            Test.startTest();
            SSP_LightningResponse response = NavflowManager.fetchTransactionStatus(detailMap);
            Test.stopTest();
        }
    }
    
    @istest
    public static void testFetchAppDetails(){
        Map<String,String> detailMap = new Map<String,String>();
        SSP_ApplicationIndividual__c appIndividual = [SELECT Id, SSP_Application__c, SSP_Member__c, IsHeadOfHousehold__c FROM SSP_ApplicationIndividual__c LIMIT 1];
        detailMap.put('sHOHId',appIndividual.SSP_Member__c);
        detailMap.put('sScreenName','SSP_APP_Primary_Contact');
        detailMap.put('sMode','Intake');
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        System.runAs(citizen){
            Test.startTest();
            SSP_LightningResponse response = NavflowManager.fetchApplicationDetails(appIndividual.SSP_Application__c);
            Test.stopTest();
        }
    }
    
    @istest
    public static void testFetchKA(){        
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        System.runAs(citizen){
            Test.startTest();
            List<FAQ__kav> kaList = NavflowManager.fetchKnowledgeArticles('SSP_APP_Primary_Contact','en_US');
            Test.stopTest();
        }
    }
    
    @istest
    public static void testFetchRRDetails(){        
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c FROM SSP_ApplicationIndividual__c];
        sspAppIndividualList[0].IsHeadOfHousehold__c = true;
        update sspAppIndividualList;
        NavFlowStatus__c flowStatus = [SELECT Id, FlowPageStatus__c, FlowDupStatus__c, Screen_Status__c FROM NavFlowStatus__c WHERE NavFlowName__c = 'ContactInformation'];        
        List<NavFlowPageConfig__mdt> flowPageConfigList = NavFlowControllerTest.getNavFlowPageConfig ('ContactInformation');
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'ContactInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'next';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.modeValue = 'Intake';       	
        ctxData.curNavFlowPageConfigId = !flowPageConfigList.isEmpty() ? flowPageConfigList[0].Id : '';
        ctxData.SelectedScreen = new List<String>{'SSP_APP_Primary_Contact'};
        ctxData.SelectedPrograms = new List<String> {'MA'};  
        NavFlowDetail__mdt navFlowDetail = NavFlowManager.getNavFlowDetail(ctx, ctxData);
        flowStatus.Screen_Status__c = NavFlowStatJSONCLone.createScreenStatusJSON(ctxData,flowStatus,navFlowDetail,null,flowStatus.FlowPageStatus__c);
        Map<String,Object> mapScreenStatus = (Map<String,Object>)JSON.deserializeUntyped(flowStatus.Screen_Status__c);
        Object obj = (Object)mapScreenStatus.get('SSP_APP_Primary_Contact');
        
        SSP_RulesEngine.ScreenStatus screenStatus = (SSP_RulesEngine.ScreenStatus)JSON.deserialize(JSON.serialize(obj), SSP_RulesEngine.ScreenStatus.class); 
        
        screenStatus.isReviewRequired = true;
        
        mapScreenStatus.put('SSP_APP_Primary_Contact', screenStatus);
        flowStatus.Screen_Status__c = JSON.serialize(mapScreenStatus);
        update flowStatus;
        System.runAs(citizen){
            Test.startTest();
            SSP_LightningResponse resp = NavflowManager.fetchReviewRequiredDetails(ctxData.ApplicationId,ctxData.MemberId,ctxData.flowName,ctxData.modeValue);
            Test.stopTest();
        }
    }
    
     @istest
    public static void testFetchRRDetails1(){        
        String sectionStatus = '{"Intake":{"Contact_Information":"COMPLETED","SSP_APP_HHMembersSummary":"COMPLETED","SSP_APP_ProgramSelection":"COMPLETED","REPS_Home":"COMPLETED","Household_Information":"COMPLETED"}}';
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c, SSP_Application__r.SectionStatus__c FROM SSP_ApplicationIndividual__c];
        sspAppIndividualList[0].SSP_Application__r.SectionStatus__c = sectionStatus;        
        sspAppIndividualList[0].IsHeadOfHousehold__c = true;
        update sspAppIndividualList;
        List<NavFlowPageConfig__mdt> flowPageConfigList = NavFlowControllerTest.getNavFlowPageConfig ('HouseholdInformation');
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'HouseholdInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'next';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.modeValue = 'Intake';       	
        ctxData.curNavFlowPageConfigId = !flowPageConfigList.isEmpty() ? flowPageConfigList[0].Id : '';
        ctxData.SelectedScreen = new List<String>{'SSP_APP_Select_Health'};
        ctxData.SelectedPrograms = new List<String> {'MA'};  
        ctxData.noFlowStatusRRPages = new List<String>{'SSP_APP_Select_Health'};
        NavFlowDetail__mdt navFlowDetail = NavFlowManager.getNavFlowDetail(ctx, ctxData);
        System.runAs(citizen){
            Test.startTest();
            SSP_LightningResponse resp = NavflowManager.fetchReviewRequiredDetails(ctxData.ApplicationId,ctxData.MemberId,ctxData.flowName,ctxData.modeValue);
            Test.stopTest();
        }
    }
    
    @istest
    public static void testpassQueueFields (){
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c, SSP_Application__r.SectionStatus__c FROM SSP_ApplicationIndividual__c];
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        System.runAs(citizen){
            Test.startTest();
            QueuingWrapper resp = NavflowManager.passQueuingWrapper(sspAppIndividualList[0].SSP_Application__c);
            Test.stopTest();
        }
    }
    
    @istest
    public static void testScreenStatus (){       
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c, SSP_Application__r.SectionStatus__c FROM SSP_ApplicationIndividual__c];
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        List<NavFlowPageConfig__mdt> flowPageConfigList = NavFlowControllerTest.getNavFlowPageConfig ('ContactInformation');
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'HouseholdInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;  
        ctxData.action = 'next';
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.modeValue = 'Intake';       	
        ctxData.curNavFlowPageConfigId = !flowPageConfigList.isEmpty() ? flowPageConfigList[0].Id : '';
        ctxData.SelectedScreen = new List<String>{'SSP_APP_Select_Health'};
        ctxData.SelectedPrograms = new List<String> {'MA'};  
        ctxData.noFlowStatusRRPages = new List<String>{'SSP_APP_Select_Health'};
        NavFlowDetail__mdt navFlowDetail = NavFlowManager.getNavFlowDetail(ctx, ctxData);
        NavFlowStatus__c flowStatus = [SELECT Id, FlowPageStatus__c, FlowDupStatus__c, Screen_Status__c FROM NavFlowStatus__c WHERE NavFlowName__c = 'ContactInformation'];        
        flowStatus.Screen_Status__c = NavFlowStatJSON.createScreenStatusJSON(null,flowStatus,navFlowDetail,null,flowStatus.FlowPageStatus__c);
        Test.startTest();
        String flowString = NavFlowStatJSONClone.createScreenStatusJSON(ctxData,flowStatus,navFlowDetail,null,flowStatus.FlowPageStatus__c);
        system.assert(flowString != null);
        ctxData.modeValue = 'RAC';       	
        flowString = NavFlowStatJSONClone.createScreenStatusJSON(ctxData,flowStatus,navFlowDetail,null,flowStatus.FlowPageStatus__c);
        system.assert(flowString != null);        
        Test.stopTest();        
    }
        
}