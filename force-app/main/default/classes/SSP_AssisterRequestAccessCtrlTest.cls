/**
*@author       : Priyamvada Chundawat
*@date         : 07/08/2020
*@description  : Test class Assistance Request Control
*/ 
@isTest
public class SSP_AssisterRequestAccessCtrlTest {
    @testSetup static void setup() {
	 insert new LOG_LogMessageSettings__c(
            Name = RE_GlobalConstants.LOGS_DEFAULT_AUTOGENERATED,
            LOG_Debug__c = true,
            LOG_Error__c= true,
            LOG_Info__c = true,
            LOG_Warning__c = true,
            LOG_Log_Purge__c = 365
        );        
    }
    
    @isTest static void searchClientMCIServiceTest() {
        User portalUser  = SSP_TestDataFactory.createPortalUser();
        Test.startTest();
        System.runAs(portalUser){
            List<User> guestUser = SSP_TestDataFactory.createUser(1,false,'Resource Engine Profile');
            String sClientData = '{"firstName":"Test1","lastName":"","caseApplication":"","SSN":"","dob":"","gender":"","addressLine1":"","county":"","applicationStatus":"","caseStatus":"","renewalDueDate":"","rfiDueDate":"","submittedDate":"","assistedBy":"","maidNumber":"","phone":"","email":"","applicationSubmittedToggle":""}';
            SSP_AssisterRequestAccessCtrl.searchClientMCIService(sClientData);
            String sClientData2 = '{"firstName":"Test","lastName":"McTesty","caseApplication":"123456789","SSN":"123456789","dob":"2010-06-01","gender":"M","addressLine1":"test","county":"","applicationStatus":"","caseStatus":"","renewalDueDate":"","rfiDueDate":"","submittedDate":"LR","assistedBy":"","maidNumber":"","phone":"","email":"test@test.com","applicationSubmittedToggle":""}';
            SSP_AssisterRequestAccessCtrl.searchClientMCIService(sClientData2);
            String sClientData3 = '{"firstName":"Test","lastName":"McTesty","applicationNumber":"600000296","caseApplication":"123456789","SSN":"123456789","dob":"2010-06-01","gender":"M","addressLine1":"test","county":"","applicationStatus":"","caseStatus":"","renewalDueDate":"","rfiDueDate":"","submittedDate":"LR","assistedBy":"","maidNumber":"","phone":"","email":"test@test.com","applicationSubmittedToggle":""}';
            SSP_AssisterRequestAccessCtrl.searchClientMCIService(sClientData3);
            String sClientData4 = '{"firstName":"Test","lastName":"McTesty","applicationNumber":"","caseApplication":"123456789","SSN":"123456789","dob":"2010-06-01","gender":"M","addressLine1":"test","county":"","applicationStatus":"","caseStatus":"","renewalDueDate":"","rfiDueDate":"","submittedDate":"LR","assistedBy":"","maidNumber":"","phone":"","email":"test@test.com","applicationSubmittedToggle":""}';
            SSP_AssisterRequestAccessCtrl.searchClientMCIService(sClientData4);
            SSP_AssisterRequestAccessCtrl.searchClientMCIService('');
            String sClientData5 ='{}';
            SSP_AssisterRequestAccessCtrl.searchClientMCIService(sClientData5);
        }
        Test.stopTest();    
    }
    
    @isTest static void pollingNotificationIdTest() {
        Test.startTest();
        User thisUser = [ select Id from User where Id = :UserInfo.getUserId() ];
        System.runAs ( thisUser ) {
            List<Account> accList = SSP_TestDataFactory.createAccounts(1,true);
            List<Contact> conList = SSP_TestDataFactory.createContacts(1,true);
            Account accRecord = new account();
            accRecord.Name = 'Test Acc1114';
            insert accRecord;
            conList[0].AccountId = accRecord.Id;
            insert conList;
            AccountContactRelation conAccList = SSP_TestDataFactory.createAccountContactRelationshipRecord(conList[0].Id,accList[0].Id,true);
            Id recordTypeIdNotification = Schema.SObjectType.SSP_Notifications__c.getRecordTypeInfosByName().get('To Do').getRecordTypeId();
            SSP_Notifications__c notification = new SSP_Notifications__c();
            notification.recordtypeid = recordTypeIdNotification;
            notification.recipientType__c = 'citizen';
            notification.recipientId__c = '999036538';
            notification.Status__c = 'Expired';
            notification.Linked_Record_Id__c = String.valueOf(conAccList.Id);
            notification.notificationCode__c = 'SF-TOD-002';
            insert notification;
            String response = SSP_AssisterRequestAccessCtrl.pollingNotificationData(notification.Id);
            //system.assert(true,'Client Accepted');
            SSP_Notifications__c notification1 = new SSP_Notifications__c();
            notification1.recordtypeid = recordTypeIdNotification;
            notification1.recipientType__c = 'citizen';
            notification1.recipientId__c = '999036538';
            notification1.Status__c = 'Active';
            notification1.Linked_Record_Id__c = String.valueOf(conAccList.Id);
            notification1.notificationCode__c = 'SF-TOD-002';
            insert notification1;
            String response1 = SSP_AssisterRequestAccessCtrl.pollingNotificationData(notification1.Id);
            
            SSP_Notifications__c notification2 = new SSP_Notifications__c();
            notification1.recordtypeid = recordTypeIdNotification;
            notification1.recipientType__c = 'citizen';
            notification1.recipientId__c = '999036539';
            notification1.Status__c = '';
            notification1.Linked_Record_Id__c = String.valueOf(conAccList.Id);
            notification1.notificationCode__c = 'SF-TOD-003';
            insert notification2;
            String response2 = SSP_AssisterRequestAccessCtrl.pollingNotificationData(notification2.Id);
            
        }
        Test.stopTest();  
    }
    
    @isTest public static void getAssisterTest () {
        User thisUser = [ select Id from User where Id = :UserInfo.getUserId() ];
        System.runAs ( thisUser ){
         Test.startTest(); 
        Integer ctrl = SSP_AssisterRequestAccessCtrl.getAssisterTimeConfig();
        String assCtrl = SSP_AssisterRequestAccessCtrl.getCurrentLoggedInUserLang();
          Test.stopTest(); 
        }
    }
    
        @isTest public static void getAssisterTimeConfigTest () {
        User portalUser = SSP_TestDataFactory.createPortalUser();
        System.runAs ( portalUser ){
         Test.startTest(); 
        Integer ctrl = SSP_AssisterRequestAccessCtrl.getAssisterTimeConfig();
        String assCtrl = SSP_AssisterRequestAccessCtrl.getCurrentLoggedInUserLang();
          Test.stopTest(); 
        }
    }
    
    @isTest static void requestConsentApplicationTest() {
 
        Test.startTest();
         //Create non citizen contact/account/user
        Contact nonCitizenContact1 = SSP_TestDataFactory.createContactRecord('Allison', 'Gibbs', 'aliison@gibb.com', Schema.SObjectType.Contact.getRecordTypeInfosByName().get('Assister').getRecordTypeId(), true);
        nonCitizenContact1.DCDataId__c=344.0;        
        Update nonCitizenContact1;        
        System.assertNotEquals(null, nonCitizenContact1.Id, 'Assister Contact created successfully');
        
        Contact nonCitizenContact2 = SSP_TestDataFactory.createContactRecord('Allison1', 'Gibbs1', 'aliison1@gibb.com', Schema.SObjectType.Contact.getRecordTypeInfosByName().get('Assister').getRecordTypeId(), true);
        nonCitizenContact2.KOGSourceId__c='qidsdiqu83728jkdh';
        nonCitizenContact2.AssociatedCountyCode__c='536;7363';
        Update nonCitizenContact2;
            
            //Create citizen contact/account
        Contact citizenContact1 = SSP_TestDataFactory.createContactRecord('Andrew', 'Nelson', 'andrew@nelson.com', Schema.SObjectType.Contact.getRecordTypeInfosByName().get('Citizen').getRecordTypeId(), true);
        System.assertNotEquals(null, citizenContact1.Id, 'Citizen Contact created successfully');
        
        
        //Create organization account
        List<Account> listOrgAccount = SSP_TestDataFactory.createAccounts(1, true, Schema.SObjectType.Account.getRecordTypeInfosByName().get('Organization').getRecordTypeId());
        listOrgAccount[0].DCDataId__c=4.0;
        update listOrgAccount;
        System.assertNotEquals(null, listOrgAccount[0].Id, 'Org Account created successfully');
        
        //Application Account
        List<Account> listAppAccount = SSP_TestDataFactory.createAccounts(3, true, Schema.SObjectType.Account.getRecordTypeInfosByName().get('Application').getRecordTypeId());
        
        System.assertNotEquals(null, listOrgAccount[0].Id, 'App Account created successfully');
        
        //Create ACR 
        List<AccountContactRelation> listACR = new List<AccountContactRelation>();
        AccountContactRelation orgACR = SSP_TestDataFactory.createAccountContactRelationshipRecord(nonCitizenContact2.Id, listOrgAccount[0].Id, false);
        orgACR.Roles = 'Assister;Authorized Representative';
        listACR.add(orgACR);
            
       // AccountContactRelation appACR = SSP_TestDataFactory.createAccountContactRelationshipRecord(citizenContact1.Id, listAppAccount[0].Id, false);
        //appACR.DCContactId__c=747238.0;
        //listACR.add(appACR);
            
        AccountContactRelation assisterACR = SSP_TestDataFactory.createAccountContactRelationshipRecord(nonCitizenContact1.Id, listAppAccount[0].Id, false);
        assisterACR.Roles = 'Assister;Authorized Representative';
        listACR.add(assisterACR);
            
        AccountContactRelation actualACR = SSP_TestDataFactory.createAccountContactRelationshipRecord(citizenContact1.id,listAppAccount[0].Id, false);
        assisterACR.Roles = 'Assister;Authorized Representative';
        listACR.add(actualACR);
        insert listACR;
        
//Create member 
        List<SSP_Member__c> listMembers = SSP_TestDataFactory.createSSPMembers(1, false);
        listMembers[0].FirstName__c='Andrews';
        listMembers[0].LastName__c='Nelsonj';
        listMembers[0].GenderCode__c='M';
        listMembers[0].Contact__c = citizenContact1.Id;
        insert listMembers;
        System.assertNotEquals(null, listMembers[0].Id, 'SSP Member created successfully');
        
        Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper> mapCaseInfo = new Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper>();
        Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper> mapAppInfo = new Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper>();
        List<Integer> SetCaseId;
        // application record for citizen
        List<SSP_Application__c> listApplication = SSP_TestDataFactory.createSSPApplications(1, false);
        listApplication[0].Account__c = listACR[1].AccountId;
        insert listApplication;
        
        List<SSP_ApplicationIndividual__c> listAppIndiv = SSP_TestDataFactory.createApplicationIndividuals(1, false);
        listAppIndiv[0].SSP_Member__c = listMembers[0].Id;
        listAppIndiv[0].SSP_Application__c = listApplication[0].Id;
        listAppIndiv[0].IsHeadOfHousehold__c = true;
        insert listAppIndiv;
        User thisUser = [ select Id from User where Id = :UserInfo.getUserId() ];
        System.runAs ( thisUser ) { 
            SSP_AssisterRequestAccessCtrl.requestConsentApplication(listAppIndiv[0].Id, listApplication[0].Id);
            SSP_AssisterRequestAccessCtrl.requestConsentApplication(null, listApplication[0].Id);
            SSP_AssisterRequestAccessCtrl.requestConsentApplication(listAppIndiv[0].Id, '');
            SSP_AssisterRequestAccessCtrl.requestConsentApplication('','');
            SSP_AssisterRequestAccessCtrl.requestConsentApplication(null, null);
            SSP_AssisterRequestAccessCtrl.updateApplicationBlocked(listApplication[0].Id);
            SSP_AssisterRequestAccessCtrl.updateApplicationBlocked(null);
            SSP_AssisterRequestAccessCtrl.revertRequestAccess(listApplication[0].Id);
            system.debug('Check Application Id' + listApplication[0].Id);
            SSP_AssisterRequestAccessCtrl.revertRequestAccess(null);
          
        }   
        Test.stopTest();  
    }
    
    @isTest public static void createACRNotificationTest(){
       // User portalUser  = SSP_TestDataFactory.createPortalUser();
        Test.startTest();
        //System.runAs(portalUser){
        Integer dcDataId = 234720;
        Integer dcContactId = 374563;
        String caseNumber = '987654321';
        Id sCitizenAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Citizen');
        Id sREAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Resource_Engine');
        Id sAppAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Application');

        List<Account> accountList = SSP_TestDataFactory.createAccounts(5,true,sCitizenAccRecTypeId);
        List<Id> lstAccountIds = new List<Id>();
        lstAccountIds.add(accountList[0].Id);
        
        List<Account> reAccount = SSP_TestDataFactory.createAccounts(1,true,sREAccRecTypeId);

        List<Account> appAccount = SSP_TestDataFactory.createAccounts(1,false,sAppAccRecTypeId);
        appAccount[0].DCDataId__c = dcDataId;
        appAccount[0].CaseNumber__c = caseNumber;
        insert appAccount;

        
        Id contactRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Citizen');
        Contact objAdminContact = SSP_TestDataFactory.createContactRecord('Admin', 'User', 'admin@abc.xyz' , contactRecordTypeId, true);
        Contact objCitizenContact = SSP_TestDataFactory.createContactRecord('Citizen', 'User', 'citizen@abc.xyz', contactRecordTypeId, true);
        
        User objAdminUser = SSP_TestDataFactory.createCommunityUser('sspA', null, 'admin@abc.xyz', 'System Administrator',true);
        
        User objCitizenUser = SSP_TestDataFactory.createCommunityUser('sspC', objCitizenContact.Id,'citizen@abc.xyz', 'RE Citizen Profile', true);
        
        AccountContactRelation acrRec = SSP_TestDataFactory.createAccountContactRelationshipRecord(objCitizenContact.Id,reAccount[0].Id,false);
        acrRec.Roles = 'Assister;Authorized Representative';
        insert acrRec;
                
        Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper> mapCaseInfo = new Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper>();
        Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper> mapAppInfo = new Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper>();
            List<Integer> SetCaseId;

        List<SSP_Application__c> lstAppln = SSP_TestDataFactory.createSSPApplications(1, false);
        lstAppln[0].Account__c=reAccount[0].Id;        
        lstAppln[0].Contact__c = objCitizenContact.Id;
        lstAppln[0].ProgramsApplied__c='MA;KP';
        lstAppln= ESAPI.accessController().insertAsUser(lstAppln, SSP_Utility.getFieldsNamesList (lstAppln)).getInsertedObjects();
        
        SSP_Application__c aaplication=[Select Id,Name FROM SSP_Application__c WHERE ID=:lstAppln[0].Id];
        
            SSP_AssisterRequestAccessCtrl.createACRNotification('234567788;546789023', SetCaseId, mapCaseInfo, aaplication.Name, mapAppInfo);
            SSP_AssisterRequestAccessCtrl.createACRNotification(null, SetCaseId, mapCaseInfo, aaplication.Name, mapAppInfo);
            SSP_AssisterRequestAccessCtrl.createACRNotification('546789023', SetCaseId, mapCaseInfo, null, mapAppInfo);
            SSP_AssisterRequestAccessCtrl.createACRNotification('234567788;546789023', SetCaseId, mapCaseInfo,'600000296', mapAppInfo);
        
    //}
       Test.stopTest();
    }

    @isTest public static void createACRNotificationTest2(){
        Test.startTest();
        Id sCitizenAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Citizen');
        Id sREAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Resource_Engine');
        Id sAppAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Application');

        List<Account> accountList = SSP_TestDataFactory.createAccounts(5,true,sCitizenAccRecTypeId);
        List<Id> lstAccountIds = new List<Id>();
        lstAccountIds.add(accountList[0].Id);
        
        List<Account> reAccount = SSP_TestDataFactory.createAccounts(1,true,sREAccRecTypeId);

        
        Id contactRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Citizen');
        Contact objAdminContact = SSP_TestDataFactory.createContactRecord('Admin', 'User', 'admin@abc.xyz' , contactRecordTypeId, true);
        Contact objCitizenContact = SSP_TestDataFactory.createContactRecord('Citizen', 'User', 'citizen@abc.xyz', contactRecordTypeId, true);
        
        AccountContactRelation acrRec = SSP_TestDataFactory.createAccountContactRelationshipRecord(objCitizenContact.Id,reAccount[0].Id,false);
        acrRec.Roles = 'Assister;Authorized Representative';
        acrRec.RequestAccessPermission__c='{"PermissionLevel_Medicaid__c":"ST","PermissionLevel_KIHIPP__c":"ST"}';
        insert acrRec;
        
        Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper> mapCaseInfo = new Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper>();
        Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper> mapAppInfo = new Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper>();
        List<Integer> SetCaseId = new List<Integer>{1,2,3};
        Id recordTypeIdNotification = Schema.SObjectType.SSP_Notifications__c.getRecordTypeInfosByName().get('To Do').getRecordTypeId();
        SSP_Notifications__c notification = new SSP_Notifications__c();
        notification.recordtypeid = recordTypeIdNotification;
        notification.recipientType__c = 'citizen';
        notification.recipientId__c = '999036538';
        notification.Status__c = 'Expired';
        notification.Linked_Record_Id__c = String.valueOf(acrRec.Id);
        notification.notificationCode__c = 'SF-TOD-002';
        insert notification;
        
            SSP_AssisterRequestAccessCtrl.createACRNotification('999036538', SetCaseId, mapCaseInfo, '600000296', mapAppInfo);
            SSP_AssisterRequestAccessCtrl.createACRNotification('999038069', SetCaseId, mapCaseInfo, 'a09r00000023BulAAE', mapAppInfo);
            SSP_AssisterRequestAccessCtrl.createACRNotification(null, SetCaseId, mapCaseInfo, '600000472', mapAppInfo);
            SSP_AssisterRequestAccessCtrl.createACRNotification('546789023', SetCaseId, mapCaseInfo, null, mapAppInfo);
        
        Test.stopTest();
    }
    
     @isTest static void createACRNotificationTest3() {
                //Setup Data
        Integer dcDataId = 234720;
        Integer dcContactId = 374563;
        String caseNumber = '987654321';
        String caseNumber2 = '654321987';
        String caseNumber3 = '654321989';
        String caseNumber4 = '654321985';
        
        Id sCitizenAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Citizen');
        Id sREAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Resource_Engine');
        Id sAppAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Application');

        List<Account> accountList = SSP_TestDataFactory.createAccounts(5,true,sCitizenAccRecTypeId);
        List<Id> lstAccountIds = new List<Id>();
        lstAccountIds.add(accountList[0].Id);
         
        List<Account> reAccount = SSP_TestDataFactory.createAccounts(1,true,sREAccRecTypeId);

        List<Account> appAccount = SSP_TestDataFactory.createAccounts(1,false,sAppAccRecTypeId);
        appAccount[0].DCDataId__c = dcDataId;
        appAccount[0].CaseNumber__c = caseNumber;
        insert appAccount;

        
        Id contactRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Citizen');
        Contact objAdminContact = SSP_TestDataFactory.createContactRecord('Admin', 'User', 'admin@abc.xyz' , contactRecordTypeId, true);
        Contact objCitizenContact = SSP_TestDataFactory.createContactRecord('Citizen', 'User', 'citizen@abc.xyz', contactRecordTypeId, true);
        
        User objAdminUser = SSP_TestDataFactory.createCommunityUser('sspA', null, 'admin@abc.xyz', 'System Administrator',true);
        
        User objCitizenUser = SSP_TestDataFactory.createCommunityUser('sspC', objCitizenContact.Id,'citizen@abc.xyz', 'RE Citizen Profile', true);
        
       //Create citizen contact/account
        Contact citizenContact1 = SSP_TestDataFactory.createContactRecord('Andrew', 'Nelson', 'andrew@nelson.com', Schema.SObjectType.Contact.getRecordTypeInfosByName().get('Citizen').getRecordTypeId(), true);
        System.assertNotEquals(null, citizenContact1.Id, 'Citizen Contact created successfully');
        AccountContactRelation acrRec = SSP_TestDataFactory.createAccountContactRelationshipRecord(citizenContact1.Id,appAccount[0].Id,false);
        acrRec.DCContactId__c = dcContactId;
        acrRec.Roles = 'Assister;Authorized Representative';
        insert acrRec;

        List<SSP_Application__c> sspApplications = SSP_TestDataFactory.createSSPApplications(1,false);
        sspApplications[0].RecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('SSP_Application__c','Case');
        sspApplications[0].DCCaseNumber__c = Integer.valueOf(caseNumber);
        sspApplications[0].Account__c = appAccount[0].Id;
        insert sspApplications;
         
         //Create member 
        List<SSP_Member__c> listMembers = SSP_TestDataFactory.createSSPMembers(1, false);
        listMembers[0].FirstName__c='Andrews';
        listMembers[0].LastName__c='Nelsonj';
        listMembers[0].GenderCode__c='M';
        listMembers[0].Contact__c = citizenContact1.Id;
        insert listMembers;
         
        system.debug(sspApplications);
         system.debug('@#@#@#sspApplication'+[select id,name from SSP_Application__c where id=:sspApplications[0].id]);
       
         SSP_Application__c objSSPApplication = [select id,name from SSP_Application__c where id=:sspApplications[0].id LIMIT 1];
         SSP_AssisterAccessRequestCtrl.CaseInfoWrapper AppInfoRec = new SSP_AssisterAccessRequestCtrl.CaseInfoWrapper();
        AppInfoRec.ProgramCode = 'MA;KP';
        AppInfoRec.ApplicationNumber = objSSPApplication.Name;
         
        String sProgramLabel='MA;KP';
        List<SSP_ApplicationIndividual__c> listAppIndiv = SSP_TestDataFactory.createApplicationIndividuals(1, false);
        listAppIndiv[0].SSP_Member__c = listMembers[0].Id;
        listAppIndiv[0].SSP_Application__c = sspApplications[0].Id;
        listAppIndiv[0].IsHeadOfHousehold__c = true;
        insert listAppIndiv;
         
        SSP_AssisterAccessRequestCtrl.CaseInfoWrapper caseInfoRec = new SSP_AssisterAccessRequestCtrl.CaseInfoWrapper();
        caseInfoRec.CaseNumber = caseNumber;
        caseInfoRec.ProgramCode = 'MA;KP';

        
        SSP_AssisterAccessRequestCtrl.CaseInfoWrapper caseInfoRec2 = new SSP_AssisterAccessRequestCtrl.CaseInfoWrapper();
        caseInfoRec2.CaseNumber = caseNumber2;
        caseInfoRec2.ProgramCode = 'MA;KP';

        SSP_AssisterAccessRequestCtrl.CaseInfoWrapper caseInfoRec3 = new SSP_AssisterAccessRequestCtrl.CaseInfoWrapper();
        caseInfoRec3.CaseNumber = caseNumber3;
        caseInfoRec3.ProgramCode = 'MA';

        SSP_AssisterAccessRequestCtrl.CaseInfoWrapper caseInfoRec4 = new SSP_AssisterAccessRequestCtrl.CaseInfoWrapper();
        caseInfoRec4.CaseNumber = caseNumber4;
        caseInfoRec4.ProgramCode = 'KP';

        list<Integer> setCaseIds = new list<Integer>();
        setCaseIds.add(Integer.valueOf(caseNumber));
        setCaseIds.add(Integer.valueOf(caseNumber2));
        setCaseIds.add(Integer.valueOf(caseNumber3));
        setCaseIds.add(Integer.valueOf(caseNumber4));

        Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper> mapCaseInfo = new Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper>();        
        mapCaseInfo.put(caseNumber,caseInfoRec);
        mapCaseInfo.put(caseNumber2,caseInfoRec2);
        mapCaseInfo.put(caseNumber3,caseInfoRec3);
        mapCaseInfo.put(caseNumber4,caseInfoRec4);
        
        Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper> mapAppInfo = new Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper>(); 
        mapAppInfo.put(objSSPApplication.Name,AppInfoRec);
            
        Test.setMock(HttpCalloutMock.class, new SSP_ProgramSelectionServiceMock());
        Test.startTest();
        SSP_Application__c application=[Select Id,Name FROM SSP_Application__c WHERE ID=:sspApplications[0].Id];
        SSP_ApplicationIndividual__c Indvidual=[Select Id,Name FROM SSP_ApplicationIndividual__c WHERE ID=:listAppIndiv[0].Id];
       system.runAs(objCitizenUser){    
           // SSP_AssisterRequestAccessCtrl.createACRNotification('999036538', setCaseIds, mapCaseInfo, '600000296', mapAppInfo);
            SSP_AssisterRequestAccessCtrl.createACRNotification('999036538', setCaseIds, mapCaseInfo,objSSPApplication.Name, mapAppInfo); 
           SSP_AssisterRequestAccessCtrl.createACRNotification('999036538', setCaseIds, mapCaseInfo,'', mapAppInfo);
            SSP_AssisterRequestAccessCtrl.createACRNotification('999036538', setCaseIds, mapCaseInfo, '600000296', mapAppInfo);
            SSP_AssisterRequestAccessCtrl.createACRNotification('999038069', setCaseIds, mapCaseInfo, 'a09r00000023BulAAE', mapAppInfo);
            SSP_AssisterRequestAccessCtrl.createACRNotification(null, setCaseIds, mapCaseInfo, '600000472', mapAppInfo);
            SSP_AssisterRequestAccessCtrl.createACRNotification('546789023', setCaseIds, mapCaseInfo, null, mapAppInfo);
            SSP_AssisterRequestAccessCtrl.revertRequestAccess(application.Id);
            SSP_AssisterRequestAccessCtrl.revertRequestAccess(null);
            SSP_AssisterRequestAccessCtrl.revertRequestAccess('');
          /*  SSP_AssisterRequestAccessCtrl.requestConsentApplication(application.Id, Indvidual.Id);
            SSP_AssisterRequestAccessCtrl.requestConsentApplication(application.Id, null);
            SSP_AssisterRequestAccessCtrl.requestConsentApplication(null, Indvidual.Id);
            SSP_AssisterRequestAccessCtrl.requestConsentApplication(application.Id, '');
            SSP_AssisterRequestAccessCtrl.requestConsentApplication('','');
            SSP_AssisterRequestAccessCtrl.requestConsentApplication(null, null);
            SSP_AssisterRequestAccessCtrl.updateApplicationBlocked(application.Id);
            SSP_AssisterRequestAccessCtrl.updateApplicationBlocked(null);
            
            system.debug('Check Application Id' + application.Id);
            SSP_AssisterRequestAccessCtrl.revertRequestAccess(null);*/
        
         
            //SSP_AssisterRequestAccessCtrl.createACRNotification('999036538', setCaseIds, mapCaseInfo,application.Name , mapAppInfo);
        }
        Test.stopTest();
    }
    
         @isTest static void createACRNotificationTest4() {
        
        Integer dcDataId = 234720;
        Integer dcContactId = 374563;
        String caseNumber = '987654321';
        String caseNumber2 = '654321987';
        String caseNumber3 = '654321989';
        String caseNumber4 = '654321985';
       
        Id sREAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Resource_Engine');
        Id sAppAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Application');
        Id sCitizenAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Citizen');
        
        List<Account> accountList = SSP_TestDataFactory.createAccounts(5,true,sCitizenAccRecTypeId);
        List<Id> lstAccountIds = new List<Id>();
        lstAccountIds.add(accountList[0].Id);
           
        List<Account> appAccount = SSP_TestDataFactory.createAccounts(1,false,sAppAccRecTypeId);
        appAccount[0].DCDataId__c = dcDataId;
        appAccount[0].CaseNumber__c = caseNumber;
        insert appAccount;
        
        Id contactRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Citizen');
        Contact objAdminContact = SSP_TestDataFactory.createContactRecord('Admin', 'User', 'admin1@abc.xyz' , contactRecordTypeId, true);
        Contact objNonCitizenContact = SSP_TestDataFactory.createContactRecord('NonCitizen', 'User', 'noncitizen@abc.xyz', contactRecordTypeId, true);
        
        User objNonCitizenUser = SSP_TestDataFactory.createCommunityUser('sspNonC', objNonCitizenContact.Id,'noncitizen@abc.xyz', 'SSP Non Citizen Profile', true);
        
                  //Create citizen contact/account
        Contact NoncitizenContact1 = SSP_TestDataFactory.createContactRecord('Andrew', 'Nelson', 'andrew@nelson.com', Schema.SObjectType.Contact.getRecordTypeInfosByName().get('Non Citizen').getRecordTypeId(), true);
        System.assertNotEquals(null, NoncitizenContact1.Id, 'Citizen Contact created successfully');
        AccountContactRelation acrRec = SSP_TestDataFactory.createAccountContactRelationshipRecord(NoncitizenContact1.Id,appAccount[0].Id,false);
        acrRec.DCContactId__c = dcContactId;
        acrRec.Roles = 'Assister;Authorized Representative';
        insert acrRec;

        List<SSP_Application__c> sspApplications = SSP_TestDataFactory.createSSPApplications(1,false);
        sspApplications[0].RecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('SSP_Application__c','Case');
        sspApplications[0].DCCaseNumber__c = Integer.valueOf(caseNumber);
        sspApplications[0].Account__c = appAccount[0].Id;
        insert sspApplications;
         
         //Create member 
        List<SSP_Member__c> listMembers = SSP_TestDataFactory.createSSPMembers(1, false);
        listMembers[0].FirstName__c='Andrews';
        listMembers[0].LastName__c='Nelsonj';
        listMembers[0].GenderCode__c='M';
        listMembers[0].Contact__c = NoncitizenContact1.Id;
        insert listMembers;
         
        system.debug(sspApplications);
        SSP_AssisterAccessRequestCtrl.CaseInfoWrapper AppInfoRec = new SSP_AssisterAccessRequestCtrl.CaseInfoWrapper();
        AppInfoRec.ProgramCode = 'MA;KP';
        AppInfoRec.ApplicationNumber = sspApplications[0].Name;
        
        List<SSP_ApplicationIndividual__c> listAppIndiv = SSP_TestDataFactory.createApplicationIndividuals(1, false);
        listAppIndiv[0].SSP_Member__c = listMembers[0].Id;
        listAppIndiv[0].SSP_Application__c = sspApplications[0].Id;
        listAppIndiv[0].IsHeadOfHousehold__c = true;
        insert listAppIndiv;
         
        SSP_AssisterAccessRequestCtrl.CaseInfoWrapper caseInfoRec = new SSP_AssisterAccessRequestCtrl.CaseInfoWrapper();
        caseInfoRec.CaseNumber = caseNumber;
        caseInfoRec.ProgramCode = 'MA;KP';

        
        SSP_AssisterAccessRequestCtrl.CaseInfoWrapper caseInfoRec2 = new SSP_AssisterAccessRequestCtrl.CaseInfoWrapper();
        caseInfoRec2.CaseNumber = caseNumber2;
        caseInfoRec2.ProgramCode = 'MA;KP';

        SSP_AssisterAccessRequestCtrl.CaseInfoWrapper caseInfoRec3 = new SSP_AssisterAccessRequestCtrl.CaseInfoWrapper();
        caseInfoRec3.CaseNumber = caseNumber3;
        caseInfoRec3.ProgramCode = 'MA';

        SSP_AssisterAccessRequestCtrl.CaseInfoWrapper caseInfoRec4 = new SSP_AssisterAccessRequestCtrl.CaseInfoWrapper();
        caseInfoRec4.CaseNumber = caseNumber4;
        caseInfoRec4.ProgramCode = 'KP';

        list<Integer> setCaseIds = new list<Integer>();
        setCaseIds.add(Integer.valueOf(caseNumber));
        setCaseIds.add(Integer.valueOf(caseNumber2));
        setCaseIds.add(Integer.valueOf(caseNumber3));
        setCaseIds.add(Integer.valueOf(caseNumber4));

        Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper> mapCaseInfo = new Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper>();        
        mapCaseInfo.put(caseNumber,caseInfoRec);
        mapCaseInfo.put(caseNumber2,caseInfoRec2);
        mapCaseInfo.put(caseNumber3,caseInfoRec3);
        mapCaseInfo.put(caseNumber4,caseInfoRec4);
        
        Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper> mapAppInfo = new Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper>(); 
        mapAppInfo.put(sspApplications[0].Name,AppInfoRec);
            
        Test.setMock(HttpCalloutMock.class, new SSP_ProgramSelectionServiceMock());
        Test.startTest();
        
        SSP_Application__c application=[Select Id,Name FROM SSP_Application__c WHERE ID=:sspApplications[0].Id];
        SSP_ApplicationIndividual__c Indvidual=[Select Id,Name FROM SSP_ApplicationIndividual__c WHERE ID=:listAppIndiv[0].Id];
        System.runAs(objNonCitizenUser){
             SSP_AssisterRequestAccessCtrl.createACRNotification('999036538', setCaseIds, mapCaseInfo,'', mapAppInfo);
            SSP_AssisterRequestAccessCtrl.createACRNotification('999036538', setCaseIds, mapCaseInfo, '600000296', mapAppInfo);
            SSP_AssisterRequestAccessCtrl.createACRNotification('999038069', setCaseIds, mapCaseInfo, 'a09r00000023BulAAE', mapAppInfo);
            SSP_AssisterRequestAccessCtrl.createACRNotification(null, setCaseIds, mapCaseInfo, '600000472', mapAppInfo);
            SSP_AssisterRequestAccessCtrl.createACRNotification('546789023', setCaseIds, mapCaseInfo, null, mapAppInfo);
            SSP_AssisterRequestAccessCtrl.revertRequestAccess(application.Id);
            SSP_AssisterRequestAccessCtrl.revertRequestAccess(null);
            SSP_AssisterRequestAccessCtrl.revertRequestAccess('');
           
        }
        Test.stopTest();    
       }
    
     @isTest static void createACRNotificationTest5() {
        
        Integer dcDataId = 234720;
        Integer dcContactId = 374563;
        String caseNumber = '987654321';
        String caseNumber2 = '654321987';
        String caseNumber3 = '654321989';
        String caseNumber4 = '654321985';
       
        Id sREAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Resource_Engine');
        Id sAppAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Application');
        Id sCitizenAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Citizen');
        
       /* List<Account> accountList = SSP_TestDataFactory.createAccounts(5,true,sCitizenAccRecTypeId);
        List<Id> lstAccountIds = new List<Id>();
        lstAccountIds.add(accountList[0].Id);*/
           
        List<Account> appAccount = SSP_TestDataFactory.createAccounts(1,false,sAppAccRecTypeId);
        appAccount[0].DCDataId__c = dcDataId;
        appAccount[0].CaseNumber__c = caseNumber;
        insert appAccount;
        
        Id contactRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Citizen');
        Contact objAdminContact = SSP_TestDataFactory.createContactRecord('Admin', 'User', 'admin1@abc.xyz' , contactRecordTypeId, true);
        Contact objNonCitizenContact = SSP_TestDataFactory.createContactRecord('NonCitizen', 'User', 'noncitizen@abc.xyz', contactRecordTypeId, true);
        
        User objNonCitizenUser = SSP_TestDataFactory.createCommunityUser('sspNonC', objNonCitizenContact.Id,'noncitizen@abc.xyz', 'SSP Non Citizen Profile', true);
        
                  //Create citizen contact/account
        Contact NoncitizenContact1 = SSP_TestDataFactory.createContactRecord('Andrew', 'Nelson', 'andrew@nelson.com', Schema.SObjectType.Contact.getRecordTypeInfosByName().get('Non Citizen').getRecordTypeId(), true);
        System.assertNotEquals(null, NoncitizenContact1.Id, 'Citizen Contact created successfully');
       
         AccountContactRelation acrRec = SSP_TestDataFactory.createAccountContactRelationshipRecord(objNonCitizenContact.Id,appAccount[0].Id,false);
        acrRec.DCContactId__c = dcContactId;
        acrRec.Roles = 'Assister';
        insert acrRec;
        system.debug('@@@@@@acrRec'+acrRec);
        //acrRec.Roles = null;
        //acrRec.RequestAccessPermission__c=null;
         //update acrRec;
         
        Id recordTypeIdNotification = Schema.SObjectType.SSP_Notifications__c.getRecordTypeInfosByName().get('To Do').getRecordTypeId();
            SSP_Notifications__c notification = new SSP_Notifications__c();
            notification.recordtypeid = recordTypeIdNotification;
            notification.recipientType__c = 'citizen';
            notification.recipientId__c = '999036538';
            notification.Status__c = 'Active';
           notification.Linked_Record_Id__c = String.valueOf(acrRec.Id);
            notification.notificationCode__c = 'SF-TOD-003';
            insert notification;

        List<SSP_Application__c> sspApplications = SSP_TestDataFactory.createSSPApplications(1,false);
        sspApplications[0].RecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('SSP_Application__c','Case');
        sspApplications[0].DCCaseNumber__c = Integer.valueOf(caseNumber);
        sspApplications[0].Account__c = appAccount[0].Id;
        insert sspApplications;
         
         //Create member 
        List<SSP_Member__c> listMembers = SSP_TestDataFactory.createSSPMembers(1, false);
        listMembers[0].FirstName__c='Andrews';
        listMembers[0].LastName__c='Nelsonj';
        listMembers[0].GenderCode__c='M';
        listMembers[0].Contact__c = NoncitizenContact1.Id;
        insert listMembers;
         
        system.debug(sspApplications);
        SSP_AssisterAccessRequestCtrl.CaseInfoWrapper AppInfoRec = new SSP_AssisterAccessRequestCtrl.CaseInfoWrapper();
        AppInfoRec.ProgramCode = 'MA;KP';
        AppInfoRec.ApplicationNumber = sspApplications[0].Name;
        
        List<SSP_ApplicationIndividual__c> listAppIndiv = SSP_TestDataFactory.createApplicationIndividuals(1, false);
        listAppIndiv[0].SSP_Member__c = listMembers[0].Id;
        listAppIndiv[0].SSP_Application__c = sspApplications[0].Id;
        listAppIndiv[0].IsHeadOfHousehold__c = true;
        insert listAppIndiv;
         
        SSP_AssisterAccessRequestCtrl.CaseInfoWrapper caseInfoRec = new SSP_AssisterAccessRequestCtrl.CaseInfoWrapper();
        caseInfoRec.CaseNumber = caseNumber;
        caseInfoRec.ProgramCode = 'MA;KP';

        
        SSP_AssisterAccessRequestCtrl.CaseInfoWrapper caseInfoRec2 = new SSP_AssisterAccessRequestCtrl.CaseInfoWrapper();
        caseInfoRec2.CaseNumber = caseNumber2;
        caseInfoRec2.ProgramCode = 'MA;KP';

        SSP_AssisterAccessRequestCtrl.CaseInfoWrapper caseInfoRec3 = new SSP_AssisterAccessRequestCtrl.CaseInfoWrapper();
        caseInfoRec3.CaseNumber = caseNumber3;
        caseInfoRec3.ProgramCode = 'MA';

        SSP_AssisterAccessRequestCtrl.CaseInfoWrapper caseInfoRec4 = new SSP_AssisterAccessRequestCtrl.CaseInfoWrapper();
        caseInfoRec4.CaseNumber = caseNumber4;
        caseInfoRec4.ProgramCode = 'KP';

        list<Integer> setCaseIds = new list<Integer>();
        setCaseIds.add(Integer.valueOf(caseNumber));
        setCaseIds.add(Integer.valueOf(caseNumber2));
        setCaseIds.add(Integer.valueOf(caseNumber3));
        setCaseIds.add(Integer.valueOf(caseNumber4));

        Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper> mapCaseInfo = new Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper>();        
        mapCaseInfo.put(caseNumber,caseInfoRec);
        mapCaseInfo.put(caseNumber2,caseInfoRec2);
        mapCaseInfo.put(caseNumber3,caseInfoRec3);
        mapCaseInfo.put(caseNumber4,caseInfoRec4);
        
        Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper> mapAppInfo = new Map<String, SSP_AssisterAccessRequestCtrl.CaseInfoWrapper>(); 
        mapAppInfo.put(sspApplications[0].Name,AppInfoRec);
            
        Test.setMock(HttpCalloutMock.class, new SSP_ProgramSelectionServiceMock());
        Test.startTest();
        
        SSP_Application__c application=[Select Id,Name FROM SSP_Application__c WHERE ID=:sspApplications[0].Id];
        SSP_ApplicationIndividual__c Indvidual=[Select Id,Name FROM SSP_ApplicationIndividual__c WHERE ID=:listAppIndiv[0].Id];
        System.runAs(objNonCitizenUser){
            // SSP_AssisterRequestAccessCtrl.createACRNotification('999036538', setCaseIds, mapCaseInfo,'', mapAppInfo);
            //SSP_AssisterRequestAccessCtrl.createACRNotification('999036538', setCaseIds, mapCaseInfo, '600000296', mapAppInfo);
            //SSP_AssisterRequestAccessCtrl.createACRNotification('999038069', setCaseIds, mapCaseInfo, 'a09r00000023BulAAE', mapAppInfo);
            //SSP_AssisterRequestAccessCtrl.createACRNotification(null, setCaseIds, mapCaseInfo, '600000472', mapAppInfo);
            //SSP_AssisterRequestAccessCtrl.createACRNotification('546789023', setCaseIds, mapCaseInfo, null, mapAppInfo);
            SSP_AssisterRequestAccessCtrl.revertRequestAccess(application.Id);
            SSP_AssisterRequestAccessCtrl.revertRequestAccess(null);
            SSP_AssisterRequestAccessCtrl.revertRequestAccess('');
           
        }
        Test.stopTest();    
       }
        
}