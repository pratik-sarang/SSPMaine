/*
* classname 	: SSP_ApplicantAddressRuleTest
* @description 	: A test class for SSP_ApplicantAddressRule class.
* @author 		: Ajay Saini
* @date 		: DEC-2-2019
* MODIFICATION LOG:
* DEVELOPER 			DATE 			DESCRIPTION
* ---------------------------------------------------------------------------------------------
* Ajay Saini 		DEC-2-2019			Initial Version
*/

@isTest(seeAllData=false)
public class SSP_ApplicantAddressRuleTest {
    @testSetup
    public static void initialDataSetup() {
        insert new LOG_LogMessageSettings__c(
            Name = RE_GlobalConstants.LOGS_DEFAULT_AUTOGENERATED,
            LOG_Debug__c = true,
            LOG_Error__c= true,
            LOG_Info__c = true,
            LOG_Warning__c = true,
            LOG_Log_Purge__c = 365
        );
        Id sCitizenAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Citizen');
        SSP_TestDataFactory.createContactRecord('Test', 'Test', 'test@tester.com', sCitizenAccRecTypeId, true);
    }

    public static User getPortalUser() {
        return SSP_TestDataFactory.createPortalUser();
    }
    
    public static void dataSetup() {
        Integer n = 1;
        Contact contactRecord = [SELECT Id, AccountId FROM Contact LIMIT 1];
        List<SSP_Application__c> applications = SSP_TestDataFactory.createSSPApplications(n, false);
        for(Integer i = 0; i < n; ++i) {
            applications[i].Account__c = contactRecord.accountId;
		}
		insert applications;
        
        n = 2;
        List<SSP_Member__c> members = SSP_TestDataFactory.createSSPMembers(n, false);
        for(SSP_Member__c member : members) {
            member.Contact__c = contactRecord.Id;
        }
        insert members;
        
        List<SSP_ApplicationIndividual__c> individuals = SSP_TestDataFactory.createApplicationIndividuals(n, false);
        for(Integer i = 0; i < n; ++i) {
            individuals[i].SSP_Member__c = members[i].Id;
            individuals[i].SSP_Application__c = applications[0].Id;
            individuals[i].IsHeadOfHousehold__c = false;
        }
        individuals[0].IsHeadOfHousehold__c = true;
        individuals[1].MemberStatus__c = 'New';
        insert individuals;
    }
    
    @isTest
    public static void unitTest1() {
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();                            
            List<SSP_ApplicationIndividual__c> lstAppIndividual = getApplicationIndividuals();
            ContextData ctxData = SSP_TestDataFactory.createContextData(lstAppIndividual);
            ctxData.memberId = lstAppIndividual[0].SSP_Member__c;
            ctxData.ApplicationId = lstAppIndividual[0].SSP_Application__c;
            Test.startTest();
            Boolean result = new SSP_ApplicantAddressRule().isRequired(null, ctxData);
            System.assertEquals(true, result);
            Test.stopTest();
        }
	}
    
    @isTest
    public static void unitTest2() {
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();
            List<SSP_ApplicationIndividual__c> lstAppIndividual = getApplicationIndividuals();
            ContextData ctxData = SSP_TestDataFactory.createContextData(lstAppIndividual);
            for(SSP_ApplicationIndividual__c appInd : lstAppIndividual){
                if(appInd.IsHeadOfHousehold__c){
                    ctxData.memberId = appInd.SSP_Member__c;
                }
            }            
            ctxData.ApplicationId = lstAppIndividual[0].SSP_Application__c;
            Test.startTest();
            Boolean result = new SSP_ApplicantAddressRule().isRequired(null, ctxData);
            System.assertEquals(true, result);
            Test.stopTest();
        }
	}
    
    @isTest
    public static void unitTest3() {
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();
            ContextData ctxData = new ContextData();
            ctxData.memberId = [SELECT Id FROM Account LIMIT 1].Id;
            Test.startTest();
            Boolean result = new SSP_ApplicantAddressRule().isRequired(null, ctxData);
            System.assertEquals(false, result);
            Test.stopTest();
        }
	}
    
    @istest
    public static void unitTest4(){
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();
        	List<SSP_ApplicationIndividual__c> lstAppIndividual = getApplicationIndividuals();
			Id memberId;            
            for(SSP_ApplicationIndividual__c appInd : lstAppIndividual){
                if(!appInd.IsHeadOfHousehold__c){
                    memberId = appInd.SSP_Member__c;                   
                }
            }             
            ContextData ctxData = SSP_TestDataFactory.createContextData(lstAppIndividual);
            ctxData.ApplicationId = lstAppIndividual[0].SSP_Application__c;
            ctxData.modeValue = SSP_GlobalConstants.RAC_AddMember;
            ctxData.MemberId = memberId;
            Test.startTest();
			Boolean result = new SSP_ApplicantAddressRule().isRequired(null, ctxData);
            System.assertEquals(true, result);
            Test.stopTest();            
        }       
    }
    
    @istest
    public static void unitTest5(){
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();
        	List<SSP_ApplicationIndividual__c> lstAppIndividual = getApplicationIndividuals();
			Id memberId;            
            for(SSP_ApplicationIndividual__c appInd : lstAppIndividual){
                if(!appInd.IsHeadOfHousehold__c){
                    memberId = appInd.SSP_Member__c;
                    appInd.MemberStatus__c = SSP_GlobalConstants.MEMBER_STATUS_New;
                }                
            }           
            
            ContextData ctxData = new ContextData();//SSP_TestDataFactory.createContextData(lstAppIndividual);
            ctxData.ApplicationId = lstAppIndividual[0].SSP_Application__c;
            ctxData.modeValue = SSP_GlobalConstants.RAC_AddMember;
            ctxData.MemberId = memberId;
            Test.startTest();
			Boolean result = new SSP_ApplicantAddressRule().isRequired(null, ctxData);
            System.assertEquals(false, result);
            Test.stopTest();            
        }       
    }
    
    private static List<SSP_ApplicationIndividual__c> getApplicationIndividuals(){
        List<SSP_ApplicationIndividual__c> lstAppInd = [SELECT Id, SSP_Application__c, SSP_Member__c, ProgramsApplied__c,SSP_Member__r.SameAddressInfoAsHOHToggle__c,
                                                                  MemberStatus__c,IsHeadOfHousehold__c FROM SSP_ApplicationIndividual__c];
        return lstAppInd;
    }
}