/*
* classname     : SSP_HouseholdCircumstancesControllerTest
* @description  : Service class for managing operations related to address.
* @author       : Ajay Saini
* @date         : DEC-4-2019
* MODIFICATION LOG:
* DEVELOPER             DATE            DESCRIPTION
* ---------------------------------------------------------------------------------------------
* Ajay Saini        DEC-4-2019          Initial Version
*/
@isTest(seeAllData=false)
public class SSP_HouseholdCircumstancesControllerTest {
    
    @testSetup
    public static void initialDataSetup() {
        insert new LOG_LogMessageSettings__c(
            Name = RE_GlobalConstants.LOGS_DEFAULT_AUTOGENERATED,
            LOG_Debug__c = true,
            LOG_Error__c= true,
            LOG_Info__c = true,
            LOG_Warning__c = true,
            LOG_Log_Purge__c = 365
        );
        Id sCitizenAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Citizen');
        SSP_TestDataFactory.createContactRecord('Test', 'Test', 'test@tester.com', sCitizenAccRecTypeId, true);
    }
    
    public static User getPortalUser() {
        return SSP_TestDataFactory.createPortalUser();
    }
    
    public static void dataSetup() {
        Integer n = 1;
        Contact contactRecord = [SELECT Id, AccountId FROM Contact LIMIT 1];
        List<SSP_Application__c> applications = SSP_TestDataFactory.createSSPApplications(n, false);
        for(Integer i = 0; i < n; ++i) {
            applications[i].Account__c = contactRecord.accountId;
        }
        insert applications;
        
        n = 2;
        List<SSP_Member__c> members = SSP_TestDataFactory.createSSPMembers(n, false);
        //members[0].IsHeadOfHousehold__c = false;
        //members[1].IsHeadOfHousehold__c = true;
        for(SSP_Member__c member : members) {
            member.Contact__c = contactRecord.Id;
        }
        insert members;
        
        List<SSP_ApplicationIndividual__c> individuals = SSP_TestDataFactory.createApplicationIndividuals(n, false);
        for(Integer i = 0; i < n; ++i) {
            individuals[i].SSP_Member__c = members[i].Id;
            individuals[i].SSP_Application__c = applications[0].Id;
            individuals[i].ProgramsApplied__c = 'SN;KT';
        }
        insert individuals;
        list<SSP_Benefits__c> sspBenefits = new list<SSP_Benefits__c>();
        
        
    }
    
    @isTest
    public static void unitTest1() {
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();
		// List<String> addMembers = new list<String>('Test');
             Id applicationId = [SELECT Id FROM SSP_Application__c LIMIT 1].Id;
             Test.startTest();
            SSP_LightningResponse response1 = SSP_HouseholdCircumstancesController.deleteMemberData(new List<String>{'Name','Id','SSNVerified__c', 'Age__c'},applicationId);
            SSP_LightningResponse response = SSP_HouseholdCircumstancesController.fetchApplicationMembers(applicationId, new List<String>{'Name', 'SSNVerified__c', 'Age__c'}, 'addRemoveMember');
            System.assert(response.bIsSuccess);
            System.assert(!response.mapResponse.isEmpty());
            Test.stopTest();
        }
    } 
    
    @isTest
    public static void unitTest2() {
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();
            Test.startTest();
            SSP_LightningResponse response = SSP_HouseholdCircumstancesController.fetchApplicationMembers(null, null,null);
            System.assert(!response.bIsSuccess);
            Test.stopTest();
        }
    } 
}