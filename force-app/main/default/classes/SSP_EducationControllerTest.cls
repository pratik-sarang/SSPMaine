/*
* classname 	: SSP_EducationControllerTest
* @description 	: A test class for SSP_EducationController class.
* @author 		: Ajay Saini
* @date 		: FEB-2-2019
* MODIFICATION LOG:
* DEVELOPER 			DATE 			DESCRIPTION
* ---------------------------------------------------------------------------------------------
* Ajay Saini 		FEB-2-2019			Initial Version
*/
@isTest(seeAllData=false)
public with sharing class SSP_EducationControllerTest {
    @testSetup
    public static void initialDataSetup() {
        insert new LOG_LogMessageSettings__c(
            Name = RE_GlobalConstants.LOGS_DEFAULT_AUTOGENERATED,
            LOG_Debug__c = true,
            LOG_Error__c= true,
            LOG_Info__c = true,
            LOG_Warning__c = true,
            LOG_Log_Purge__c = 365
        );
        Id sCitizenAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Citizen');
        SSP_TestDataFactory.createContactRecord('Test', 'Test', 'test@tester.com', sCitizenAccRecTypeId, true);
    }

    public static User getPortalUser() {
        return SSP_TestDataFactory.createPortalUser();
    }
    
    public static void dataSetup() {
        Integer n = 1;
        Contact contactRecord = [SELECT Id, AccountId FROM Contact LIMIT 1];
        List<SSP_Application__c> applications = SSP_TestDataFactory.createSSPApplications(n, false);
        for(Integer i = 0; i < n; ++i) {
            applications[i].Account__c = contactRecord.AccountId;
		}
		insert applications;
        
        n = 1;
        List<SSP_Member__c> members = SSP_TestDataFactory.createSSPMembers(n, false);
        for(SSP_Member__c member : members) {
            member.Contact__c = contactRecord.Id;
        }
        insert members;
        List<SSP_ApplicationIndividual__c> individuals = SSP_TestDataFactory.createApplicationIndividuals(n, false);
        for(Integer i = 0; i < n; ++i) {
            individuals[i].SSP_Member__c = members[i].Id;
            individuals[i].SSP_Application__c = applications[0].Id;
            individuals[i].IsHeadOfHousehold__c = true;
            individuals[i].MemberProgramsApplied__c = 'KT';
        }
        insert individuals;
        SSP_TestDataFactory.createAttendanceRecords(n, true, members[0].Id);        
    }
    
    @isTest
    public static void unitTest1() {
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();
            SSP_ApplicationIndividual__c individual = [SELECT Id, SSP_Application__c, SSP_Member__c FROM SSP_ApplicationIndividual__c LIMIT 1];
            Test.startTest();
            SSP_LightningResponse response = SSP_EducationController.fetchEducationDetail(individual.SSP_Application__c, individual.SSP_Member__c);
            System.assert(response.bIsSuccess);
            Test.stopTest();
        }
    }
    
    @isTest
    public static void unitTest2() {
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();
            Test.startTest();
            SSP_LightningResponse response = SSP_EducationController.fetchSchoolRecords();
            System.assert(response.bIsSuccess);
            Test.stopTest();
        }
    }

    @isTest
    public static void trackDeletionTest() {
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();
            Test.startTest();
            List<SSP_Member__c> lstMembers = [SELECT Id FROM SSP_Member__c LIMIT 1];
            List<SSP_Attendance__c> lstAttendanceRecords = [SELECT Id FROM SSP_Attendance__c WHERE SSP_Member__c = :lstMembers[0].Id];
            lstAttendanceRecords[0].DCId__c = 23232;
            update lstAttendanceRecords;
            
            Set<Id> setMemberIds = new Set<Id>();
            setMemberIds.add(lstMembers[0].Id);
            SSP_EducationController.updateDeleteOnCurrentEducationDetailsForMembers(setMemberIds);
            Test.stopTest();
        }

        System.runAs(testUser) {
            dataSetup();
            List<SSP_Member__c> lstMembers = [SELECT Id FROM SSP_Member__c LIMIT 1];
            List<SSP_Attendance__c> lstAttendanceRecords = [SELECT Id FROM SSP_Attendance__c WHERE SSP_Member__c = :lstMembers[0].Id];
            delete lstAttendanceRecords;
        }

        System.runAs(testUser) {
            dataSetup();
            List<SSP_Member__c> lstMembers = [SELECT Id FROM SSP_Member__c LIMIT 1];
            List<SSP_Attendance__c> lstAttendanceRecords = [SELECT Id FROM SSP_Attendance__c WHERE SSP_Member__c = :lstMembers[0].Id];
            SSP_Attendance_TriggerHandler.trackDeletedRecordsForAttendance(lstAttendanceRecords);
        }
    }
    
    @isTest
    public static void testShowHideRemoveIcon() {
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();
            SSP_ApplicationIndividual__c individual = [SELECT Id, SSP_Application__c, SSP_Member__c FROM SSP_ApplicationIndividual__c LIMIT 1];
            Test.startTest();
            SSP_LightningResponse response = SSP_EducationController.showHideRemoveIcon(individual.SSP_Application__c, individual.SSP_Member__c);            
            Test.stopTest();
            System.assert(response.bIsSuccess);
        }
    }
    
    @isTest
    public static void testIsTeenParent() {
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();            
            SSP_ApplicationIndividual__c individual = [SELECT Id, SSP_Application__c, SSP_Member__c FROM SSP_ApplicationIndividual__c LIMIT 1];
            Test.startTest();
            Boolean response = SSP_EducationController.isTeenParent(individual.SSP_Application__c, individual.SSP_Member__c);            
            Test.stopTest();
            System.assertEquals(false,response);
        }
    }
}