@istest
public class SSP_ApplicationSummaryTest {
    
    @TestSetup
    public static void setupMethod(){
        SSP_TestDataFactory.setupTestData();
        
        List<Account> lstAcc = SSP_TestDataFactory.createAccounts(1, false);
        lstAcc[0].Name = 'HealthSelectionCtrl';
        lstAcc = ESAPI.accessController().insertAsUser(lstAcc, SSP_Utility.getFieldsNamesList (lstAcc)).getInsertedObjects();
        
        List<Contact> lstCon = (List<Contact>)SSP_Utility.fetchRecords(new Map<String, String>{'objectName'=>'Contact','operator'=>'AND'}, new Set<String>{'Id', 'FirstName', 'LastName'}, new Map<String, String>{'FirstName'=>'Citizen','LastName'=>'User'});
        
        AccountContactRelation acr = new AccountContactRelation(); 
        acr.Accountid = lstAcc[0].Id;
        acr.Contactid = lstCon[0].Id;
        acr.IsActive = true;
        acr = (AccountContactRelation)ESAPI.accessController().insertAsUser(new List<AccountContactRelation>{acr}, SSP_Utility.getFieldsNamesList (new List<AccountContactRelation>{acr})).getInsertedObjects()[0];       
        
        List<SSP_Application__c> lstAppln = SSP_TestDataFactory.createSSPApplications(1, false);
        lstAppln[0].Account__c=lstAcc[0].Id;        
        lstAppln[0].Contact__c = lstCon[0].Id;
        lstAppln= ESAPI.accessController().insertAsUser(lstAppln, SSP_Utility.getFieldsNamesList (lstAppln)).getInsertedObjects();
        
        List<SSP_Member__c> lstMem = SSP_TestDataFactory.createSSPMembers(1, false);
        lstMem[0].contact__c = lstCon[0].Id;
        lstMem[0].PrimaryPhoneExtension__c ='7348789790';
        lstMem[0].birthdate__c = Date.newInstance(1990, 12, 9);
        lstMem[0].GenderCode__c = 'F';
        lstMem[0].IsUSCitizenToggle__c = 'N';
        lstMem[0].PrimaryPhoneNumber__c ='8983838290';
        lstMem[0].IndividualId__c = '1234';
        lstMem = ESAPI.accessController().insertAsUser(lstMem, SSP_Utility.getFieldsNamesList (lstMem)).getInsertedObjects();
        
        List<SSP_ApplicationIndividual__c> lstAppInd = SSP_TestDataFactory.createApplicationIndividuals(1, false); 
        lstAppInd[0].SSP_Application__c=lstAppln[0].Id;
        lstAppInd[0].SSP_Member__c=lstMem[0].Id;
        lstAppInd = ESAPI.accessController().insertAsUser(lstAppInd, SSP_Utility.getFieldsNamesList (lstAppInd)).getInsertedObjects();        
        
        NavFlowStatus__c nfs = new NavFlowStatus__c();
        nfs.NavFlowName__c = 'ContactInformation';
        nfs.FlowPageStatus__c = 'CC';
        nfs.FlowDupStatus__c = 'CC';
        nfs.SSPApplication__c = lstAppln[0].Id;
        nfs.SSP_Application__c = lstAppln[0].Id;
        nfs.SSP_Member__c = lstMem[0].Id;
        nfs.Member__c = lstMem[0].Id;
        nfs.Contact__c = lstCon[0].Id;
        insert nfs;            
        
        
        
        //Create Custom settings 
        LOG_LogMessageSettings__c log = new LOG_LogMessageSettings__c();
        log.Name = 'Default_AutoGenerated';
        log.LOG_Debug__c = true;
        log.LOG_Error__c = true;
        log.LOG_Log_Purge__c = 365;
        log.LOG_Info__c = true;
        log.LOG_Warning__c = true;
        insert log;        
    }
    
    @istest
    public static void testApplicationSummaryDetailIntake (){
        List<SSP_ApplicationIndividual__c> appIndividualList = getApplicationIndividualList();
        User citizen = getUserDetails();
        system.runAs(citizen){
            Test.startTest();
            SSP_LightningResponse response = SSP_ApplicationSummaryController.getApplicationSummaryDetail(appIndividualList[0].SSP_Application__c, 'Intake');
            System.assert(response != null);
            Test.stopTest();
        }
    }
    
    @istest
    public static void testApplicationSummaryDetailRAC (){
        List<SSP_ApplicationIndividual__c> appIndividualList = getApplicationIndividualList();
        User citizen = getUserDetails();
        system.runAs(citizen){
            Test.startTest();
            SSP_Application__c app = new SSP_Application__c(Id = appIndividualList[0].SSP_Application__c);
            app.ChangeSummaryMode__c = 'ModifyExistingData';
            app.RAC_Selections__c = '[{"selectedScreens":[{"screens":"SSP_APP_Details_Resource","flowName":"MemberResourcesInformation"}, {"screens":"SSP_APP_HHMembersSummary"}],"memberId":"1234"},{"selectedScreens":[{"screens":"SSP_APP_Signature","flowName":"SignAndSubmit"}]}]';
            ESAPI.accessController().updateAsUser(app, new List<String>{'ChangeSummaryMode__c', 'RAC_Selections__c'});
            SSP_LightningResponse response = SSP_ApplicationSummaryController.getApplicationSummaryDetail(appIndividualList[0].SSP_Application__c, 'RAC');
            System.assert(response != null);
            Test.stopTest();
        }
    }
    
    @istest
    public static void testApplicationSummaryDetailAddMember (){
        List<SSP_ApplicationIndividual__c> appIndividualList = getApplicationIndividualList();
        User citizen = getUserDetails();
        system.runAs(citizen){
            Test.startTest();
            appIndividualList[0].MemberStatus__c = 'New';
            ESAPI.accessController().updateAsUser(appIndividualList[0], new List<String>{'MemberStatus__c'});
            SSP_Application__c app = new SSP_Application__c(Id = appIndividualList[0].SSP_Application__c);
            app.ChangeSummaryMode__c = 'AddRemoveMember';
            ESAPI.accessController().updateAsUser(app, new List<String>{'ChangeSummaryMode__c'});
            SSP_LightningResponse response = SSP_ApplicationSummaryController.getApplicationSummaryDetail(appIndividualList[0].SSP_Application__c, 'RAC');
            System.assert(response != null);
            Test.stopTest();
        }
    }
    
    @istest
    public static void testApplicationSummaryDetailRemoveMember (){
        List<SSP_ApplicationIndividual__c> appIndividualList = getApplicationIndividualList();
        User citizen = getUserDetails();
        system.runAs(citizen){
            Test.startTest();
            SSP_Application__c app = new SSP_Application__c(Id = appIndividualList[0].SSP_Application__c);
            app.ChangeSummaryMode__c = 'AddRemoveMember';
            ESAPI.accessController().updateAsUser(app, new List<String>{'ChangeSummaryMode__c'});
            SSP_LightningResponse response = SSP_ApplicationSummaryController.getApplicationSummaryDetail(appIndividualList[0].SSP_Application__c, 'RAC');
            System.assert(response != null);
            Test.stopTest();
        }
    }
    
    @istest
    public static void testInitialNavFlowStatus (){
        List<SSP_ApplicationIndividual__c> appIndividualList = getApplicationIndividualList();
        User citizen = getUserDetails();
        system.runAs(citizen){
            Test.startTest();
            SSP_LightningResponse response = SSP_ApplicationSummaryController.getInitialNavFlowStatus(appIndividualList[0].SSP_Application__c, appIndividualList[0].SSP_Member__c,
                                                                                                      'ContactInformation','Intake');
            SSP_LightningResponse response1 = SSP_ApplicationSummaryController.getInitialNavFlowStatus(appIndividualList[0].SSP_Application__c, appIndividualList[0].SSP_Member__c,
                                                                                                       'ContactInformation','RAC');
            system.assert(response != null);
            Test.stopTest();
        } 
    }
    
    @istest
    public static void testFetchApplicationStatus(){
        List<SSP_ApplicationIndividual__c> appIndividualList = getApplicationIndividualList();
        User citizen = getUserDetails();
        System.runAs(citizen){
            Test.startTest();
            SSP_LightningResponse response = SSP_ApplicationSummaryController.fetchApplicationStatus(appIndividualList[0].SSP_Application__c);            
            system.assert(response != null);
            Test.stopTest();
        }
    }
    
    @istest
    public static void testresetStatus(){
        List<SSP_ApplicationIndividual__c> appIndividualList = getApplicationIndividualList();
        User citizen = getUserDetails();        
        System.runAs(citizen){
            Test.startTest();
            SSP_ApplicationSummaryController.resetStatus(appIndividualList[0].SSP_Application__c, 'ContactInformation',
                                                         appIndividualList[0].SSP_Member__c,'Intake','');                        
            SSP_ApplicationSummaryController.resetStatus(appIndividualList[0].SSP_Application__c, '',
                                                         appIndividualList[0].SSP_Member__c,'Intake','');                        
            Test.stopTest();
        }
    }
    
    @istest
    public static void testMarkSectionComplete(){
        List<SSP_ApplicationIndividual__c> appIndividualList = getApplicationIndividualList();
        SSP_Application__c appRecord = [SELECT Id, SectionStatus__c FROM SSP_Application__c WHERE Id = :appIndividualList[0].SSP_Application__c];
        appRecord.SectionStatus__c = '{"Intake":{"Contact_Information":"COMPLETED","SSP_APP_HHMembersSummary":"COMPLETED","SSP_APP_ProgramSelection":"COMPLETED","REPS_Home":"COMPLETED","Household_Information":"COMPLETED"}}';
        update appRecord;
        User citizen = getUserDetails(); 
        String sections = 'REPS_Home';
        System.runAs(citizen){
            Test.startTest();
            SSP_ApplicationSummaryController.markSectionsComplete(null, '');
            SSP_ApplicationSummaryController.markSectionsComplete(citizen.Id, null);
            SSP_LightningResponse response = SSP_ApplicationSummaryController.markSectionsComplete(appIndividualList[0].SSP_Application__c, sections);
            Test.stopTest();
            system.assert(response != null);
        }
    }
    
    @istest
    public static void testMarkSectionRR(){
        List<SSP_ApplicationIndividual__c> appIndividualList = getApplicationIndividualList();
        SSP_Application__c appRecord = [SELECT Id, SectionStatus__c FROM SSP_Application__c WHERE Id = :appIndividualList[0].SSP_Application__c];
        appRecord.ChangeSummaryMode__c = 'AddRemoveMember';
        appRecord.SectionStatus__c = '{"AddRemoveMember":{"Contact_Information":"COMPLETED","SSP_APP_HHMembersSummary":"COMPLETED","SSP_APP_ProgramSelection":"COMPLETED","Household_Information":"COMPLETED"}}';
        update appRecord;
        User citizen = getUserDetails(); 
        String sections = 'REPS_Home;SSP_APP_HHMembersSummary';
        System.runAs(citizen){
            Test.startTest();
            SSP_ApplicationSummaryController.markSectionsReviewRequired(null, '');
            SSP_ApplicationSummaryController.markSectionsReviewRequired(citizen.Id, null);
            SSP_LightningResponse response = SSP_ApplicationSummaryController.markSectionsReviewRequired(appIndividualList[0].SSP_Application__c, sections);
            Test.stopTest();
            system.assert(response != null);
        }
    }
    
    @istest
    public static void testgetTransactionStatus(){
        List<SSP_ApplicationIndividual__c> appIndividualList = getApplicationIndividualList();        
        User citizen = getUserDetails(); 
        citizen.Contact.IndividualId__c = '1234';
        update citizen;
        String sections = 'REPS_Home';
        System.runAs(citizen){
            Test.startTest();
            SSP_LightningResponse response = SSP_ApplicationSummaryController.getTransactionStatus(appIndividualList[0].SSP_Application__c, 'Intake');
            Test.stopTest();
            system.assert(response != null);
        }
    }
    @istest
    public static void testgetTransactionStatus2(){
        List<SSP_ApplicationIndividual__c> appIndividualList = getApplicationIndividualList();        
        User citizen = getUserDetails(); 
        citizen.Contact.IndividualId__c = '1234';
        citizen.Contact.DoesCaseExistForIndividual__c = true;
        //update citizen;
        update citizen.Contact;
        String sections = 'REPS_Home';
        System.runAs(citizen){
            Test.startTest();
            SSP_LightningResponse response = SSP_ApplicationSummaryController.getTransactionStatus(appIndividualList[0].SSP_Application__c, 'Intake');
            Test.stopTest();
            system.assert(response != null);
        }
    }
    @istest
    public static void testgetTransactionStatus3(){
        SSP_Transaction__c txn = new SSP_Transaction__c(
            IndividualId__c = '1234',
            View_Name__c = SSP_InterfaceConstants.QUALIFIED_INDIVIDUAL,
            Status__c = SSP_InterfaceConstants.FAILED
        );
        insert txn;
        List<SSP_ApplicationIndividual__c> appIndividualList = getApplicationIndividualList();        
        User citizen = getUserDetails(); 
        citizen.Contact.IndividualId__c = '1234';
        citizen.Contact.DoesCaseExistForIndividual__c=true;
        update citizen.Contact;
        String sections = 'REPS_Home';
        System.runAs(citizen){
            Test.startTest();
            SSP_LightningResponse response = SSP_ApplicationSummaryController.getTransactionStatus(appIndividualList[0].SSP_Application__c, 'Intake');
            Test.stopTest();
            system.assert(response != null);
        }
    }
    
    @istest
    public static void testFireCallouts(){
        List<SSP_ApplicationIndividual__c> appIndividualList = getApplicationIndividualList();        
        User citizen = getUserDetails(); 
        System.runAs(citizen){
            Test.startTest();
            SSP_ApplicationSummaryController.fireCallouts(appIndividualList[0].SSP_Application__c, 'Intake');
            Test.stopTest();
        }
    }
    
    @istest
    public static void testRequiredViews (){
        List<SSP_ApplicationIndividual__c> appIndividualList = getApplicationIndividualList();        
        User citizen = getUserDetails(); 
        System.runAs(citizen){
            Test.startTest();
            Set<String> response = SSP_ApplicationSummaryController.getRequiredViews(appIndividualList[0].SSP_Application__c);
            Test.stopTest();
            system.assert(response != null);
        }
    }
    
    @istest
    public static void testRequiredViewsRAC (){
        List<SSP_ApplicationIndividual__c> appIndividualList = getApplicationIndividualList();   
        SSp_Application__c app = [SELECT Id, RAC_Selections__c FROM SSP_Application__c WHERE Id =: appIndividualList[0].SSP_Application__c];
        app.RAC_Selections__c = '[{"selectedScreens":[{"screens":"SSP_APP_Primary_Address,SSP_APP_Primary_Contact","flowName":"ContactInformation"}],"memberId":"1234"},{"selectedScreens":[{"screens":"SSP_APP_Primary_Address,SSP_APP_Primary_Contact","flowName":"ContactInformation"}],"memberId":"1234"},{"selectedScreens":[{"screens":"SSP_APP_Signature","flowName":"SignAndSubmit"}]}]';
        update app;
        User citizen = getUserDetails(); 
        System.runAs(citizen){
            Test.startTest();
            Set<String> response = SSP_ApplicationSummaryController.getRequiredViews(appIndividualList[0].SSP_Application__c);
            Test.stopTest();
            system.assert(response != null);
        }
    }
    
    private static User getUserDetails(){
        User citizen  = [SELECT Id, ContactId, Contact.IndividualId__c FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        return citizen;
    }
    
    private static List<SSP_ApplicationIndividual__c> getApplicationIndividualList (){
        List<SSP_ApplicationIndividual__c> appIndividualList = [SELECT Id,SSP_Application__r.Name,SSP_Application__r.ProgramsApplied__c,SSP_Application__r.SectionStatus__c,SSP_Application__r.RAC_Selections__c,IsTMember__c,SSP_Application__r.DCCaseNumber__c,SSP_Application__r.ChangeSummaryMode__c,
                                                                SSP_Member__r.FirstName__c,SSP_Member__r.LastName__c,SSP_Member__r.SuffixCode__c,SSP_Member__r.MiddleInitial__c,SSP_Member__r.Contact__r.IndividualId__c,SSP_Application__c, SSP_Member__c,
                                                                SSP_Member__r.Contact__r.Is_Eligible_For_RSSPDC__c FROM SSP_ApplicationIndividual__c LIMIT 1];
        return appIndividualList;
    }  
    
    private static List<App_Summary_Config__mdt> getAppSummaryMetadata (List<String> flowNameList){
        List<App_Summary_Config__mdt> rawAppConfiguration = [SELECT DeveloperName, Section_Key__c, Applicable_Program_Code__c, IsFlow__c, Based_On_Individual__c, Member_Filter__c,
                                                             FlowName__c, PageName__c, Section__c, Subsection__c, Order__c 
                                                             FROM App_Summary_Config__mdt 
                                                             WHERE FlowName__c IN :flowNameList ORDER BY Order__c LIMIT 5000];
        return rawAppConfiguration;
    }
    
    @istest
    public static void testApplicableAgeChangeRule(){
        
        SSP_Member__c member = [Select Id,birthdate__c,GenderCode__c,IsUSCitizenToggle__c, Name FROM SSP_Member__c];            
        SSP_Application__c application = [SELECT Id FROM SSP_Application__c LIMIT 1];
        User citizen = getUserDetails(); 
        System.runAs(citizen){
            Test.startTest();
            Set<String> response = SSP_ApplicationSummaryController.getApplicableAgeChangeRule (60,17,member,application);
            Set<String> response1 = SSP_ApplicationSummaryController.getApplicableAgeChangeRule (65,65,member,application);
            Test.stopTest();
        }
    }
    
    @isTest
    public static void testresetRSSPDCEligibility() {
        User citizen = getUserDetails();
        system.runAs(citizen){
            Test.startTest();
            SSP_LightningResponse response = SSP_ApplicationSummaryController.resetRSSPDCEligibility('Intake', citizen.ContactId);
            system.assert(response != null);
            Test.stopTest();
            
        }
    }

    
    @isTest
    public static void testsetTaxFilingRRequired() {
        List<SSP_ApplicationIndividual__c> appIndividualList = getApplicationIndividualList();
        SSP_Application__c appRecord = [SELECT Id, SectionStatus__c,ProgramsApplied__c FROM SSP_Application__c WHERE Id = :appIndividualList[0].SSP_Application__c];
        appRecord.ProgramsApplied__c='SS';
        update appRecord;
        SSPTaxFilingConfigurations__c sspTaxFilingConfig = new SSPTaxFilingConfigurations__c();
        sspTaxFilingConfig.Name = 'SSPTFC001';
        sspTaxFilingConfig.CurrentYear__c = String.valueOf(SSP_Utility.today().year());
        sspTaxFilingConfig.Enrollment_EndDate__c = SSP_Utility.today().addDays(10);
        sspTaxFilingConfig.Enrollment_StartDate__c = SSP_Utility.today().addDays(-10);
        sspTaxFilingConfig.OpenEnrollmentYear__c = String.valueOf(SSP_Utility.today().year() + 1);
        insert sspTaxFilingConfig;
        
        User citizen = getUserDetails();
        system.runAs(citizen){
            Test.startTest();
            SSP_LightningResponse response = SSP_ApplicationSummaryController.getApplicationSummaryDetail(appIndividualList[0].SSP_Application__c, 'Intake');
            system.assert(response != null);
            Test.stopTest();
        }
    }
    
    @istest
    public static void testgetChangeSummaryConfig (){
        List<SSP_ApplicationIndividual__c> appIndividualList = getApplicationIndividualList();
        SSP_Application__c appRecord = [SELECT Id,RAC_Selections__c,SectionStatus__c FROM SSP_Application__c WHERE Id = :appIndividualList[0].SSP_Application__c];
        appRecord.RAC_Selections__c ='[{	"memberId": "1234",	"selectedScreens": [{			"flowName": "ContactInformation",			"screens": "SSP_APP_Primary_Contact,SSP_APP_Primary_Address"		},		{			"flowName": "MemberDetails",			"screens": "SSP_APP_Details_Resource,SSP_APP_Details_NotUSCitizen"		}	]}]';
        appRecord.ChangeSummaryMode__c = 'ModifyExistingData';
        appRecord.SectionStatus__c='{"ModifyExistingData": {"Household_Information":"COMPLETED","Healthcare_Coverage":"COMPLETED","Relationships":"COMPLETED","REPS_Home":"COMPLETED","Contact_Information":"COMPLETED","SSP_APP_HHMembersSummary":"COMPLETED","SSP_APP_ProgramSelection":"COMPLETED"}}';
        update appRecord;
        User citizen = getUserDetails();
        List<String> flowNameList = new List<String> {'ContactInformation','HouseholdInformation','MemberIndividualInformation'};
            List<App_Summary_Config__mdt> appSummaryData = getAppSummaryMetadata(flowNameList);
        
        
        SSP_ApplicationSummaryController.AppSummaryItemWrapper objAppSummary = new 
            SSP_ApplicationSummaryController.AppSummaryItemWrapper(appSummaryData[0]);  
        objAppSummary.members = new List<Id> {appIndividualList[0].SSP_Member__c};
            Map<String, Object> mapInputs = new Map<String, Object>();
        mapInputs.put('SSP_APP_HHMembersSummary',appSummaryData[0] );
        System.runAs(citizen){
            Test.startTest();
            Map<String, SSP_Member__c> membersMap = new Map<String, SSP_Member__c>([select id,contact__c from SSP_Member__c]);
            List<SSP_ApplicationSummaryController.AppSummaryItemWrapper> response1 = SSP_ApplicationSummaryController.getChangeSummaryConfig2(appRecord,membersMap,mapInputs);
            // system.assert(response != null);
            Test.stopTest();
        }
    }
    
    private static List<NavFlowPageConfig__mdt> getNavFlowPageConfig (String flowName){
        List<NavFlowPageConfig__mdt> flowPageConfigList = [SELECT Id, PageInfo__r.PageName__c, toLabel(PageInfo__r.Page_Display_Name_View__c) FROM NavFlowPageConfig__mdt WHERE NavigationFlowDetail__r.FlowName__c =:flowName ];            
        return flowPageConfigList;
    }
    
    @isTest
    public static void testpassMapNavFlowStatus() {
        List<SSP_ApplicationIndividual__c> appIndividualList = getApplicationIndividualList();
        SSP_Application__c appRecord = [SELECT Id,RAC_Selections__c,SectionStatus__c FROM SSP_Application__c WHERE Id = :appIndividualList[0].SSP_Application__c];
        appRecord.RAC_Selections__c = '[{"selectedScreens":[{"screens":"SSP_APP_Primary_Address,SSP_APP_Primary_Contact","flowName":"ContactInformation"}],"memberId":"1234"},{"selectedScreens":[{"screens":"SSP_APP_Primary_Address,SSP_APP_Primary_Contact","flowName":"ContactInformation"}],"memberId":"1234"},{"selectedScreens":[{"screens":"SSP_APP_Signature","flowName":"SignAndSubmit"}]}]';
        update appRecord;
        User citizen = getUserDetails();
        system.runAs(citizen){
            Test.startTest();
            Map<String,Map<String,String>> passMapNavFlowStatus = SSP_ApplicationSummaryController.passMapNavFlowStatus(appRecord.id,'Intake');
           Map<String,Map<String,String>> getCombinedNavFlowStatus = SSP_ApplicationSummaryController.getCombinedNavFlowStatus(appRecord.id,'Intake');
            Test.stopTest();
            
        }
    }
}