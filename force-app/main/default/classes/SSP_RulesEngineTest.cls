@isTest
public class SSP_RulesEngineTest {
    
	@TestSetup
    public static void setupMethod(){
          	SSP_TestDataFactory.setupTestData();
        
        List<Account> lstAcc = SSP_TestDataFactory.createAccounts(1, false);
        lstAcc[0].Name = 'HealthSelectionCtrl';
        lstAcc = ESAPI.accessController().insertAsUser(lstAcc, SSP_Utility.getFieldsNamesList (lstAcc)).getInsertedObjects();
        
        List<Contact> lstCon = (List<Contact>)SSP_Utility.fetchRecords(new Map<String, String>{'objectName'=>'Contact','operator'=>'AND'}, new Set<String>{'Id', 'FirstName', 'LastName'}, new Map<String, String>{'FirstName'=>'Citizen','LastName'=>'User'});
        
        AccountContactRelation acr = new AccountContactRelation(); 
        acr.Accountid = lstAcc[0].Id;
        acr.Contactid = lstCon[0].Id;
        acr.IsActive = true;
        acr = (AccountContactRelation)ESAPI.accessController().insertAsUser(new List<AccountContactRelation>{acr}, SSP_Utility.getFieldsNamesList (new List<AccountContactRelation>{acr})).getInsertedObjects()[0];       
        
        List<SSP_Application__c> lstAppln = SSP_TestDataFactory.createSSPApplications(1, false);
        lstAppln[0].Account__c=lstAcc[0].Id;        
        lstAppln[0].Contact__c = lstCon[0].Id;
        lstAppln= ESAPI.accessController().insertAsUser(lstAppln, SSP_Utility.getFieldsNamesList (lstAppln)).getInsertedObjects();
        
        List<SSP_Member__c> lstMem = SSP_TestDataFactory.createSSPMembers(1, false);
        lstMem[0].contact__c=lstCon[0].Id;  
        lstMem[0].PrimaryPhoneExtension__c ='7348789790';
        lstMem[0].PrimaryPhoneNumber__c ='8983838290';
        lstMem = ESAPI.accessController().insertAsUser(lstMem, SSP_Utility.getFieldsNamesList (lstMem)).getInsertedObjects();
        
        List<SSP_ApplicationIndividual__c> lstAppInd = SSP_TestDataFactory.createApplicationIndividuals(1, false); 
        lstAppInd[0].SSP_Application__c=lstAppln[0].Id;
        lstAppInd[0].SSP_Member__c=lstMem[0].Id;
        lstAppInd = ESAPI.accessController().insertAsUser(lstAppInd, SSP_Utility.getFieldsNamesList (lstAppInd)).getInsertedObjects();        
     	
        List<NavFlowPageConfig__mdt> flowPageConfigList = NavFlowControllerTest.getNavFlowPageConfig('ContactInformation');
        
        NavFlowStatus__c nfs = new NavFlowStatus__c();
        nfs.NavFlowName__c = 'ContactInformation';
        nfs.FlowPageStatus__c = 'CC';
        nfs.FlowDupStatus__c = 'CC';  
        /*if(flowPageConfigList != null && !flowPageConfigList.isEmpty()){
            for(Integer i=0; i<flowPageConfigList.size(); i++ ){
                nfs.FlowPageStatus__c = nfs.FlowPageStatus__c+'C';
                nfs.FlowDupStatus__c = nfs.FlowDupStatus__c +'C';  
            }        	        	 
        } */       
        nfs.SSPApplication__c = lstAppln[0].Id;
        nfs.SSP_Application__c = lstAppln[0].Id;
        nfs.SSP_Member__c = lstMem[0].Id;
        nfs.Member__c = lstMem[0].Id;
        nfs.Contact__c = lstCon[0].Id;
        insert nfs;            
        system.debug('Select Id FROM SSP_Application__c LIMIT 1::'+[Select Id FROM SSP_Application__c LIMIT 1]);
	  	system.debug('Select Id FROM SSP_Member__c LIMIT 1::'+[Select Id FROM SSP_Member__c LIMIT 1]);
        
        //Create Custom settings 
        LOG_LogMessageSettings__c log = new LOG_LogMessageSettings__c();
        log.Name = 'Default_AutoGenerated';
        log.LOG_Debug__c = true;
        log.LOG_Error__c = true;
        log.LOG_Log_Purge__c = 365;
        log.LOG_Info__c = true;
        log.LOG_Warning__c = true;
        insert log;
        
    }
    	        
    @isTest
    public static void getRRTriggerRulesTest(){                
        Id ApplicationId = [SELECT Id FROM SSP_Application__c LIMIT 1].Id ;
        Id MemberId = [SELECT Id FROM SSP_Member__c LIMIT 1].Id;
        Test.startTest();
        SSP_RulesEngine.getRRTriggerRules(ApplicationId,MemberId, new List<String> {'SSP_APP_HHMemberDetails'},new List<String>(), 'Intake');
        Test.stopTest();
    } 
    
    @isTest
    public static void getRRTriggerRulesTest1(){                
        Id ApplicationId = [SELECT Id FROM SSP_Application__c LIMIT 1].Id ;
        Id MemberId = [SELECT Id FROM SSP_Member__c LIMIT 1].Id;
        Test.startTest();
        List<String> revList = new List<String> ();
        String ruleVal = 'review_age_change,true,'+memberId;
        revList.add(ruleVal);
        SSP_RulesEngine.getRRTriggerRules(ApplicationId,MemberId, new List<String> {'SSP_APP_HHMemberDetails'},revList, 'Intake');
        Test.stopTest();
    } 
    
    
}