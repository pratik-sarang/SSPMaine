@isTest(seeAllData=false)
public class SSP_ReportChangeSelectionCtrlTest {

    @TestSetup static void setup() {
        insert new LOG_LogMessageSettings__c(
       Name = RE_GlobalConstants.LOGS_DEFAULT_AUTOGENERATED,
       LOG_Debug__c = true,
       LOG_Error__c= true,
       LOG_Info__c = true,
       LOG_Warning__c = true,
       LOG_Log_Purge__c = 365
       );
    }

    public static testMethod void testGetScreenPermission(){
        SSP_ReportChangeSelectionCtrl.getScreenPermission();
    }
    
    public static testMethod void testGetAppSummaryMetadata(){
        Set<String> setAdditionalFields = new Set<String>();
        String agencyRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Agency_User');
        List<Account> listAccount = SSP_TestDataFactory.createAccounts(1,true);
        Contact objContact = SSP_TestDataFactory.createContactRecord('test','contact','test.contact@gmail.com',agencyRecordTypeId,true);
        List<SSP_Member__c> listSSPMember = SSP_TestDataFactory.createSSPMembers(1,false);
        listSSPMember[0].Contact__c = objContact.Id;
        insert listSSPMember;
        
        List<SSP_Application__c> listSSPApplication = SSP_TestDataFactory.createSSPApplications(1,false);
        listSSPApplication[0].Account__c = listAccount[0].Id;
        insert listSSPApplication;
        
        List<SSP_ApplicationIndividual__c> listSSPApplicationIndividual = SSP_TestDataFactory.createApplicationIndividuals(1,false);
        listSSPApplicationIndividual[0].SSP_Application__c = listSSPApplication[0].Id;
        listSSPApplicationIndividual[0].SSP_Member__c = listSSPMember[0].Id;
        insert listSSPApplicationIndividual;
        
        SSP_ReportChangeSelectionCtrl.getAppSummaryMetadata(listSSPApplication[0].Id);
    }
    
    public static testMethod void testUpdateRACSelections(){
        List<Account> listAccount = SSP_TestDataFactory.createAccounts(1,true);
        String agencyRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Agency_User');
        Contact objContact = SSP_TestDataFactory.createContactRecord('test','contact','test.contact@gmail.com',agencyRecordTypeId,true);
        List<SSP_Member__c> listSSPMember = SSP_TestDataFactory.createSSPMembers(1,false);
        listSSPMember[0].Contact__c = objContact.Id;
        insert listSSPMember;
        
        List<SSP_Application__c> listSSPApplication = SSP_TestDataFactory.createSSPApplications(1,false);
        listSSPApplication[0].Account__c = listAccount[0].Id;
        insert listSSPApplication;
        
        //String strJson = '"memberId":"'+listSSPMember[0].Id+'","selectedScreens":[{"flowName":"","screens":"SSP_APP_RTF_Relationships"}]';
        SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper objSDW= new SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper ();
        objSDW.flowName = 'testFlowName';
        objSDW.screens = 'SSP_APP_RTF_Relationships';
        
        SSP_ReportChangeSelectionCtrl.RACSelectionWrapper objRACSW = new SSP_ReportChangeSelectionCtrl.RACSelectionWrapper();
        objRACSW.memberId = listSSPMember[0].Id;
        objRACSW.selectedScreens = new List<SSP_ReportChangeSelectionCtrl.ScreenDetailWrapper>{objSDW};

        String strJson = JSON.serialize(objRACSW,true);
        SSP_ReportChangeSelectionCtrl.updateRACSelections(listSSPApplication[0].Id,strJson,true,
        new List<String>{'Community Integration Supplementation and Caretaker Services','Contact Information',
        'Education','Expense','Income'});
        String strJson1='{"test":"test"}}}';
        SSP_ReportChangeSelectionCtrl.updateRACSelections(listSSPApplication[0].Id,strJson1,true,
        new List<String>{'Community Integration Supplementation and Caretaker Services','Contact Information',
        'Education','Expense','Income'});
        
    }
    
    public static testMethod void testUpdateIndividualId(){
        //Individual objIndividual = SSP_TestDataFactory.listIndividual('Test');
        //User objUser = SSP_TestDataFactory.createPortalUser();
        Map<String, String> mapCaseVsIndividualId = new Map<String, String>();
        mapCaseVsIndividualId.put('76590','76459');
        Cache.SessionPartition sessionPart = Cache.Session.getPartition(SSP_GlobalConstants.CACHE_PARTITION_NAME);
       
        sessionpart.put('caseVsIndividualId',JSON.serialize(mapCaseVsIndividualId),3600,Cache.Visibility.ALL,false);

        String agencyRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Non_Citizen');
        Contact objContact = SSP_TestDataFactory.createContactRecord('test','contact','test.contact@gmail.com',agencyRecordTypeId,true);
    User objUser = SSP_TestDataFactory.createCommunityUser('tste',objContact.Id,'test.contact@gmail.com','SSP Non Citizen Profile',true);
        System.runAs(objUser){
            SSP_ReportChangeSelectionCtrl.updateIndividualId('76590','76459');
        }
        sessionPart.put(SSP_GlobalConstants.INDIVIDUAL_ID,'76459');
        System.runAs(objUser){
            SSP_ReportChangeSelectionCtrl.updateIndividualId('76590','76459');
        }
    }
    
    public static testMethod void testInsertCaseApplicationAndAccount(){
        //User objUser = SSP_TestDataFactory.createPortalUser();
        Map<String, String> mapCaseVsIndividualId = new Map<String, String>();
        mapCaseVsIndividualId.put('76590','76459');
        Cache.SessionPartition sessionPart = Cache.Session.getPartition(SSP_GlobalConstants.CACHE_PARTITION_NAME);
        sessionpart.put(SSP_GlobalConstants.INDIVIDUAL_ID,'76459');
        sessionpart.put('caseVsIndividualId',JSON.serialize(mapCaseVsIndividualId),3600,Cache.Visibility.ALL,false);
        
        String agencyRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Non_Citizen');
        Contact objContact = SSP_TestDataFactory.createContactRecord('test','contact','test.contact@gmail.com',agencyRecordTypeId,false);
        objContact.IndividualId__c='76459';
        insert objContact;
    User objUser = SSP_TestDataFactory.createCommunityUser('tste',objContact.Id,'test.contact@gmail.com','SSP Non Citizen Profile',true);
        test.startTest();
        List<Account> listAccount = SSP_TestDataFactory.createAccounts(1,true);
        List<SSP_Application__c> listSSPApplication = SSP_TestDataFactory.createSSPApplications(1,false);
        listSSPApplication[0].Account__c = listAccount[0].Id;
        listSSPApplication[0].DCCaseNumber__c = 374843;
        insert listSSPApplication;
        System.runAs(objUser){
            
            SSP_ReportChangeSelectionCtrl.insertCaseApplicationAndAccount('374843');
            //Existing case condition
            SSP_ReportChangeSelectionCtrl.insertCaseApplicationAndAccount('374843');
        }
        //Failure condition
        SSP_ReportChangeSelectionCtrl.insertCaseApplicationAndAccount('374843');
        test.stopTest();
    }
    
    public static testMethod void testDeleteNavFlowStatus(){
        List<Account> listAccount = SSP_TestDataFactory.createAccounts(1,true);
        List<SSP_Application__c> listSSPApplication = SSP_TestDataFactory.createSSPApplications(1,false);
        listSSPApplication[0].Account__c = listAccount[0].Id;
        insert listSSPApplication;
        
        SSP_ReportChangeSelectionCtrl.deleteNavFlowStatus(listSSPApplication[0].Id);
            
    }
    
    public static testMethod void testGetPrimaryIndividualId(){
        //User objUser = SSP_TestDataFactory.createPortalUser();
        String agencyRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Non_Citizen');
        Contact objContact = SSP_TestDataFactory.createContactRecord('test','contact','test.contact@gmail.com',agencyRecordTypeId,true);
    User objUser = SSP_TestDataFactory.createCommunityUser('tste',objContact.Id,'test.contact@gmail.com','SSP Non Citizen Profile',true);
        System.runAs(objUser){
            SSP_ReportChangeSelectionCtrl.getPrimaryIndividualId();
        }
    }
    
    public static testMethod void testInvokeQualifiedCalloutHelper(){
        //User objUser = SSP_TestDataFactory.createPortalUser();
        SSP_DC_ReverseMockImpl mock = new SSP_DC_ReverseMockImpl();        
        Test.setMock(HttpCalloutMock.class, mock);
        String agencyRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Non_Citizen');
        Contact objContact = SSP_TestDataFactory.createContactRecord('test','contact','test.contact@gmail.com',agencyRecordTypeId,false);
        objContact.DoesCaseExistForIndividual__c = true;
        objContact.IndividualId__c='76459';
        insert objContact;

        User objUser = SSP_TestDataFactory.createCommunityUser('tste',objContact.Id,'test.contact@gmail.com','SSP Non Citizen Profile',true);
        test.startTest();
        List<Account> listAccount = SSP_TestDataFactory.createAccounts(1,true);
        List<SSP_Application__c> listSSPApplication = SSP_TestDataFactory.createSSPApplications(1,false);
        listSSPApplication[0].Account__c = listAccount[0].Id;
        insert listSSPApplication;

        Map<String, String> mapCaseVsIndividualId = new Map<String, String>();
        mapCaseVsIndividualId.put(listSSPApplication[0].Id,'76459');

        Cache.SessionPartition sessionPart = Cache.Session.getPartition(SSP_GlobalConstants.CACHE_PARTITION_NAME);
        sessionpart.put(SSP_GlobalConstants.INDIVIDUAL_ID,'76459');
        sessionpart.put('caseVsIndividualId',JSON.serialize(mapCaseVsIndividualId),3600,Cache.Visibility.ALL,false);

        System.runAs(objUser){
            
            SSP_ReportChangeSelectionCtrl.invokeQualifiedCalloutHelper(listSSPApplication[0].Id,'76459');
        }
        //Failure Condition
        SSP_ReportChangeSelectionCtrl.invokeQualifiedCalloutHelper(listSSPApplication[0].Id,'76459');
        test.stopTest();
    }
    
    public static testMethod void testInvokeRACServiceCalloutHelper(){
        //User objUser = SSP_TestDataFactory.createPortalUser();
        SSP_DC_ReverseMockImpl mock = new SSP_DC_ReverseMockImpl();  
        List<SSP_Application__c> listSSPApplication= new List<SSP_Application__c>();      
        Test.setMock(HttpCalloutMock.class, mock);
        String agencyRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Non_Citizen');
        Contact objContact = SSP_TestDataFactory.createContactRecord('test','contact','test.contact@gmail.com',agencyRecordTypeId,false);
        objContact.IndividualId__c='76459';
        insert objContact;
        User objUser = SSP_TestDataFactory.createCommunityUser('tste',objContact.Id,'test.contact@gmail.com','SSP Non Citizen Profile',true);
        System.runAs(objUser){
        List<Account> listAccount = SSP_TestDataFactory.createAccounts(1,true);
         listSSPApplication = SSP_TestDataFactory.createSSPApplications(1,false);
        listSSPApplication[0].Account__c = listAccount[0].Id;
        listSSPApplication[0].ProgramsApplied__c='SS';
        insert listSSPApplication;
        }
        SSP_ReportChangeSelectionCtrl.invokeRACServiceCalloutHelper(listSSPApplication[0].Id,'76459');
        Map<String, String> mapCaseVsIndividualId = new Map<String, String>();
        mapCaseVsIndividualId.put(listSSPApplication[0].Id,'76459');
        
        Cache.SessionPartition sessionPart = Cache.Session.getPartition(SSP_GlobalConstants.CACHE_PARTITION_NAME);
        sessionpart.put(SSP_GlobalConstants.INDIVIDUAL_ID,'76459');
        sessionpart.put('caseVsIndividualId',JSON.serialize(mapCaseVsIndividualId),3600,Cache.Visibility.ALL,false);
        test.startTest();
        System.runAs(objUser){
            
            SSP_ReportChangeSelectionCtrl.invokeRACServiceCalloutHelper(listSSPApplication[0].Id,'76459');
        }
        test.stopTest();
    }
    
    public static testMethod void testInvokeReverseSSPHelper(){
    //User objUser = SSP_TestDataFactory.createPortalUser();
    String agencyRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Non_Citizen');
    Contact objContact = SSP_TestDataFactory.createContactRecord('test','contact','test.contact@gmail.com',agencyRecordTypeId,false);
    objContact.DoesCaseExistForIndividual__c = true;
    objContact.IndividualId__c='76459';
    insert objContact;
    User objUser = SSP_TestDataFactory.createCommunityUser('tste',objContact.Id,'test.contact@gmail.com','SSP Non Citizen Profile',true);
    test.startTest();
    List<Account> listAccount = SSP_TestDataFactory.createAccounts(1,true);
    List<SSP_Application__c> listSSPApplication = SSP_TestDataFactory.createSSPApplications(1,false);
    listSSPApplication[0].Account__c = listAccount[0].Id;
    insert listSSPApplication;

    Map<String, String> mapCaseVsIndividualId = new Map<String, String>();
    mapCaseVsIndividualId.put(listSSPApplication[0].Id,'76459');

    Cache.SessionPartition sessionPart = Cache.Session.getPartition(SSP_GlobalConstants.CACHE_PARTITION_NAME);
    sessionpart.put(SSP_GlobalConstants.INDIVIDUAL_ID,'76459');
    sessionpart.put('caseVsIndividualId',JSON.serialize(mapCaseVsIndividualId),3600,Cache.Visibility.ALL,false);

        System.runAs(objUser){ 
        
        SSP_ReportChangeSelectionCtrl.invokeReverseSSPHelper(listSSPApplication[0].Id,'SSP_RAC_SelectChangesToReport');
        }
        test.stopTest();
    }

    public static testMethod void testInvokeReverseSSPAddRemoveMemberHelper(){
        String agencyRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Non_Citizen');
    Contact objContact = SSP_TestDataFactory.createContactRecord('test','contact','test.contact@gmail.com',agencyRecordTypeId,true);
    User objUser = SSP_TestDataFactory.createCommunityUser('tste',objContact.Id,'test.contact@gmail.com','SSP Non Citizen Profile',true);
    test.startTest();
    List<Account> listAccount = SSP_TestDataFactory.createAccounts(1,true);
    List<SSP_Application__c> listSSPApplication = SSP_TestDataFactory.createSSPApplications(1,false);
    listSSPApplication[0].Account__c = listAccount[0].Id;
    insert listSSPApplication;

    Map<String, String> mapCaseVsIndividualId = new Map<String, String>();
    mapCaseVsIndividualId.put(listSSPApplication[0].Id,'76459');

    Cache.SessionPartition sessionPart = Cache.Session.getPartition(SSP_GlobalConstants.CACHE_PARTITION_NAME);
    sessionpart.put('caseVsIndividualId',JSON.serialize(mapCaseVsIndividualId),3600,Cache.Visibility.ALL,false);

    System.runAs(objUser){
        SSP_ReportChangeSelectionCtrl.invokeReverseSSPAddRemoveMemberHelper(listSSPApplication[0].Id,'76459');
    }       
    test.stopTest();
    }
    
    public static testMethod void testGetProgramsAppliedOnApplication(){
    String agencyRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Non_Citizen');
    Contact objContact = SSP_TestDataFactory.createContactRecord('test','contact','test.contact@gmail.com',agencyRecordTypeId,true);
    User objUser = SSP_TestDataFactory.createCommunityUser('tste',objContact.Id,'test.contact@gmail.com','SSP Non Citizen Profile',true);
    test.startTest();
    List<Account> listAccount = SSP_TestDataFactory.createAccounts(1,true);
    List<SSP_Application__c> listSSPApplication = SSP_TestDataFactory.createSSPApplications(1,false);
    listSSPApplication[0].Account__c = listAccount[0].Id;
    insert listSSPApplication;
    System.runAs(objUser){
        SSP_ReportChangeSelectionCtrl.getProgramsAppliedOnApplication(listSSPApplication[0].Id);
    }
    test.stopTest();

    }

    public static testMethod void testInvokeReverseSSPForAddRemoveMember(){
        List<Account> listAccount = SSP_TestDataFactory.createAccounts(1,true);
        List<SSP_Application__c> listSSPApplication = SSP_TestDataFactory.createSSPApplications(1,false);
        listSSPApplication[0].Account__c = listAccount[0].Id;
        insert listSSPApplication;
        test.startTest();
            SSP_ReportChangeSelectionCtrl.invokeReverseSSPForAddRemoveMember(listSSPApplication[0].Id,
            '78659','876501','KY');
        test.stopTest();
    }
    
    public static testMethod void testParseRACSelectionServiceResponse(){
        RSSP_DC_Wrapper objWrapper =  new RSSP_DC_Wrapper();
        
    }

    public static testMethod void testDeleteCreatedDataOnExit(){
        List<Account> listAccount = SSP_TestDataFactory.createAccounts(1,true);
        String agencyRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Agency_User');
        Contact objContact = SSP_TestDataFactory.createContactRecord('test','contact','test.contact@gmail.com',agencyRecordTypeId,true);
        List<SSP_Member__c> listSSPMember = SSP_TestDataFactory.createSSPMembers(1,false);
        listSSPMember[0].Contact__c = objContact.Id;
        insert listSSPMember;
        
        List<SSP_Application__c> listSSPApplication = SSP_TestDataFactory.createSSPApplications(1,false);
        listSSPApplication[0].Account__c = listAccount[0].Id;
        insert listSSPApplication;

        List<SSP_ApplicationIndividual__c> listSSPApplicationIndividual = SSP_TestDataFactory.createApplicationIndividuals(1,false);
        listSSPApplicationIndividual[0].SSP_Application__c = listSSPApplication[0].Id;
        listSSPApplicationIndividual[0].SSP_Member__c = listSSPMember[0].Id;
        insert listSSPApplicationIndividual;

        test.startTest();
            SSP_ReportChangeSelectionCtrl.deleteCreatedDataOnExit(listSSPApplication[0].Id);
        test.stopTest();
    }

    public static testMethod void testApplicationIndividualForPolling(){
        List<Account> listAccount = SSP_TestDataFactory.createAccounts(1,true);
        String agencyRecordTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Agency_User');
        Contact objContact1 = SSP_TestDataFactory.createContactRecord('test','contact','test.contact@gmail.com',agencyRecordTypeId,true);
        List<SSP_Member__c> listSSPMember = SSP_TestDataFactory.createSSPMembers(1,false);
        listSSPMember[0].Contact__c = objContact1.Id;
        insert listSSPMember;
        
        List<SSP_Application__c> listSSPApplication = SSP_TestDataFactory.createSSPApplications(1,false);
        listSSPApplication[0].Account__c = listAccount[0].Id;
        insert listSSPApplication;

        List<SSP_ApplicationIndividual__c> listSSPApplicationIndividual = SSP_TestDataFactory.createApplicationIndividuals(1,false);
        listSSPApplicationIndividual[0].SSP_Application__c = listSSPApplication[0].Id;
        listSSPApplicationIndividual[0].SSP_Member__c = listSSPMember[0].Id;
        insert listSSPApplicationIndividual;
        
        SSP_Transaction__c transactionData = new SSP_Transaction__c(
            View_Name__c = 'QualifiedIndividual',
            IndividualId__c = '76459',
            ApplicationId__c = listSSPApplication[0].Id,
            CaseNumber__c = '123456',
            Mode__c = 'Intake',
            Status__c ='Failed',
            Unique_Id__c='76459;QualifiedIndividual');
        
        
        test.startTest();
        SSP_ReportChangeSelectionCtrl.applicationIndividualForPolling(listSSPApplication[0].Id);

        Contact objContact = SSP_TestDataFactory.createContactRecord('test','contact','test.contact@gmail.com',agencyRecordTypeId,false);
        objContact.DoesCaseExistForIndividual__c = true;
        objContact.IndividualId__c='76459';
        insert objContact;

        Map<String, String> mapCaseVsIndividualId = new Map<String, String>();
        mapCaseVsIndividualId.put(listSSPApplication[0].Id,'76459');

        User objUser = SSP_TestDataFactory.createCommunityUser('tste',objContact.Id,'test.contact@gmail.com','SSP Non Citizen Profile',true);
        Cache.SessionPartition sessionPart = Cache.Session.getPartition(SSP_GlobalConstants.CACHE_PARTITION_NAME);
        sessionpart.put(SSP_GlobalConstants.INDIVIDUAL_ID,'76459');
        sessionpart.put('caseVsIndividualId',JSON.serialize(mapCaseVsIndividualId),3600,Cache.Visibility.ALL,false);
        System.runAs(objUser){
            SSP_ReportChangeSelectionCtrl.applicationIndividualForPolling(listSSPApplication[0].Id);

            insert transactionData;

            SSP_ReportChangeSelectionCtrl.applicationIndividualForPolling(listSSPApplication[0].Id);
        }
        test.stopTest();
    }

    public static testMethod void testdummyRACCallout(){
        SSP_ReportChangeSelectionCtrl.dummyRACCallout();
    }
}