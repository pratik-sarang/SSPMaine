/***************************************************************************************************
*   Type        :   Controller Class
*   Name        :   SSP_AbsentParentControllerTest
*   Create By   :   Ajay Saini
*   Create Date :   JAN-2-2020
*   Description :   Test class for SSP_AbsentParentController.
*   Modification Log:
*   --------------------------------------------------------------------------------------
*    Developer                  Date                Description
*   --------------------------------------------------------------------------------------
*    Ajay Saini               JAN-2-2020             Initial Version
*
*****************************************************************************************************/
@isTest(seeAllData=false)
public class SSP_AbsentParentControllerTest {
    @testSetup
    public static void initialDataSetup() {
        insert new LOG_LogMessageSettings__c(
            Name = RE_GlobalConstants.LOGS_DEFAULT_AUTOGENERATED,
            LOG_Debug__c = true,
            LOG_Error__c= true,
            LOG_Info__c = true,
            LOG_Warning__c = true,
            LOG_Log_Purge__c = 365
        );
        Id sCitizenAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Citizen');
        SSP_TestDataFactory.createContactRecord('Test', 'Test', 'test@tester.com', sCitizenAccRecTypeId, true);
    }
    
    public static void dataSetup() {
        Contact contactRecord = [SELECT Id, AccountId FROM Contact LIMIT 1];
        Integer n = 1;
        List<SSP_Application__c> applications = SSP_TestDataFactory.createSSPApplications(n, false);
        for(Integer i = 0; i < n; ++i) {
            applications[i].Account__c = contactRecord.AccountId;
		}
		insert applications;
        
        n = 2;
        List<SSP_Member__c> members = SSP_TestDataFactory.createSSPMembers(n, false);
        for(SSP_Member__c member : members) {
            member.Contact__c = contactRecord.Id;
        }
        insert members;
        List<SSP_ApplicationIndividual__c> individuals = SSP_TestDataFactory.createApplicationIndividuals(n, false);
        for(Integer i = 0; i < n; ++i) {
            individuals[i].SSP_Member__c = members[i].Id;
            individuals[i].SSP_Application__c = applications[0].Id;
        }
        insert individuals;
        SSP_TestDataFactory.createNonCustodialParentRecords(n, true, members[0].Id);
        SSP_TestDataFactory.createNonCustodialParentRecords(n, true, members[1].Id);
    }

    public static User getPortalUser() {
        return SSP_TestDataFactory.createPortalUser();
    }

    public static List<SSP_ApplicationIndividual__c> getApplicationIndividuals() {
        return [SELECT Id, SSP_Member__c, SSP_Application__c FROM SSP_ApplicationIndividual__c];
    }

    @isTest
    public static void unitTest1() {
        User portalUser = getPortalUser();        
        System.runAs(portalUser) {
            dataSetup();
            List<SSP_ApplicationIndividual__c> individuals = getApplicationIndividuals();
            Test.startTest();
            SSP_LightningResponse response = SSP_AbsentParentController.getNonCustodialParentRecords(individuals[0].SSP_Member__c,individuals[0].SSP_Application__c);
            System.assert(response.bIsSuccess);
            response = SSP_AbsentParentController.getNonCustodialParentRecords(null, null);
            System.assert(!response.bIsSuccess);
        	Test.stopTest();
        }
    }
    
    @isTest
    public static void unitTest2() {
        User portalUser = getPortalUser();        
        System.runAs(portalUser) {
            dataSetup();
            List<SSP_ApplicationIndividual__c> individuals = getApplicationIndividuals();
            Test.startTest();
            SSP_LightningResponse response = SSP_AbsentParentController.fetchNonCustodialParents(individuals[0].SSP_Member__c, individuals[0].SSP_Application__c);
            System.assert(response.bIsSuccess);
            response = SSP_AbsentParentController.fetchNonCustodialParents(null, null);
            System.assert(!response.bIsSuccess);
        }
        Test.stopTest();
    }
    
    @isTest
    public static void unitTest3() {
        User portalUser = getPortalUser();
        System.runAs(portalUser) {
            dataSetup();
            List<SSP_ApplicationIndividual__c> individuals = getApplicationIndividuals();
            SSP_NoncustodialRelationship__c r1 = [SELECT Id, SSP_Member__c, SSP_NonCustodialParent__c FROM SSP_NoncustodialRelationship__c WHERE SSP_Member__c =:individuals[0].SSP_Member__c limit 1];
            SSP_NoncustodialRelationship__c r2 = [SELECT Id, SSP_Member__c, SSP_NonCustodialParent__c FROM SSP_NoncustodialRelationship__c WHERE SSP_Member__c =:individuals[1].SSP_Member__c limit 1];
            Test.startTest();
            SSP_LightningResponse response = SSP_AbsentParentController.linkParentRecord(individuals[0].SSP_Member__c, r2.SSP_NonCustodialParent__c, r1.SSP_NonCustodialParent__c, true);
            System.assert(response.bIsSuccess);
            response = SSP_AbsentParentController.linkParentRecord(individuals[1].SSP_Member__c, r2.SSP_NonCustodialParent__c, r1.SSP_NonCustodialParent__c, false);
            System.assert(response.bIsSuccess);
            response = SSP_AbsentParentController.linkParentRecord(null, null, null, false);
            System.assert(!response.bIsSuccess);
            response = SSP_AbsentParentController.linkParentRecord(individuals[1].SSP_Member__c, r2.SSP_NonCustodialParent__c, r2.SSP_NonCustodialParent__c, false);
            System.assert(response.bIsSuccess);//new
            Test.stopTest();
        }
    }
	@isTest    
    public static void unitTest4() {
        User portalUser = getPortalUser();        
        System.runAs(portalUser) {
            dataSetup();
            Integer count = 0;
            List<SSP_ApplicationIndividual__c> individuals = getApplicationIndividuals();
            SSP_NoncustodialRelationship__c[] relationships = [SELECT Id, SSP_Member__c, SSP_NonCustodialParent__c, DCNonCustodialRelationshipId__c FROM SSP_NoncustodialRelationship__c WHERE SSP_Member__c =:individuals[0].SSP_Member__c];
            for(SSP_NoncustodialRelationship__c record: relationships) {
                record.DCNonCustodialRelationshipId__c = count++;
            }
            update relationships;
            Test.startTest();
            SSP_LightningResponse response = SSP_AbsentParentController.linkParentRecord(individuals[0].SSP_Member__c, relationships[0].SSP_NonCustodialParent__c, relationships[1].SSP_NonCustodialParent__c, false);
            System.assert(response.bIsSuccess);
            Test.stopTest();
        }
    }
    
    @isTest    
    public static void unitTest5() {
        User portalUser = getPortalUser();
        System.runAs(portalUser) {
            dataSetup();
            List<SSP_ApplicationIndividual__c> individuals = getApplicationIndividuals();
            SSP_NoncustodialRelationship__c r1 = [SELECT Id, SSP_Member__c, SSP_NonCustodialParent__r.FirstName__c, DCNonCustodialRelationshipId__c FROM SSP_NoncustodialRelationship__c WHERE SSP_Member__c =:individuals[0].SSP_Member__c LIMIT 1];
            SSP_NoncustodialRelationship__c r2 = [SELECT Id, SSP_Member__c, SSP_NonCustodialParent__r.FirstName__c, DCNonCustodialRelationshipId__c FROM SSP_NoncustodialRelationship__c WHERE SSP_Member__c =:individuals[1].SSP_Member__c LIMIT 1];
            Test.startTest();
            SSP_LightningResponse response = SSP_AbsentParentController.updateParentRecord(individuals[0].SSP_Member__c, r1.SSP_NonCustodialParent__c, new SSP_NonCustodialParent__c(FirstName__c = 'Test'));
            System.assert(response.bIsSuccess);
            response = SSP_AbsentParentController.updateParentRecord(individuals[0].SSP_Member__c, r1.SSP_NonCustodialParent__c, new SSP_NonCustodialParent__c(FirstName__c = 'Test', Id = r2.SSP_NonCustodialParent__c));
            System.assert(response.bIsSuccess);
            response = SSP_AbsentParentController.updateParentRecord(null, null, null);
            System.assert(!response.bIsSuccess);
	        Test.stopTest();
        }
    }
}