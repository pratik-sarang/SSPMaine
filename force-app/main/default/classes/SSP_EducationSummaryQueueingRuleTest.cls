/*
* classname 	: SSP_EducationSummaryQueueingRuleTest
* @description 	: A test class for SSP_EducationSummaryQueueingRule class.
* @author 		: Ajay Saini
* @date 		: DEC-18-2019
* MODIFICATION LOG:
* DEVELOPER 			DATE 			DESCRIPTION
* ---------------------------------------------------------------------------------------------
* Ajay Saini 		DEC-18-2019			Initial Version
*/
@isTest
public class SSP_EducationSummaryQueueingRuleTest {
    @testSetup
    public static void initialDataSetup() {
        insert new LOG_LogMessageSettings__c(
            Name = RE_GlobalConstants.LOGS_DEFAULT_AUTOGENERATED,
            LOG_Debug__c = true,
            LOG_Error__c= true,
            LOG_Info__c = true,
            LOG_Warning__c = true,
            LOG_Log_Purge__c = 365
        );
        Id sCitizenAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Citizen');
        SSP_TestDataFactory.createContactRecord('Test', 'Test', 'test@tester.com', sCitizenAccRecTypeId, true);
    }

    public static User getPortalUser() {
        return SSP_TestDataFactory.createPortalUser();
    }

    public static void dataSetup() {
        Integer n = 1;
        Contact contactRecord = [SELECT Id, AccountId FROM Contact LIMIT 1];
        List<SSP_Application__c> applications = SSP_TestDataFactory.createSSPApplications(n, false);
        for(Integer i = 0; i < n; ++i) {
            applications[i].Account__c = contactRecord.AccountId;
		}
        insert applications;
        
        n = 2;
        List<SSP_Member__c> members = SSP_TestDataFactory.createSSPMembers(n, false);
        members[0].IsCurrentlyEnrolledInSchoolToggle__c = SSP_GlobalConstants.NO;
        members[1].IsCurrentlyEnrolledInSchoolToggle__c = SSP_GlobalConstants.YES;
        for(SSP_Member__c member : members) {
            member.Contact__c = contactRecord.Id;
        }
        insert members;
        
        List<SSP_ApplicationIndividual__c> individuals = SSP_TestDataFactory.createApplicationIndividuals(n, false);
        for(Integer i = 0; i < n; ++i) {
            individuals[i].SSP_Member__c = members[i].Id;
            individuals[i].SSP_Application__c = applications[0].Id;
        }
        insert individuals;
    }

    public static ContextData getContext(String flagValue) {
        ContextData ctxData = new ContextData();
        ctxData.memberId = [SELECT Id FROM SSP_Member__c WHERE IsCurrentlyEnrolledInSchoolToggle__c =: flagValue LIMIT 1].Id;
        return ctxData;
    }
    
    @isTest
    public static void unitTest1() {
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();
            Test.startTest();
            Boolean result = new SSP_EducationSummaryQueueingRule().isRequired(null, getContext(SSP_GlobalConstants.YES));
         //   System.assertEquals(false, result);
            Test.stopTest();
        }
	}
    
    @isTest
    public static void unitTest2() {
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();
            Test.startTest();
            Boolean result = new SSP_EducationSummaryQueueingRule().isRequired(null, getContext(SSP_GlobalConstants.NO));
           // System.assertEquals(false, result);
            Test.stopTest();
        }
	}
    
    @isTest
    public static void unitTest3() {
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();
            ContextData ctxData = new ContextData();
            ctxData.memberId = [SELECT Id FROM Account LIMIT 1].Id;
            Test.startTest();
            Boolean result = new SSP_EducationSummaryQueueingRule().isRequired(null, ctxData);
          //  System.assertEquals(false, result);
            Test.stopTest();
        }
	}
}