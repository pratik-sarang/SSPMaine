/*
* @classname     : SSP_ApplicantAddressControllerTest
* @description  : Test class for SSP_ApplicantAddressController.
* @author       : Ajay Saini
* @date         : DEC-2-2019
* MODIFICATION LOG:
* DEVELOPER             DATE            DESCRIPTION
* ---------------------------------------------------------------------------------------------
* Ajay Saini        DEC-2-2019          Initial Version
*/

@isTest(seeAllData=false)
public class SSP_ApplicantAddressControllerTest {
    
    @testSetup
    public static void initialDataSetup() {
        insert new LOG_LogMessageSettings__c(
            Name = RE_GlobalConstants.LOGS_DEFAULT_AUTOGENERATED,
            LOG_Debug__c = true,
            LOG_Error__c= true,
            LOG_Info__c = true,
            LOG_Warning__c = true,
            LOG_Log_Purge__c = 365
        );
        Id sCitizenAccRecTypeId = SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Contact','Citizen');
        SSP_TestDataFactory.createContactRecord('Test', 'Test', 'test@tester.com', sCitizenAccRecTypeId, true);
        dataSetup();
    }
    
    public static void dataSetup() {
        Contact contactRecord = [SELECT Id, AccountId FROM Contact LIMIT 1];
        Integer n = 1;
        List<SSP_Application__c> applications = SSP_TestDataFactory.createSSPApplications(n, false);
        for(Integer i = 0; i < n; ++i) {
            applications[i].Account__c = contactRecord.AccountId;
            applications[i].ProgramsApplied__c='SN';
        }
        insert applications;        
        n = 5;
        List<SSP_Member__c> members = SSP_TestDataFactory.createSSPMembers(n, false);
        for(Integer i = 0; i < n; ++i) {
            members[i].Contact__c = contactRecord.Id;
            members[i].IsFixedAddressToggle__c = (i & 3) != 0 ? SSP_GlobalConstants.YES : SSP_GlobalConstants.NO;
            members[i].HasDifferentMailingAddressToggle__c = (i & 2) != 0 ? SSP_GlobalConstants.YES : SSP_GlobalConstants.NO;
            members[i].MailingGeolocation__Latitude__s=41.4986961;
            members[i].MailingGeolocation__Longitude__s=-90.7722974;
            members[i].PhysicalCountryCode__c='ALB';
            members[i].SameAddressInfoAsHOHToggle__c = SSP_GlobalConstants.YES;
        }
        members[0].SameAddressInfoAsHOHToggle__c = null;
        members[0].PhysicalCountryCode__c='AFG';
        members[0].DCPhysicalAddressId__c=12345;

       //For condition check
        members[3].MailingAddressLine1__c='testaddr';
        members[3].PhysicalAddressLine1__c='testaddr';
        members[3].MailingAddressLine2__c='testaddr';
        members[3].PhysicalAddressLine2__c='testaddr';
        members[3].MailingCity__c='testaddr';
        members[3].PhysicalCity__c='testaddr';
        members[3].MailingStateCode__c='AL';
        members[3].PhysicalStateCode__c='AL';
        members[3].MailingZipCode4__c='1234';
        members[3].PhysicalZipCode4__c='1234';
        members[3].MailingZipCode5__c='1234';
        members[3].PhysicalZipCode5__c='1234';
        members[3].PhysicalCountyCode__c='001';
        members[3].MailingCountyCode__c='001';
        members[3].MailingCountryCode__c='AFG';
        members[3].PhysicalCountryCode__c='AFG';
        members[3].HasDifferentMailingAddressToggle__c=null;
        insert members;
        
        List<SSP_Asset__c> assets = SSP_TestDataFactory.createAssets(members.size(),'Expense', false);
        for(Integer i = 0; i < members.size(); ++i) {
            assets[i].SSP_Member__c = members[i].Id;
            assets[i].ExpenseTypeCode__c = 'UE';
            assets[i].isDeleted__c = false;
        }
        insert assets;
        
        List<SSP_ApplicationIndividual__c> individuals = SSP_TestDataFactory.createApplicationIndividuals(members.size(), false);
        for(Integer i = 0; i < n; ++i) {
            individuals[i].SSP_Member__c = members[i].Id;
            individuals[i].SSP_Application__c = applications[0].Id;
        }
        individuals[0].IsHeadOfHousehold__c = true;
        insert individuals;
        
        
    }
    
    public static User getPortalUser() {
        return SSP_TestDataFactory.createPortalUser();
    }
    
    @isTest
    public static void unitTest1() {
        Test.setMock(WebServiceMock.class, new SSP_AddressVerificationMock());
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();
            Test.startTest();
            SSP_Application__c application = [SELECT Id FROM SSP_Application__c LIMIT 1];
            for(SSP_Member__c member : [SELECT Id, IsFixedAddressToggle__c, HasDifferentMailingAddressToggle__c,
                                        PhysicalAddressLine1__c, PhysicalAddressLine2__c, PhysicalCity__c, PhysicalCountyCode__c, PhysicalStateCode__c,
                                        PhysicalZipCode4__c, PhysicalZipCode5__c, PhysicalCountryCode__c, PhysicalAddrValidated__c, PhysicalMailAddrDeliveryCode__c,
                                        PhysicalCertifiedNoStatIndicator__c, PhysicalResidentialDeliveryIndicator__c, PhysicalCotVacancyIndicator__c,
                                        MailingAddressLine1__c, MailingAddressLine2__c, MailingCity__c, MailingCountyCode__c, MailingStateCode__c,
                                        MailingZipCode4__c, MailingZipCode5__c, MailingCountryCode__c, MailingAddrValidated__c, MailingMailAddrDeliveryCode__c,
                                        MailingCertifiedNoStatIndicator__c, MailingResidentialDeliveryIndicator__c, MailingCotVacancyIndicator__c, 
                                        SameAddressOfHoh__c, SameAddressInfoAsHOHToggle__c,MailingGeolocation__Latitude__s,MailingGeolocation__Longitude__s FROM SSP_Member__c])
            {
                SSP_LightningResponse response = SSP_ApplicantAddressController.updateAddress(member, application.Id,true);
                System.debug('response-'+response);
                System.assert(!response.mapResponse.isEmpty(), 'Empty response after address update.');
            }
            SSP_LightningResponse response = SSP_ApplicantAddressController.updateAddress(null, null,true);
            System.assert(!response.bIsSuccess, 'Address update failed.');
            Test.stopTest();
        }
    }
    
    @isTest
    public static void unitTest2() {
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();
            Test.startTest();
            SSP_Application__c application = [SELECT Id from SSP_Application__c LIMIT 1];
            SSP_LightningResponse response = SSP_ApplicantAddressController.getPrimaryApplicantData(application.Id, null);
            System.assert(response.bIsSuccess, 'getPrimaryApplicantData() failed');
            SSP_Member__c member = [SELECT Id FROM SSP_Member__c LIMIT 1];
            response = SSP_ApplicantAddressController.getPrimaryApplicantData(member.Id, null);
            System.assert(!response.bIsSuccess, 'getPrimaryApplicantData() did not throw expected exception');
            response = SSP_ApplicantAddressController.getPrimaryApplicantData(application.Id,new List<String>{'testfield'});
            //System.assert(!response.bIsSuccess, 'getPrimaryApplicantData() failed');
            Test.stopTest();
        }
    }
    
    @isTest
    public static void unitTest3populateAddressOnHOH() {
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();
            Test.startTest();
            SSP_Application__c application = [SELECT Id from SSP_Application__c LIMIT 1];
            SSP_Member__c member = SSP_ApplicantAddressController.populateAddressOnHOH(application.Id);
            System.assertNotEquals(member,null);
            Test.stopTest();
        }
    }
    @isTest
    public static void unitTest4fetchMemberIdNonPrimary() {
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();
            Test.startTest();
            SSP_Application__c application = [SELECT Id from SSP_Application__c LIMIT 1];
            SSP_LightningResponse res = SSP_ApplicantAddressController.fetchMemberIdNonPrimary(application.Id);
            System.assertNotEquals(res,null);
            Test.stopTest();
        }
    }
    @isTest
    public static void unitTest5populateAddressOnAllOtherMembers() {
        User testUser = getPortalUser();
        System.runAs(testUser) {
            dataSetup();
            Test.startTest();
            SSP_Application__c application = [SELECT Id from SSP_Application__c LIMIT 1];
            List<SSP_Member__c> listMem = SSP_ApplicantAddressController.populateAddressOnAllOtherMembers(application.Id);
            System.assertNotEquals(listMem.size(),0);
            //Pooja P
            List<SSP_Member__c> lstMembers = SSP_AddressService.copyMailingFromPhysicalAddress(listMem);
            //Null list test coverage
           
            String codeValue = SSP_AddressService.getCountyCode('allen');
            codeValue = SSP_AddressService.getCountyCode('somerandomename');
            Test.stopTest();
        }
    }
    @isTest
    public static void unitTest6getExpenseDetails() {
        User testUser = getPortalUser();
        testUser.ApplicableRoles__c = SSP_GlobalConstants.CITIZEN_ROLE;
        testUser.SelectedRole__c = SSP_GlobalConstants.CITIZEN_ROLE;
        update testUser;
        System.runAs(testUser) {
            dataSetup();
            Test.startTest();
            SSP_Member__c member = [SELECT Id from SSP_Member__c LIMIT 1];
            SSP_lightningResponse resp = SSP_ApplicantAddressController.getExpenseDetails(member.Id);
            System.assertNotEquals(resp,null);
            SSP_lightningResponse res1 = SSP_ApplicantAddressController.getExpenseDetails(null);
            Test.stopTest();
        }
    }
    @isTest
    public static void unitTest3() {
        Test.setMock(WebServiceMock.class, new SSP_AddressVerificationMock());
        Test.startTest();
            SSP_Application__c application = [SELECT Id FROM SSP_Application__c LIMIT 1];
            SSP_Member__c member =[SELECT Id, IsFixedAddressToggle__c, HasDifferentMailingAddressToggle__c,
                                        PhysicalAddressLine1__c, PhysicalAddressLine2__c, PhysicalCity__c, PhysicalCountyCode__c, PhysicalStateCode__c,
                                        PhysicalZipCode4__c, PhysicalZipCode5__c, PhysicalCountryCode__c, PhysicalAddrValidated__c, PhysicalMailAddrDeliveryCode__c,
                                        PhysicalCertifiedNoStatIndicator__c, PhysicalResidentialDeliveryIndicator__c, PhysicalCotVacancyIndicator__c,
                                        MailingAddressLine1__c, MailingAddressLine2__c, MailingCity__c, MailingCountyCode__c, MailingStateCode__c,
                                        MailingZipCode4__c, MailingZipCode5__c, MailingCountryCode__c, MailingAddrValidated__c, MailingMailAddrDeliveryCode__c,
                                        MailingCertifiedNoStatIndicator__c, MailingResidentialDeliveryIndicator__c, MailingCotVacancyIndicator__c, 
                                        SameAddressOfHoh__c, SameAddressInfoAsHOHToggle__c,MailingGeolocation__Latitude__s,MailingGeolocation__Longitude__s FROM SSP_Member__c LIMIT 1];
       List<LOG_LogMessage__c> response = SSP_AddressService.validateMemberPhysicalAddress(member);
       List<LOG_LogMessage__c> response1 = SSP_AddressService.validateMemberMailingAddress(member);
       Test.stopTest();
        
    }
    @isTest
    public static void unitTest4() {
        SSP_AddressVerificationMock mockclass= new SSP_AddressVerificationMock();
        mockclass.isDiffDeliveryCode=true;
        Test.setMock(WebServiceMock.class,mockclass);
        Test.startTest();
            SSP_Application__c application = [SELECT Id FROM SSP_Application__c LIMIT 1];
            SSP_Member__c member =[SELECT Id, IsFixedAddressToggle__c, HasDifferentMailingAddressToggle__c,
                                        PhysicalAddressLine1__c, PhysicalAddressLine2__c, PhysicalCity__c, PhysicalCountyCode__c, PhysicalStateCode__c,
                                        PhysicalZipCode4__c, PhysicalZipCode5__c, PhysicalCountryCode__c, PhysicalAddrValidated__c, PhysicalMailAddrDeliveryCode__c,
                                        PhysicalCertifiedNoStatIndicator__c, PhysicalResidentialDeliveryIndicator__c, PhysicalCotVacancyIndicator__c,
                                        MailingAddressLine1__c, MailingAddressLine2__c, MailingCity__c, MailingCountyCode__c, MailingStateCode__c,
                                        MailingZipCode4__c, MailingZipCode5__c, MailingCountryCode__c, MailingAddrValidated__c, MailingMailAddrDeliveryCode__c,
                                        MailingCertifiedNoStatIndicator__c, MailingResidentialDeliveryIndicator__c, MailingCotVacancyIndicator__c, 
                                        SameAddressOfHoh__c, SameAddressInfoAsHOHToggle__c,MailingGeolocation__Latitude__s,MailingGeolocation__Longitude__s FROM SSP_Member__c LIMIT 1];
       List<LOG_LogMessage__c> response = SSP_AddressService.validateMemberPhysicalAddress(member);
       List<LOG_LogMessage__c> response1 = SSP_AddressService.validateMemberMailingAddress(member);
       Test.stopTest();
        
    }
}