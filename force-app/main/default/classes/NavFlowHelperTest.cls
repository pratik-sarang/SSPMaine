@istest
public class NavFlowHelperTest {   
    
    @TestSetup
    public static void setupMethod(){
          	SSP_TestDataFactory.setupTestData();
        
        List<Account> lstAcc = SSP_TestDataFactory.createAccounts(1, false);
        lstAcc[0].Name = 'HealthSelectionCtrl';
        lstAcc = ESAPI.accessController().insertAsUser(lstAcc, SSP_Utility.getFieldsNamesList (lstAcc)).getInsertedObjects();
        
        List<Contact> lstCon = (List<Contact>)SSP_Utility.fetchRecords(new Map<String, String>{'objectName'=>'Contact','operator'=>'AND'}, new Set<String>{'Id', 'FirstName', 'LastName'}, new Map<String, String>{'FirstName'=>'Citizen','LastName'=>'User'});
        
        AccountContactRelation acr = new AccountContactRelation(); 
        acr.Accountid = lstAcc[0].Id;
        acr.Contactid = lstCon[0].Id;
        acr.IsActive = true;
        acr = (AccountContactRelation)ESAPI.accessController().insertAsUser(new List<AccountContactRelation>{acr}, SSP_Utility.getFieldsNamesList (new List<AccountContactRelation>{acr})).getInsertedObjects()[0];       
        
        List<SSP_Application__c> lstAppln = SSP_TestDataFactory.createSSPApplications(1, false);
        lstAppln[0].Account__c=lstAcc[0].Id;        
        lstAppln[0].Contact__c = lstCon[0].Id;
        lstAppln= ESAPI.accessController().insertAsUser(lstAppln, SSP_Utility.getFieldsNamesList (lstAppln)).getInsertedObjects();
        
        List<SSP_Member__c> lstMem = SSP_TestDataFactory.createSSPMembers(1, false);
        lstMem[0].contact__c=lstCon[0].Id;  
        lstMem[0].PrimaryPhoneExtension__c ='7348789790';
        lstMem[0].PrimaryPhoneNumber__c ='8983838290';
        lstMem = ESAPI.accessController().insertAsUser(lstMem, SSP_Utility.getFieldsNamesList (lstMem)).getInsertedObjects();
        
        List<SSP_ApplicationIndividual__c> lstAppInd = SSP_TestDataFactory.createApplicationIndividuals(1, false); 
        lstAppInd[0].SSP_Application__c=lstAppln[0].Id;
        lstAppInd[0].SSP_Member__c=lstMem[0].Id;
        lstAppInd = ESAPI.accessController().insertAsUser(lstAppInd, SSP_Utility.getFieldsNamesList (lstAppInd)).getInsertedObjects();        
     
        NavFlowStatus__c nfs = new NavFlowStatus__c();
        nfs.NavFlowName__c = 'ContactInformation';
        nfs.FlowPageStatus__c = 'CC';
        nfs.FlowDupStatus__c = 'CC';
        nfs.SSPApplication__c = lstAppln[0].Id;
        nfs.SSP_Application__c = lstAppln[0].Id;
        nfs.SSP_Member__c = lstMem[0].Id;
        nfs.Member__c = lstMem[0].Id;
        nfs.Contact__c = lstCon[0].Id;
        insert nfs;                    
        
        //Create Custom settings 
        LOG_LogMessageSettings__c log = new LOG_LogMessageSettings__c();
        log.Name = 'Default_AutoGenerated';
        log.LOG_Debug__c = true;
        log.LOG_Error__c = true;
        log.LOG_Log_Purge__c = 365;
        log.LOG_Info__c = true;
        log.LOG_Warning__c = true;
        insert log;        
    }
    
    @istest
    public static void testgetNavFlowStatus (){
        List<SSP_ApplicationIndividual__c> sspAppIndividualList = [SELECT Id, SSP_Member__c, SSP_Application__c, IsHeadOfHousehold__c, SSP_Application__r.SectionStatus__c FROM SSP_ApplicationIndividual__c];
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        List<NavFlowPageConfig__mdt> flowPageConfigList = NavFlowControllerTest.getNavFlowPageConfig ('ContactInformation');
        Context ctx = new Context();
        ContextData ctxData = new ContextData();
        ctxData = SSP_TestDataFactory.createContextData(sspAppIndividualList);
        ctxData.flowName = 'ContactInformation';
        ctxData.ApplicationId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.MemberId = sspAppIndividualList[0].SSP_Member__c;          
        ctxData.contactId = citizen.ContactId;
        ctxData.recordId = sspAppIndividualList[0].SSP_Application__c;
        ctxData.SelectedPrograms = new List<String>();
        ctxData.modeValue = 'Intake';       	
        ctxData.curNavFlowPageConfigId = !flowPageConfigList.isEmpty() ? flowPageConfigList[0].Id : '';
        NavFlowDetail__mdt navFlowDetail = NavFlowManager.getNavFlowDetail(ctx, ctxData);
        NavFlowStatus__c flowStatus = [SELECT Id, FlowPageStatus__c, FlowDupStatus__c, Screen_Status__c, Contact__c FROM NavFlowStatus__c WHERE NavFlowName__c = 'ContactInformation']; 
        flowStatus.Contact__c = citizen.ContactId;
        update flowStatus;
        Test.startTest();
        NavFlowStatus__c retrievedRecord = NavFlowHelper.getNavFlowStatus(null,citizen.contactId,ctxData.flowName);
        Test.stopTest();
    }
    
    @istest
    public static void flowResumeNavFlowList (){
   		User citizen = getUserDetails();
        System.runAs(citizen){
            Test.startTest();
            List<NavFlowStatus__c> flowStatus = NavFlowResume.getNavFlowStatList(citizen.ContactId);
            system.assert(flowStatus != null);
            Test.stopTest();            
        }
    }
    
    /*private static List<NavFlowPageConfig__mdt> getNavFlowPageConfig (String flowName){
        List<NavFlowPageConfig__mdt> flowPageConfigList = [SELECT Id, PageInfo__r.PageName__c, toLabel(PageInfo__r.Page_Display_Name_View__c) FROM NavFlowPageConfig__mdt WHERE NavigationFlowDetail__r.FlowName__c =:flowName ];            
        return flowPageConfigList;
    }*/
    
    private static User getUserDetails(){
        User citizen  = [SELECT Id, ContactId FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1];
        return citizen;
    }
}