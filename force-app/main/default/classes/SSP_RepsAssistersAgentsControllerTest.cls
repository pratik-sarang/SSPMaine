/*
* classname     :  SSP_RepsAssistersAgentsControllerTest
* @description  :  test class for SSP_RepsAssistersAgentsController
* @author       :  Shrikant Raut   
* @date         :  12/20/2019
* MODIFICATION LOG:
* DEVELOPER                     DATE                               DESCRIPTION
* ---------------------------------------------------------------------------------------------

**/   

@isTest(seeAllData=false)
public class SSP_RepsAssistersAgentsControllerTest {
    /** Author : Kireeti Gora
* Method Name: setup 
* Method Description : Method to setup test data
**/
    @testSetup static void setup() { 
        insert new LOG_LogMessageSettings__c(
            Name = RE_GlobalConstants.LOGS_DEFAULT_AUTOGENERATED,
            LOG_Debug__c = true,
            LOG_Error__c= true,
            LOG_Info__c = true,
            LOG_Warning__c = true,
            LOG_Log_Purge__c = 365
        );
        SSP_TestDataFactory.setupTestData();   
        Cache.SessionPartition sessionPart = Cache.Session.getPartition(SSP_GlobalConstants.CACHE_PARTITION_NAME);   
        
        List<SSP_BenefitInformationWrapper> lstBenefits=  new  List<SSP_BenefitInformationWrapper>();
        SSP_BenefitInformationWrapper  objBenefit = new SSP_BenefitInformationWrapper();
        objBenefit.ProgramCode = system.label.SSP_Medicaid;
        lstBenefits.add(objBenefit);
        SSP_BenefitInformationWrapper  objBenefit1 = new SSP_BenefitInformationWrapper();
        objBenefit1.ProgramCode = system.label.SSP_KTAP;
        lstBenefits.add(objBenefit1);
        SSP_BenefitInformationWrapper  objBenefit2 = new SSP_BenefitInformationWrapper();
        objBenefit2.ProgramCode = system.label.SSP_SNAP;
        lstBenefits.add(objBenefit2);
        SSP_BenefitInformationWrapper  objBenefit3 = new SSP_BenefitInformationWrapper();
        objBenefit3.ProgramCode = system.label.SSP_KIHIPP;
        lstBenefits.add(objBenefit3);
        SSP_BenefitInformationWrapper  objBenefit4 = new SSP_BenefitInformationWrapper();
        objBenefit4.ProgramCode = system.label.SSP_ChildCareAssistance;
        lstBenefits.add(objBenefit4);
        SSP_BenefitInformationWrapper  objBenefit5 = new SSP_BenefitInformationWrapper();
        objBenefit5.ProgramCode = system.label.SSP_StateSupplementation;
        lstBenefits.add(objBenefit5);
        
        sessionPart.put('AllBenefits',JSON.serialize(new Map<String, List<SSP_BenefitInformationWrapper>>{'890'=>lstBenefits}));
        
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        List<Account> lstAcc = SSP_TestDataFactory.createAccounts(1, false);
        lstAcc[0].Name = 'RepsAssistersAgentsController';
        insert lstAcc;
        List<Account> lstAcc1 = SSP_TestDataFactory.createAccounts(6, false);
        lstAcc1[0].Name = 'RepsAssistersAgentsController';
        lstAcc1[0].caseNumber__c = '891';
         lstAcc1[0].dcdataId__c = 891;
        lstAcc1[1].Name = 'RepsAssistersAgentsController';
        lstAcc1[1].caseNumber__c = '890';
        lstAcc1[1].RecordTypeId= SSP_Utility.getRecrodTypeIdBySobjectAndDevName('Account','Application');
        lstAcc1[2].Name = 'RepsAssistersAgentsController';
        lstAcc1[3].Name = 'RepsAssistersAgentsController';
        lstAcc1[4].Name = 'RepsAssistersAgentsController';
        lstAcc1[5].Name = 'RepsAssistersAgentsController';
        lstAcc1[5].caseNumber__c = '567';
        insert lstAcc1;
        
        List<Contact> lstCon = [SELECT Id, FirstName, LastName,HoursAvailableCode__c FROM Contact WHERE FirstName = 'Citizen' AND LastName = 'User' LIMIT 1]; 
        lstCon[0].HoursAvailableCode__c= 'M;D;W';
        lstCon[0].IndividualId__c='1432';
        List<Contact> lstContact =  SSP_TestDataFactory.createContacts(2,true);
        lstContact[0].accountId = lstAcc1[2].Id;
        lstContact[1].accountId = lstAcc1[3].Id;
        lstContact[0].Email='CitizenEmail@test.com';
        lstContact[0].IndividualId__c='123456';
        UPDATE lstCon;
        INSERT lstContact;
        List<AccountContactRelation> lstACR= new List<AccountContactRelation>();
        AccountContactRelation acr = new AccountContactRelation(); 
        AccountContactRelation acr6 = new AccountContactRelation(); 
        acr.Accountid = lstAcc[0].Id;
        acr.Contactid = lstCon[0].Id;
        acr.IsActive = true;
        acr.ProgramsApplied__c = 'MA;KT;CC;SN;SS;KP';
        acr.Roles = 'Individual_Auth_Rep;Assister;Insurance_Agent';
        acr.DCContactId__c = 879;
        acr.DCAgencyId__c = 879;
        acr.PermissionLevel_Medicaid__c = 'ST';
        acr.PermissionLevel_CCAP__c='ST';
        acr.PermissionLevel_KIHIPP__c='ST';
        acr.PermissionLevel_KTAP__c='ST';
        acr.PermissionLevel_StateSupp__c='ST';
        acr.PermissionLevel_SNAP__c='ST';
        acr.RequestAccessPermission__c='test';
        lstACR.add(acr);
        
        acr6.Accountid = lstAcc[0].Id;
        acr6.Contactid = lstContact[0].Id;
        acr6.IsActive = true; 
        acr6.ProgramsApplied__c = 'MA;KT;CC;SN;SS;KP';
        acr6.Roles = 'Individual_Auth_Rep;Assister;Insurance_Agent';
        acr6.PermissionLevel_Medicaid__c = 'NT';
        acr6.PermissionLevel_CCAP__c='NT';
        acr6.PermissionLevel_KIHIPP__c='ST';
        acr6.PermissionLevel_KTAP__c='SE';
        acr6.PermissionLevel_StateSupp__c='ST';
        acr6.PermissionLevel_SNAP__c='SE';
        acr6.RequestAccessPermission__c='test';
        lstACR.add(acr6);
        AccountContactRelation acr7 = new AccountContactRelation(); 
        acr7.Accountid = lstAcc[0].Id;
        acr7.Contactid = lstContact[1].Id;
        acr7.IsActive = true;
        acr7.ProgramsApplied__c = 'MA;KT;CC;SN;SS;KP';
        acr7.Roles = 'Individual_Auth_Rep;Assister;Insurance_Agent';
        acr7.PermissionLevel_Medicaid__c = 'ST';
        acr7.PermissionLevel_CCAP__c='ET';
        acr7.PermissionLevel_KIHIPP__c='ST';
        acr7.PermissionLevel_KTAP__c='ET';
        acr7.PermissionLevel_StateSupp__c='ST';
        acr7.PermissionLevel_SNAP__c='ET';
        lstACR.add(acr7);
        AccountContactRelation acr1 = new AccountContactRelation(); 
        acr1.Accountid = lstAcc1[0].Id;
        acr1.Contactid = lstCon[0].Id;
        acr1.IsActive = true;
        acr1.ProgramsApplied__c = 'MA';
        acr1.Roles = 'Assister';
        acr1.PermissionLevel_Medicaid__c = 'NT';
        
        acr1.PermissionLevel_CCAP__c='NT';
        acr1.PermissionLevel_KIHIPP__c='ST';
        acr1.PermissionLevel_KTAP__c='SE';
        acr1.PermissionLevel_StateSupp__c='ST';
        acr1.PermissionLevel_SNAP__c='SE';
        acr1.RequestAccessPermission__c='test';
        lstACR.add(acr1); 
        AccountContactRelation acr2 = new AccountContactRelation(); 
        acr2.Accountid = lstAcc1[1].Id;
        acr2.Contactid = lstCon[0].Id;
        acr2.IsActive = true;
        acr2.ProgramsApplied__c = 'KT;CC;SN;SS;KP';
        acr2.Roles = 'Assister';
        acr2.PermissionLevel_Medicaid__c = 'NT';
        acr2.PermissionLevel_CCAP__c='CA';
        
        acr2.PermissionLevel_KTAP__c='ET';
        
        acr2.PermissionLevel_SNAP__c='ET';
        lstACR.add(acr2); 
        AccountContactRelation acr3 = new AccountContactRelation(); 
        acr3.Accountid = lstAcc1[2].Id;
        acr3.Contactid = lstCon[0].Id;
        acr2.PermissionLevel_Medicaid__c = NULL;
        acr2.ProgramsApplied__c = 'MA;KT;CC;SN;SS;KP';
        acr3.IsActive = true;        
        acr3.Roles = 'Individual_Auth_Rep';       
        lstACR.add(acr3); 
        AccountContactRelation acr4 = new AccountContactRelation(); 
        acr4.Accountid = lstAcc1[3].Id;
        acr4.Contactid = lstCon[0].Id;
        acr4.PermissionLevel_Medicaid__c = NULL;
        acr4.IsActive = true;
        acr4.ProgramsApplied__c = 'MA;KT;CC;SN;SS;KP';
        acr4.Roles = 'Individual_Auth_Rep';  
        acr4.PermissionLevel_CCAP__c='CC';
        lstACR.add(acr4);
        AccountContactRelation acr5 = new AccountContactRelation(); 
        acr5.Accountid = lstAcc1[4].Id;
        acr5.Contactid = lstCon[0].Id;
        acr5.PermissionLevel_Medicaid__c = NULL;
        acr5.IsActive = true;
        acr5.ProgramsApplied__c = 'MA;KT;CC;SN;SS;KP';
        acr5.Roles = 'Individual_Auth_Rep;Assister;Insurance_Agent';    
        acr5.PermissionLevel_CCAP__c='PY';
        lstACR.add(acr5);
        
        INSERT lstACR;
        sessionPart.put('caseOptions',JSON.serialize(new set<Integer>{673,891}));
        List<SSP_Application__c> lstAppln = SSP_TestDataFactory.createSSPApplications(7, false);
        lstAppln[0].Account__c=lstAcc[0].Id;        
        lstAppln[0].Contact__c = lstCon[0].Id;
        lstAppln[0].status__c = 'UN';
        lstAppln[0].LocalDCBSOffice__c = 'Kentucky';
        lstAppln[0].ProgramsApplied__c ='MA;KT;CC;SN;SS;KP';
        lstAppln[0].DCCaseNumber__c = NULL;
        lstAppln[0].ApplicationCreationInSSP__c = system.today();
        // lstAppln[0].DCCaseNumber__c = 890;
        lstAppln[1].Account__c=lstAcc1[0].Id;        
        lstAppln[1].Contact__c = lstCon[0].Id;
        lstAppln[1].ProgramsApplied__c ='MA;KT;CC;SN;SS;KP';
        lstAppln[1].status__c = 'Approved';
        lstAppln[1].LocalDCBSOffice__c = 'Kentucky';
        lstAppln[1].DCCaseNumber__c = 890;
        lstAppln[1].ApplicationCreationInSSP__c = system.today();
        
        
        lstAppln[2].Account__c=lstAcc1[1].Id;        
        lstAppln[2].Contact__c = lstCon[0].Id;
        lstAppln[2].status__c = 'Approved';
        lstAppln[2].LocalDCBSOffice__c = 'Kentucky';
        lstAppln[2].DCCaseNumber__c = 891;
        lstAppln[2].RecordTypeId=SSP_Utility.getRecrodTypeIdBySobjectAndDevName('SSP_Application__c','Case');
        lstAppln[2].ProgramsApplied__c ='MA;KT;CC;SN;SS;KP';
        lstAppln[2].ApplicationCreationInSSP__c = system.today();
        
        lstAppln[3].Account__c=lstAcc1[2].Id;        
        lstAppln[3].Contact__c = lstCon[0].Id;
        lstAppln[3].status__c = 'UN';
        lstAppln[3].LocalDCBSOffice__c = 'Kentucky';
        lstAppln[3].DCCaseNumber__c = 892;
        lstAppln[3].ProgramsApplied__c ='MA;KT;CC;SN;SS;KP';
        lstAppln[3].ApplicationCreationInSSP__c = system.today();
        
        lstAppln[4].Account__c=lstAcc1[3].Id;        
        lstAppln[4].Contact__c = lstCon[0].Id;
        lstAppln[4].status__c = 'UN';
        lstAppln[4].LocalDCBSOffice__c = 'Kentucky';
        lstAppln[4].DCCaseNumber__c = 893;
        lstAppln[4].ProgramsApplied__c ='MA;KT;CC;SN;SS;KP';
        lstAppln[4].ApplicationCreationInSSP__c = system.today();
        
        lstAppln[5].Account__c=lstAcc1[4].Id;        
        lstAppln[5].Contact__c = lstCon[0].Id;
        lstAppln[5].status__c = 'UN';
        lstAppln[5].LocalDCBSOffice__c = 'Kentucky';
        lstAppln[5].DCCaseNumber__c = null;
        lstAppln[5].ProgramsApplied__c ='MA;KT;CC;SN;SS;KP';
        lstAppln[5].ApplicationCreationInSSP__c = system.today();
        
          lstAppln[6].Account__c=lstAcc1[5].Id;        
        lstAppln[6].Contact__c = lstCon[0].Id;
        lstAppln[6].status__c = 'UN';
        lstAppln[6].LocalDCBSOffice__c = 'Kentucky';
        lstAppln[6].DCCaseNumber__c = null;
 lstAppln[6].ProgramsApplied__c = null;        
        lstAppln[6].ApplicationCreationInSSP__c = system.today();
        upsert lstAppln;
        
        List<SSP_Member__c> lstMem = SSP_TestDataFactory.createSSPMembers(1, false);
        lstMem[0].contact__c=lstCon[0].Id;  
        lstMem[0].PhysicalAddressLine1__c='test';
        lstMem[0].PhysicalAddressLine2__c='test';
        // lstMem[0].PhysicalCountyCode__c='1';
        lstMem[0].PhysicalStateCode__c='AL';
        lstMem[0].PhysicalZipCode5__c='40014';
        lstMem[0].MailingAddressLine1__c='test';
        lstMem[0].MailingAddressLine2__c='test';
        //   lstMem[0].MailingCountyCode__c='1';
        lstMem[0].MailingStateCode__c='AL';
        lstMem[0].MailingZipCode5__c='40014';
        //  lstMem[0].PreferredNotificationMethodCode__c='Mail;Phone';
        //lstMem[0].IsHeadOfHousehold__c =true;
        
        insert lstMem;
        
        
        
        List<SSP_ApplicationIndividual__c> lstAppInd = SSP_TestDataFactory.createApplicationIndividuals(7, false); 
        lstAppInd[0].SSP_Application__c=lstAppln[1].Id;
        lstAppInd[0].SSP_Member__c=lstMem[0].Id;
        lstAppInd[0].ProgramsApplied__c = 'MA;KT;CC;SN;SS;KP';
        lstAppInd[0].isHeadOfHousehold__c = true;
        
        lstAppInd[1].SSP_Application__c=lstAppln[2].Id;
        lstAppInd[1].SSP_Member__c=lstMem[0].Id;
        lstAppInd[1].ProgramsApplied__c = 'MA;KT;CC;SN;SS;KP';
        lstAppInd[1].isHeadOfHousehold__c = true;
        lstAppInd[2].SSP_Application__c=lstAppln[0].Id;
        lstAppInd[2].SSP_Member__c=lstMem[0].Id;
        lstAppInd[2].ProgramsApplied__c = 'MA;KT;CC;SN;SS;KP';
        lstAppInd[2].isHeadOfHousehold__c = true;
        lstAppInd[3].SSP_Application__c=lstAppln[3].Id;
        lstAppInd[3].SSP_Member__c=lstMem[0].Id;
        lstAppInd[3].ProgramsApplied__c = 'MA;KT;CC;SN;SS;KP';
        lstAppInd[3].isHeadOfHousehold__c = true;
        lstAppInd[4].SSP_Application__c=lstAppln[4].Id; 
        lstAppInd[4].SSP_Member__c=lstMem[0].Id;
        lstAppInd[4].ProgramsApplied__c = 'MA;KT;CC;SN;SS;KP';
        lstAppInd[4].isHeadOfHousehold__c = true;
        lstAppInd[5].SSP_Application__c=lstAppln[5].Id;
        lstAppInd[5].SSP_Member__c=lstMem[0].Id;
        lstAppInd[5].ProgramsApplied__c = 'MA;KT';
        lstAppInd[5].isHeadOfHousehold__c = true;
        lstAppInd[6].SSP_Application__c=lstAppln[5].Id;
        lstAppInd[6].SSP_Member__c=lstMem[0].Id;
        lstAppInd[6].ProgramsApplied__c = 'CC;SN';
        lstAppInd[6].isHeadOfHousehold__c = true;
        insert lstAppInd;   
        
        
    }
    /** Author : Kireeti Gora
* Method Name: getRepsAssistersAgentsDetails
* Method Description : Method to test getRepsAssistersAgentsDetails Method
**/
    @isTest
    public static void test_getRepsAssistersAgentsDetails(){
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        Id objAppNegative = [SELECT Id FROM SSP_Application__c  where programsApplied__c = null LIMIT 1].Id;
        System.runAs(citizen){
            test.startTest();
            //programsApplied__c != null 
             Cache.SessionPartition sessionPart = Cache.Session.getPartition(SSP_GlobalConstants.CACHE_PARTITION_NAME);
            Id objApp = [SELECT Id FROM SSP_Application__c  where programsApplied__c != null LIMIT 1].Id;
            
            AccountContactRelation  acr = [SELECT Id,accountId,contactId,ProgramsApplied__c,Roles,PermissionLevel_Medicaid__c,PermissionLevel_SNAP__c,PermissionLevel_StateSupp__c,
                                           PermissionLevel_KIHIPP__c,PermissionLevel_KTAP__c,PermissionLevel_CCAP__c FROM AccountContactRelation where ProgramsApplied__c = 'MA'  limit 1 ];
            SSP_LightningResponse response = SSP_RepsAssistersAgentsController.getRepsAssistersAgentsDetails(objApp,'');
            response = SSP_RepsAssistersAgentsController.getRepsAssistersAgentsDetails(objAppNegative,'');
            sessionPart.put('selectedrole','Individual_Auth_Rep');
            SSP_LightningResponse responsee = SSP_RepsAssistersAgentsController.getProgramCaseDetails(acr.id,objApp);
            SSP_LightningResponse response1 = SSP_RepsAssistersAgentsController.getProgramCaseDetails('','');          
            system.assertNotEquals(null, response.mapResponse);
            //   system.assert(response.mapResponse.containsKey('authorizedRepresentativeRecords'));  
           
            sessionPart.put('selectedrole','Assister');
            SSP_LightningResponse response2 = SSP_RepsAssistersAgentsController.getRepsAssistersAgentsDetails(objApp,'');
               test.stopTest();
            sessionPart.put('selectedrole',SSP_GlobalConstants.INSURANCEAGENT_ROLE);
            response2 = SSP_RepsAssistersAgentsController.getRepsAssistersAgentsDetails(objApp,'intake');
            sessionPart.put('selectedrole','Individual_Auth_Rep');
            response2 = SSP_RepsAssistersAgentsController.getRepsAssistersAgentsDetails(objApp,'intake');
            sessionPart.put('selectedrole','Assister');
            response2 = SSP_RepsAssistersAgentsController.getRepsAssistersAgentsDetails(objApp,'intake');
          
            
         
        }
        
    } 
    @isTest
    public static void test_FetchExistingAppliications(){
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        System.runAs(citizen){
            test.startTest();
            
            
            test.stopTest();
        }
        
    } 
    /** Author : Kireeti Gora
* Method Name: getRepsAssistersAgentsDetails
* Method Description : Method to test getRepsAssistersAgentsDetails Method
**/
    @isTest
    public static void test_RemoveRepsAssistersAgentsDetails(){
        Test.setMock(HttpCalloutMock.class, new SSP_UpdateDCRepIntegrationServiceMock());
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
          SSP_Application__c  objAppNegative = [SELECT Id FROM SSP_Application__c where ProgramsApplied__c = null limit 1 ];
        System.runAs(citizen){
            
            AccountContactRelation  acr = [SELECT Id,accountId,contactId,ProgramsApplied__c,Roles,PermissionLevel_Medicaid__c,PermissionLevel_SNAP__c,PermissionLevel_StateSupp__c,
                                           PermissionLevel_KIHIPP__c,PermissionLevel_KTAP__c,PermissionLevel_CCAP__c FROM AccountContactRelation where ProgramsApplied__c ='MA' limit 1 ];
            String responsee = SSP_RepsAssistersAgentsController.updateACRRecords(JSON.serialize(acr),'');
            AccountContactRelation  acrnt = [SELECT Id,accountId,contactId,ProgramsApplied__c,Roles,PermissionLevel_Medicaid__c,PermissionLevel_SNAP__c,PermissionLevel_StateSupp__c,
                                             PermissionLevel_KIHIPP__c,PermissionLevel_KTAP__c,PermissionLevel_CCAP__c FROM AccountContactRelation where PermissionLevel_Medicaid__c = 'NT' limit 1 ];
            SSP_Application__c  objApp = [SELECT Id FROM SSP_Application__c where DCCaseNumber__c != null limit 1 ];
            SSP_Application__c  objApp1 = [SELECT Id FROM SSP_Application__c where DCCaseNumber__c = null limit 1 ];
            Test.startTest();
            AccountContactRelation  acr1 = new AccountContactRelation();
            acr1.AccountId=acr.AccountId;
            acr1.contactId=acr.Contactid;
            acr1.PermissionLevel_Medicaid__c = 'ST';
            acr1.PermissionLevel_CCAP__c='ST';
            acr1.PermissionLevel_KIHIPP__c='ST';
            acr1.PermissionLevel_KTAP__c='ST';
            acr1.PermissionLevel_StateSupp__c='ST';
            acr1.PermissionLevel_SNAP__c='ST';
            acr1.ProgramsApplied__c='SN';
            acr1.RequestAccessPermission__c='test';
            String responseBoolean = SSP_RepsAssistersAgentsController.updateACRRecords(JSON.serialize(acr1),objApp.Id);
              responseBoolean = SSP_RepsAssistersAgentsController.updateACRRecords(JSON.serialize(acr1),objAppNegative.Id);
            
            
            AccountContactRelation  acr2 = new AccountContactRelation();
            acr2.Id=acr.Id;
            acr2.PermissionLevel_Medicaid__c = null;
            acr2.PermissionLevel_CCAP__c=null;
            acr2.PermissionLevel_KIHIPP__c=null;
            acr2.PermissionLevel_KTAP__c=null;
            acr2.PermissionLevel_StateSupp__c=null;
            acr2.PermissionLevel_SNAP__c=null;
            acr2.ProgramsApplied__c='MA;KT;CC;SN;SS;KP';
            acr2.RequestAccessPermission__c='test';
            update acr2;
            String responseBoolean1 = SSP_RepsAssistersAgentsController.updateACRRecords(JSON.serialize(acr2),objApp.Id);
            
            AccountContactRelation  acr3 = new AccountContactRelation();
            acr3.Id=acr.Id;
            acr3.PermissionLevel_Medicaid__c = 'ST';
            acr3.PermissionLevel_CCAP__c='ST';
            acr3.PermissionLevel_KIHIPP__c='ST';
            acr3.PermissionLevel_KTAP__c='ST';
            acr3.PermissionLevel_StateSupp__c='ST';
            acr3.PermissionLevel_SNAP__c='ST';
            acr3.ProgramsApplied__c=null;
            acr3.RequestAccessPermission__c='test';
            update acr3;
            
            String responseBoolean2 = SSP_RepsAssistersAgentsController.updateACRRecords(JSON.serialize(acr3),objApp.Id);
            Id  acrId = [SELECT Id FROM AccountContactRelation where PermissionLevel_CCAP__c = 'ST' limit 1 ].Id;
            SSP_LightningResponse response = SSP_RepsAssistersAgentsController.removeRepsAssistersAgentsDetails(acrId,'Assister','');
            Id  acrId1 = [SELECT Id FROM AccountContactRelation where roles != 'Assister' limit 1 ].Id;
            SSP_LightningResponse response1 = SSP_RepsAssistersAgentsController.removeRepsAssistersAgentsDetails(acrId1,'Assister','');
            Id  acrId2 = [SELECT Id FROM AccountContactRelation where roles = 'Individual_Auth_Rep' limit 1].Id;
            SSP_LightningResponse responseNegative = SSP_RepsAssistersAgentsController.removeRepsAssistersAgentsDetails(acrId2,'Authorized Representative',objApp.Id);
            Id  acrId3 = [SELECT Id FROM AccountContactRelation where roles = 'Assister' limit 1 ].Id;
           SSP_LightningResponse response3 = SSP_RepsAssistersAgentsController.removeRepsAssistersAgentsDetails(acrId3,'Assister',objApp1.Id);
            Id  acrId4 = [SELECT Id FROM AccountContactRelation  limit 1].Id;
            SSP_LightningResponse response4 = SSP_RepsAssistersAgentsController.removeRepsAssistersAgentsDetails(acrId4,'Assister','');
            
            Test.stopTest();
            
            
            
        }
        
    } 
    @isTest
    public static void test_RemoveRepsAssistersAgentsDetails1(){
        Test.setMock(HttpCalloutMock.class, new SSP_UpdateDCRepIntegrationServiceMock());
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        SSP_Application__c  objApp = [SELECT Id FROM SSP_Application__c where DCCaseNumber__c != null limit 1 ];
        List<Account> lstAcc = SSP_TestDataFactory.createAccounts(1, false);
        lstAcc[0].Name = 'RepsAssistersAgentsController';
        insert lstAcc;
        List<Contact> lstContact =  SSP_TestDataFactory.createContacts(1,true);
        SSP_Application__c  objAppNegative = [SELECT Id FROM SSP_Application__c where ProgramsApplied__c = null limit 1 ];
        System.runAs(citizen){
            Test.startTest();
            AccountContactRelation  acr1 = new AccountContactRelation();
            acr1.accountId=lstAcc[0].Id;
            acr1.contactId=lstContact[0].Id;
            acr1.PermissionLevel_Medicaid__c = 'ST';
            acr1.PermissionLevel_CCAP__c='ST';
            acr1.PermissionLevel_KIHIPP__c='ST';
            acr1.PermissionLevel_KTAP__c='ST';
            acr1.PermissionLevel_StateSupp__c='ST';
            acr1.PermissionLevel_SNAP__c='ST';
            acr1.ProgramsApplied__c='SN';
            acr1.RequestAccessPermission__c='test';
            String responseBoolean = SSP_RepsAssistersAgentsController.updateACRRecords(JSON.serialize(acr1),objApp.Id);
             SSP_LightningResponse response = SSP_RepsAssistersAgentsController.removeRepsAssistersAgentsDetails(null,'',objAppNegative.Id);
             response = SSP_RepsAssistersAgentsController.getProgramCaseDetails('',objAppNegative.Id);
            Test.stopTest();
        } 
    }
    
    @isTest
    public static void test_updatePrograms(){
        User citizen  = [SELECT Id FROM User WHERE UserName = 'citizen@abc.xyz' LIMIT 1][0];
        Map<String,Boolean> caseMap=new Map<String,Boolean> ();
        Map<String,String> caseMapStatus=new Map<String,String> ();
        caseMap.put('673',true);
        caseMap.put('890',true);
        caseMap.put('567',true);
        caseMapStatus.put('673','AP');
        caseMapStatus.put('891','AP');
        caseMapStatus.put('567','AP');
        Cache.SessionPartition sessionPart = Cache.Session.getPartition(SSP_GlobalConstants.CACHE_PARTITION_NAME);
        sessionPart.put('individualId','123456');
        sessionPart.put('caseVsHOH',JSON.serialize(caseMap));
        sessionPart.put('caseVsStatus',JSON.serialize(caseMapStatus));
        Contact objContact= [Select Id,Name FROM Contact WHERE Email='CitizenEmail@test.com'];
        Contact_Mapping__c cm1 = new Contact_Mapping__c(Contact__c = objContact.Id,Group_Id__c = 'Grp123',IEES_Id__c = 234567788);
        insert cm1;
        SSP_RepsAssistersAgentsController.updatePrograms('');        
       
        SSP_RepsAssistersAgentsController.getMemberId(true); 
        sessionPart.put('individualId','6');
         SSP_RepsAssistersAgentsController.updatePrograms(null); 
        SSP_RepsAssistersAgentsController.getMemberId(true); 
    }
    public class SSP_UpdateDCRepIntegrationServiceMock implements HttpCalloutMock{
        
        public HTTPResponse respond(HTTPRequest req) {
            httpResponse response = new HttpResponse();
            response.setStatusCode(200);
            response.setBody(responseBody);
            return response;
        }
        
        String responseBody =   '   {  '  + 
            '     "AckResponse": {  '  + 
            '       "Success": true,  '  + 
            '       "Error": {} '  + 
            '     }  '  + 
            '  }  ' ; 
    }
    
}
